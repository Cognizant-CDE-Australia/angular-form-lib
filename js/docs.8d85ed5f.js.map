{"version":3,"sources":["webpack:///js/docs.8d85ed5f.js","webpack:///./modules/ngFormLib/controls/errorMessageContainer/ErrorMessageContainer.js","webpack:///./modules/ngFormLib/controls/common/index.js","webpack:///./modules/ngFormLib/controls/common/FormControlService.js","webpack:///./modules/common/Utility.js","webpack:///./modules/ngFormLib/controls/common/FieldErrorController.js","webpack:///./modules/ngFormLib/controls/formCheckbox/FormCheckbox.js","webpack:///./modules/ngFormLib/controls/formDate/FormDate.js","webpack:///./modules/ngFormLib/controls/formInput/FormInput.js","webpack:///./modules/ngFormLib/controls/formRadioButton/FormRadioButton.js","webpack:///./modules/ngFormLib/controls/formReset/FormReset.js","webpack:///./modules/ngFormLib/controls/formSelect/FormSelect.js","webpack:///./modules/ngFormLib/controls/formSubmit/FormSubmit.js","webpack:///./modules/ngFormLib/controls/index.js","webpack:///./modules/ngFormLib/controls/requiredMarker/RequiredMarker.js","webpack:///./modules/ngFormLib/index.js","webpack:///./modules/ngFormLib/policy/FormPolicy.js","webpack:///./modules/ngFormLib/controls/formCheckbox/template/FormCheckboxTemplate.tpl.html","webpack:///./modules/ngFormLib/controls/formDate/template/FormDateInputTemplate.tpl.html","webpack:///./modules/ngFormLib/controls/formInput/template/FormInputTemplate.tpl.html","webpack:///./modules/ngFormLib/controls/formRadioButton/template/FormRadioButtonTemplate.tpl.html","webpack:///./modules/ngFormLib/controls/formSelect/template/FormSelectTemplate.tpl.html","webpack:///./modules/ngFormLib/controls/requiredMarker/template/RequiredMarkerTemplate.tpl.html","webpack:///../~/angular-strap/dist/angular-strap.js","webpack:///./modules/docs/docFixtures.js","webpack:///./modules/docs/docs.js","webpack:///./modules/docs/index.js","webpack:///./modules/ngFormLib/controls/common/docs/formControlsCommon.docs.js","webpack:///./modules/ngFormLib/controls/common/docs/formControlsCommonProperties.docs.js","webpack:///./modules/ngFormLib/controls/common/docs/formControlsDemos.docs.js","webpack:///./modules/ngFormLib/controls/common/docs/formControlsService.docs.js","webpack:///./modules/ngFormLib/controls/errorMessageContainer/docs/errorMessageContainer.docs.js","webpack:///./modules/ngFormLib/controls/formCheckbox/docs/formCheckbox.docs.js","webpack:///./modules/ngFormLib/controls/formDate/docs/formDate.docs.js","webpack:///./modules/ngFormLib/controls/formInput/docs/formInput.docs.js","webpack:///./modules/ngFormLib/controls/formRadioButton/docs/formRadioButton.docs.js","webpack:///./modules/ngFormLib/controls/formReset/docs/formReset.docs.js","webpack:///./modules/ngFormLib/controls/formSelect/docs/formSelect.docs.js","webpack:///./modules/ngFormLib/controls/formSubmit/docs/formSubmit.docs.js","webpack:///./modules/ngFormLib/controls/requiredMarker/docs/requiredMarker.docs.js","webpack:///./modules/ngFormLib/policy/behaviourOnStateChange/PolicyBehaviourOnStateChange.js","webpack:///./modules/ngFormLib/policy/checkForStateChanges/PolicyCheckForStateChanges.js","webpack:///./modules/ngFormLib/policy/docs/formPolicy.docs.js","webpack:///./modules/ngFormLib/policy/stateDefinitions/PolicyStateDefinitions.js","webpack:///./modules/docs/templates/aside.inc","webpack:///./modules/docs/assets/config/docsConfig.json","webpack:///./modules/docs/templates/affixed-sidenav.html","webpack:///./modules/docs/templates/docs-component.html","webpack:///./modules/docs/templates/footer.html","webpack:///./modules/docs/templates/getting-started.html","webpack:///./modules/docs/templates/header.html","webpack:///./modules/docs/templates/navbar.html","webpack:///./modules/docs/templates/sidenav.html","webpack:///./modules/ngFormLib/controls/common/docs/formControlsCommon.docs.html","webpack:///./modules/ngFormLib/controls/common/docs/formControlsCommonProperties.docs.html","webpack:///./modules/ngFormLib/controls/common/docs/formControlsDemos.docs.html","webpack:///./modules/ngFormLib/controls/common/docs/formControlsService.docs.html","webpack:///./modules/ngFormLib/controls/errorMessageContainer/docs/errorMessageContainer.docs.html","webpack:///./modules/ngFormLib/controls/formCheckbox/docs/formCheckbox.docs.html","webpack:///./modules/ngFormLib/controls/formDate/docs/formDate.docs.html","webpack:///./modules/ngFormLib/controls/formInput/docs/formInput.docs.html","webpack:///./modules/ngFormLib/controls/formRadioButton/docs/formRadioButton.docs.html","webpack:///./modules/ngFormLib/controls/formReset/docs/formReset.docs.html","webpack:///./modules/ngFormLib/controls/formSelect/docs/formSelect.docs.html","webpack:///./modules/ngFormLib/controls/formSubmit/docs/formSubmit.docs.html","webpack:///./modules/ngFormLib/controls/requiredMarker/docs/requiredMarker.docs.html","webpack:///./modules/ngFormLib/policy/docs/formPolicy.docs.html","webpack:///./modules/docs/assets/language/enAU.json"],"names":["webpackJsonp","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_angular","_angular2","_angularTranslate","_angularTranslate2","mod","name","directive","$compile","$filter","translateError","errorMessage","fieldLabel","firstLetterIsAVowel","indexOf","toLowerCase","undefined","pronoun","ErrorController","element","errors","ariaElement","addError","errorType","removeError","refreshErrorText","str","i","type","hasOwnProperty","text","generateErrorTag","errorText","toggleErrorVisibilityOnError","controller","formController","scope","watchExpr","_scope","$watch","newValue","val","append","removeErrorMessage","toggleErrorVisibilityForTextError","errorController","fieldController","$setValidity","setSubmitted","$viewChangeListeners","push","$eval","divs","find","len","length","eq","hasClass","remove","restrict","require","template","replace","link","attr","controllers","fieldName","formName","$name","formField","fieldErrors","textErrors","error","errorShowCondition","fieldWatcher","item","removeAttr","_FieldErrorController","_FieldErrorController2","_FormControlService","_FormControlService2","_RequiredMarker","_RequiredMarker2","_Utility","_Utility2","config","$provide","decorator","$delegate","ngModel","attrs","$injector","$interpolate","get","$set","invoke","this","$scope","$element","$attrs","form","ngForm","provider","self","counter","defaults","idPrefix","templates","formCheckbox","formDate","formInput","formRadioButton","formSelect","requiredMarker","$get","StringUtil","service","buildDirective","params","transclude","compile","tElement","tAttr","validateComponentStructure","controlName","expectedTemplateElements","expectedAttributes","id","uid","getUniqueFieldId","inputElem","inputElementName","labelElem","required","getRequiredAttribute","decorateLabel","labelClass","hideLabel","hideRequiredIndicator","labelSuffix","decorateInputField","configFn","templateUrl","getHTMLTemplate","parentFormClasses","inheritedData","split","result","addToAttribute","attributeName","existingVal","removeFromAttribute","trim","hideLabelExpr","addClass","hostElement","inputType","replaceWith","a","$attr","origAttrName","substr","createErrorFeatures","parentElement","inputElement","fieldLabelStr","errorContainerElem","createFieldHint","fieldHint","fieldHintId","fieldHintDisplay","hintElement","buildNgClassExpression","targetElem","modelStr","checkedStr","disabledStr","ngValue","ngTrueValue","componentName","requiredElements","requiredAttributes","Error","j","constant","convertDate","dateStr","newSep","oldSep","parts","isNaN","join","formatDay","dayOrDate","month","year","dd","mm","yyyy","getUTCDay","getDate","getMonth","getFullYear","dateAdd","numDays","myDate","setDate","getToday","optionalDate","Date","isISODate","monthsBetween","date1","date2","trimRegExp","isDigitsRegExp","isDigits","test","getUniqueId","getTime","Math","random","toArray","arr","key","sort","b","formControlService","$timeout","updateAriaFeatures","fieldState","errorElemId","updateElementStyle","formPolicy","fieldErrorClass","fieldSuccessClass","setupCanShowErrorPropertyOnNgModelController","ngModelController","_policy","stateConditions","stateDefinitions","checkForStateChanges","formGroupElement","errorBehaviour","_applyFormBehaviourOnStateChangePolicy","applyBehaviour","$on","_index","_index2","_ErrorMessageContainer","_ErrorMessageContainer2","checkboxDiv","_common","_common2","prepend","label","parent","DateUtil","dateRegEx","priority","elem","ctrl","$parsers","unshift","viewValue","dateFormatValid","fieldDate","minDate","maxDate","dateChange","$valid","addPlaceholder","placeholderText","addInputGroup","inputGroupPrefix","inputGroupSuffix","wrap","wrapper","placeholder","hasInputGroup","inputPrefix","inputSuffix","parentElemForErrors","rbDiv","$parse","resetFieldState","controlMap","controlList","jLen","control","ngModelGet","formReset","ngModelSet","assign","originalData","copy","on","_controls","$setPristine","$emit","$digest","selectElem","fn","formSubmit","noop","isForm","tagName","bind","event","$apply","$event","preventDefault","_FormCheckbox","_FormCheckbox2","_FormDate","_FormDate2","_FormInput","_FormInput2","_FormRadioButton","_FormRadioButton2","_FormReset","_FormReset2","_FormSelect","_FormSelect2","_FormSubmit","_FormSubmit2","hide","_angularAnimate","_angularAnimate2","_FormPolicy","_FormPolicy2","_controls2","formDirective","formPolicyService","data","pre","extend","getCurrentPolicy","_parentController","behaviourOnStateChange","tellNoOne","formSubmitAttemptedClass","_formSubmitAttempted","resetBehaviour","$broadcast","nullBehaviourOnStateChange","nullStateChanges","fieldFocusScrollOffset","getService","e","policyService","inputElements","forEach","hookupElementToNameToElementMap","map","elementId","splice","rootFormController","p","window","document","angular","offsetTop","$window","debounce","dimensions","AffixFactory","getRequiredAffixClass","unpin","position","elementHeight","scrollTop","getScrollTop","scrollHeight","getScrollHeight","top","offsetBottom","initialAffixTop","targetEl","pageYOffset","body","$affix","options","target","reset","setWidth","initialOffsetTop","affixed","offsetParent","match","init","$parseOffsets","offset","style","width","checkPosition","checkPositionWithEventLoop","windowEl","$debouncedOnResize","destroy","off","setTimeout","height","affix","removeClass","css","offsetUnpin","bodyEl","offsetHeight","offsetWidth","$onResize","initialPosition","affixTarget","isDefined","animation","prefixClass","prefixEvent","placement","container","backdrop","keyboard","show","duration","dismissable","$modal","AlertFactory","$alert","$sce","requestAnimationFrame","transclusion","$observe","oldValue","trustAsHtml","bsAlert","isObject","content","alert","trigger","toggle","contentTemplate","html","AsideFactory","$aside","bsAside","aside","activeClass","toggleEvent","children","querySelectorAll","child","childEl","$button","$$rAF","constantValueRegExp","isInput","nodeName","activeElement","trueValue","falseValue","hasExoticValues","$formatters","modelValue","equals","$render","isActive","$modelValue","checked","toggleClass","$setViewValue","disallowToggle","startCollapsed","allowMultiple","fixActiveItemIndexes","index","activeIndexes","$targets","$active","activeItems","deactivateItem","activateItem","$options","$toggles","$registerToggle","$registerTarget","$unregisterToggle","$unregisterTarget","$setActive","isArray","$activeIndexes","$collapse","$animate","ngModelCtrl","bsCollapseCtrl","bsCollapseToggle","render","active","action","delay","useNative","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","Infinity","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","$document","$rootScope","$dateFormatter","datepickerViews","$tooltip","DatepickerFactory","updateSelected","el","selected","$datepicker","$isSelected","date","focusElement","focus","parentScope","pickerViews","$views","views","viewDate","$mode","$iconLeft","$iconRight","$picker","$select","select","$selectPane","$toggleMode","setMode","update","isDate","$date","call","$build","updateDisabledDates","dateRanges","disabledDateRanges","l","rows","$setDisabledEl","keep","$dateValue","mode","pristine","built","build","$updateSelected","isSelected","disabled","isDisabled","steps","targetDate","UTC","getUTCFullYear","getUTCMonth","getUTCDate","$onMouseDown","evt","stopPropagation","isTouch","triggerHandler","$onKeyDown","keyCode","shiftKey","altKey","onKeyDown","_init","isNative","prop","_destroy","_show","$isShown","_hide","blur","navigator","userAgent","lang","getDefaultLocale","$q","$dateParser","normalizeDateRanges","ranges","validateAgainstMinMaxDate","parsedDate","isMinValid","datepicker","isMaxValid","isValid","getDateFormattedString","formatDate","bsShow","isString","format","dateParser","strict","getDateForAttribute","disabledDates","disabledRanges","previousValue","parse","toISOString","isUndefined","NaN","size","arrays","n","m","daySplit","picker","weekDaysMin","weekdaysShort","weekDaysLabels","slice","concat","weekDaysLabelsHtml","startDate","getTimezoneOffset","force","firstDayOfMonth","firstDayOfMonthOffset","firstDate","getDay","firstDateOffset","today","toDateString","day","days","daylightSavingAdjust","isToday","muted","title","showLabels","labels","time","start","end","newDate","actualTime","months","lastDate","actualMonth","setMonth","parseInt","firstYear","years","actualYear","setYear","Array","prototype","DropdownFactory","onBodyClick","$dropdown","$new","parentEl","items","matchesSelector","Element","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","bsDropdown","dropdown","$locale","dateFilter","splitTimeFormat","exec","getDatetimeFormat","DATETIME_FORMATS","SHORTDAY","hoursFormat","timeFormat","minutesFormat","timeSeparator","showAM","$localeProvider","ParseDate","hours","minutes","seconds","milliseconds","isNumeric","parseFloat","isFinite","indexOfCaseInsensitive","array","toString","setMilliseconds","setSeconds","setMinutes","setHours","getHours","setFullYear","fromDate","getMinutes","getSeconds","getMilliseconds","toDate","proto","DateParserFactory","setMapForFormat","keys","setFnMap","sortedMap","clonedFormat","search","v","escapeReservedSymbols","regExpForFormat","regExpMap","re","RegExp","regex","setMap","sss","ss","s","HH","H","hh","h","EEEE","DAY","EEE","d","MMMM","MONTH","MMM","SHORTMONTH","MM","M","yy","y","$format","baseDate","formatRegex","formatSetMap","matches","getTimeForAttribute","factory","func","wait","immediate","timeout","context","args","arguments","callNow","cancel","apply","leading","trailing","extra","currentStyle","getComputedStyle","boxRect","getBoundingClientRect","docElement","ownerDocument","documentElement","clientTop","left","pageXOffset","scrollLeft","clientLeft","offsetParentElement","offsetParentRect","outer","regexp","ParseOptionsFactory","parseValues","values","locals","valueName","displayFn","valueFn","$parseOptions","$values","keyName","groupByFn","valuesFn","$match","when","then","displayValue","version","minor","dot","webkitRequestAnimationFrame","mozRequestAnimationFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","webkitCancelRequestAnimationFrame","rafSupported","raf","timer","supported","backdropAnimation","$templateCache","$http","ModalFactory","enterAnimateCallback","leaveAnimateCallback","bodyElement","hideOnBackdropClick","currentTarget","preventEventDefault","$promise","fetchTemplate","$id","$hide","$$postDigest","$show","$toggle","templateEl","contentEl","findElement","next","outerHTML","modalLinker","modalElement","backdropElement","htmlReplaceRegExp","$destroy","defaultPrevented","after","isElement","lastChild","clonedElement","display","enter","promise","safeDigest","$onKeyUp","leave","which","$$phase","$root","query","fetchPromises","res","put","String","bsModal","modal","routeAttr","$location","$navbar","path","liElements","li","liElement","pattern","customClass","autoClose","PopoverFactory","$popover","popover","$applyPlacement","bsPopover","multiple","allNoneButtons","caretHtml","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$matches","$activeIndex","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$noneText","$activate","activate","$isVisible","$isActive","$selectAll","$selectNone","$updateActiveIndex","$getIndex","minLength","$viewValue","inputEl","parsedOptions","ngOptions","watchedOptions","filter","$isEmpty","navClass","$navClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$remove","activeIndex","$tab","bsTabsCtrl","console","warn","bsActivePane","parsedBsActivePane","spies","$$spies","throttle","ScrollSpyFactory","isWindowSpy","scrollEl","scrollId","$$count","unbindViewContentLoaded","unbindIncludeContentLoaded","activeTarget","debouncedCheckPosition","throttledCheckPosition","debouncedCheckOffsets","viewportHeight","$scrollspy","trackedElements","$trackedElements","sortedElements","checkOffsets","max","innerHeight","docEl","$activateElement","$getTrackedElement","source","trackedElement","targetElement","querySelector","trackElement","untrackElement","toDelete","scrollspy","timeType","modelTimeFormat","minTime","maxTime","hourStep","minuteStep","iconUp","iconDown","arrowBehavior","timepickerFactory","createSelection","createTextRange","selRange","collapse","moveStart","moveEnd","setSelectionRange","selectionStart","selectionEnd","$timepicker","selectedIndex","hour","meridian","minute","second","millisecond","$iconUp","$iconDown","$moveIndex","$switchMeridian","switchMeridian","$isBuilt","midIndex","$isDisabled","isAM","selectedTime","$arrowAction","$setTimeByStep","hoursLength","minutesLength","lateralMove","count","selectRange","validateAgainstMinMaxTime","parsedTime","getTimeFormattedString","timepicker","bsEnabled","TooltipFactory","tipElement","_tipToHide","_blur","destroyTipElement","bindTriggerEvents","triggers","$onFocusElementMouseDown","unbindTriggerEvents","bindKeyboardEvents","$onFocusKeyUp","unbindKeyboardEvents","bindAutoCloseEvents","stopEventPropagation","$body","_autoCloseEventsBinded","unbindAutoCloseEvents","getPosition","elRect","right","bottom","elPos","getCalculatedOffset","actualWidth","actualHeight","applyPlacementCss","clearTimeout","tipScope","$setEnabled","isEnabled","setEnabled","hoverState","tipLinker","tipTemplate","tipContainer","isNumber","visibility","autoToken","autoPlace","elementPosition","tipWidth","tipHeight","originalPlacement","containerPosition","tipPosition","tooltip","bsTooltip","limit","comparator","TypeaheadFactory","$typeahead","$resetMatches","typeahead","watchOptions","selectMode","substring","isVisible","_formControlsCommon","_formControlsCommon2","_formControlsCommonProperties","_formControlsCommonProperties2","_formControlsDemos","_formControlsDemos2","_formControlsService","_formControlsService2","_formPolicy","_formPolicy2","_formSubmit","_formSubmit2","_formReset","_formReset2","_formInput","_formInput2","_formCheckbox","_formCheckbox2","_formRadioButton","_formRadioButton2","_formSelect","_formSelect2","_formDate","_formDate2","_errorMessageContainer","_errorMessageContainer2","_requiredMarker","_requiredMarker2","_ngFormLib","_ngFormLib2","_highlightPack","_highlightPack2","_PolicyBehaviourOnStateChange","_PolicyBehaviourOnStateChange2","_PolicyCheckForStateChanges","_PolicyCheckForStateChanges2","_PolicyStateDefinitions","_PolicyStateDefinitions2","_docFixtures","_docFixtures2","bindCompile","innerHTML","contents","$locationProvider","html5Mode","$anchorScrollProvider","disableAutoScrolling","$translateProvider","translations","preferredLanguage","useSanitizeValueStrategy","formPolicyServiceProvider","vm","fileName","DOC_CONFIG","REPO_HOST","repository","host","REPO","branch","VERSION","controllerAs","terminal","indent","hlElement","codeElement","elementHtml","hlClass","highlightBlock","spaces","lines","prefix","shift","pop","minIndent","line","scrollContainerAPI","duScrollDuration","ahref","elemId","useHash","hash","getElementById","scrollOffset","scrollBottom","getContainer","scrollToElement","_docs","_docs2","titleData","schoolData","formDemo4","education","addSchool","toggleTextError","myTextError","radioVal2","callWhenValid","setFocusOnField","timeoutPromise","scrollPromise","behaviourOnErrorFocusFirstField","focusController","fieldElem","formSubmitAttempted","firstElement","isFirstElement","_focusErrorElement","onSubmitFocusFirstFieldIfError","formPolicyBehaviourOnStateChangeLibrary","checkForStateChangesOnBlurUntilSubmitThenOnChange","errorWatch","watchForErrorChanges","watchForBlurEvent","checkForStateChangesOnChange","checkForStateChangesOnBlur","createWatch","stateName","stateCondition","evaluateFieldStates","onChange","onBlur","onBlurUntilSubmitThenOnChange","formPolicyCheckForStateChangesLibrary","myCustomPolicy","errorOnSubmit","errorOnDirty","errorImmediately","errorOnSubmitAndDirty","errorOnSubmitOrDirty","successOnSubmit","successOnDirty","successImmediately","successOnSubmitAndDirty","successOnSubmitOrDirty","onSubmit","onDirty","immediately","onSubmitAndDirty","onSubmitOrDirty","formPolicyErrorDefinitionLibrary","formPolicySuccessDefinitionLibrary","success","FIELD_ERROR","TEMPLATE","REQUIRED","NAME_REQUIRED","TITLE_REQUIRED","FIELD","TITLE","OTHER","HINT","PLACEHOLDER"],"mappings":"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","file":"js/docs.8d85ed5f.js","sourcesContent":["webpackJsonp([1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(33);\n\t__webpack_require__(53);\n\t__webpack_require__(54);\n\t__webpack_require__(51);\n\tmodule.exports = __webpack_require__(52);\n\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _angularTranslate = __webpack_require__(5);\n\t\n\tvar _angularTranslate2 = _interopRequireDefault(_angularTranslate);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.errorMessageContainer', [_angularTranslate2.default]);\n\t\n\texports.default = mod.name;\n\t\n\t//angular.module('ngFormLib.controls.errorMessageContainer', ['pascalprecht.translate'])\n\t\n\t/**\n\t * This directive is really a FIELD error message container - it is designed to work with fields exclusively\n\t */\n\t\n\tmod.directive('errorContainer', ['$compile', '$filter', function ($compile, $filter) {\n\t\n\t  function translateError(errorMessage, fieldLabel) {\n\t    var firstLetterIsAVowel = fieldLabel ? 'aeiou'.indexOf(fieldLabel[0].toLowerCase()) !== -1 : undefined;\n\t    return $filter('translate')(errorMessage, { pronoun: firstLetterIsAVowel ? 'an' : 'a', fieldLabel: fieldLabel });\n\t  }\n\t\n\t  function ErrorController(element) {\n\t    var errors = [],\n\t        ariaElement = element;\n\t\n\t    return {\n\t      addError: function addError(errorType, errorMessage, fieldLabel) {\n\t        errors[errorType] = translateError(errorMessage, fieldLabel);\n\t      },\n\t\n\t      removeError: function removeError(errorType) {\n\t        delete errors[errorType];\n\t      },\n\t\n\t      refreshErrorText: function refreshErrorText() {\n\t        var str = '',\n\t            i = 0;\n\t        for (var type in errors) {\n\t          if (errors.hasOwnProperty(type)) {\n\t            str += 'Error ' + ++i + ', ' + errors[type] + ',';\n\t          }\n\t        }\n\t\n\t        if (i === 1) {\n\t          str = '. There is 1 error for this field. ' + str;\n\t        } else if (i > 1) {\n\t          str = '. There are ' + i + ' errors for this field. ' + str;\n\t        }\n\t        ariaElement.text(str);\n\t      }\n\t    };\n\t  }\n\t\n\t  function generateErrorTag(errorType, errorText, fieldLabel) {\n\t    return '<div class=\"text-error ec2-' + errorType + '\"><span class=\"text-error-wrap\">' + translateError(errorText, fieldLabel) + '</span></div>';\n\t  }\n\t\n\t  /**\n\t   * Handle the field-based error messages\n\t   */\n\t  function toggleErrorVisibilityOnError(controller, formController, scope, element, watchExpr, errorType, errorText, fieldLabel) {\n\t    //console.log('watchExpr = ' + watchExpr);\n\t    formController._scope.$watch(watchExpr, function (newValue) {\n\t      if (newValue) {\n\t        // The error text could contain an interpolation string, so we need to compile it\n\t        var val = $compile(generateErrorTag(errorType, errorText, fieldLabel))(scope);\n\t        element.append(val);\n\t        controller.addError(errorType, errorText, fieldLabel);\n\t      } else {\n\t        removeErrorMessage(controller, formController, element, errorType);\n\t      }\n\t      controller.refreshErrorText();\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Handle text errors. Text errors are associated with a scope, rather than with a field.\n\t   * This means we can clear them from the scope when the field-they-are-associated-with is changed.\n\t   */\n\t  function toggleErrorVisibilityForTextError(errorController, formController, fieldController, scope, element, watchExpr, fieldLabel) {\n\t    //console.log('Watching error: ' + watchExpr);\n\t\n\t    formController._scope.$watch(watchExpr, function (newValue) {\n\t      // Update the validity of the field's \"watchExpr\" error-key to match the value of the errorText\n\t      fieldController.$setValidity(watchExpr, !newValue);\n\t\n\t      // Remove the old error message for this same errorType first, in cases where the error message is changing.\n\t      removeErrorMessage(errorController, formController, element, watchExpr);\n\t\n\t      if (newValue) {\n\t        // No need to compile the error message as we already have its value\n\t        element.append(generateErrorTag(watchExpr, newValue, fieldLabel));\n\t        errorController.addError(watchExpr, newValue, fieldLabel);\n\t\n\t        // Turn the border red by sending a 'form-submit-attempted' event\n\t        formController.setSubmitted(true);\n\t      }\n\t      errorController.refreshErrorText();\n\t    });\n\t\n\t    // When the field changes, clear the errorText value\n\t    fieldController.$viewChangeListeners.push(function () {\n\t      if (scope.$eval(watchExpr)) {\n\t        scope.$eval(watchExpr + ' = null');\n\t      }\n\t    });\n\t  }\n\t\n\t  function removeErrorMessage(controller, formController, element, errorType) {\n\t    // find the div with our special class, then remove it\n\t    var divs = element.find('div');\n\t    for (var len = divs.length, i = len - 1; i > -1; i--) {\n\t      if (divs.eq(i).hasClass('ec2-' + errorType)) {\n\t        divs.eq(i).remove();\n\t      }\n\t    }\n\t    controller.removeError(errorType);\n\t  }\n\t\n\t  return {\n\t    restrict: 'AE',\n\t    require: ['^form'], // Require the formController controller somewhere in the parent hierarchy (mandatory for field-errors)\n\t    template: '<div class=\"container-error\"></div>',\n\t    replace: true,\n\t    link: function link(scope, element, attr, controllers) {\n\t\n\t      var fieldName = attr.fieldName,\n\t          fieldLabel = attr.fieldLabel || '',\n\t          formController = controllers[0],\n\t          formName = formController.$name,\n\t          formField = formName + '.' + fieldName,\n\t          fieldErrors = scope.$eval(attr.fieldErrors || []),\n\t          // You can escape interpolation brackets inside strings by doing  \\{\\{   - wow!\n\t      textErrors = scope.$eval(attr.textErrors || []);\n\t\n\t      element.attr('id', formName + '-' + fieldName + '-errors');\n\t      element.append('<span class=\"sr-only\" aria-hidden=\"true\" id=\"' + formName + '-' + fieldName + '-errors-aria\"></span>');\n\t\n\t      var ariaElement = element.find('span'),\n\t          errorController = new ErrorController(ariaElement); // new? Maybe make this the directive's controller instead\n\t\n\t      for (var error in fieldErrors) {\n\t        if (fieldErrors.hasOwnProperty(error)) {\n\t          var errorShowCondition = formField + '.fieldState === \"error\" && ' + formField + '.$error.' + error;\n\t          toggleErrorVisibilityOnError(errorController, formController, scope, element, errorShowCondition, error, fieldErrors[error], fieldLabel);\n\t        }\n\t      }\n\t\n\t      // Watch formController[fieldName] - it may not have loaded yet. When it loads, call the main function.\n\t      if (textErrors) {\n\t        //console.log('textErrors: ' + textErrors + ', fieldName = ' + fieldName);\n\t        var fieldWatcher = scope.$watch(function () {\n\t          return formController[fieldName];\n\t        }, function (newValue) {\n\t          if (newValue) {\n\t            fieldWatcher(); // Cancel the watcher\n\t\n\t            // Do the actual thing you planned to do...\n\t            for (var item in textErrors) {\n\t              if (textErrors.hasOwnProperty(item)) {\n\t                toggleErrorVisibilityForTextError(errorController, formController, formController[fieldName], scope, element, textErrors[item], fieldLabel);\n\t              }\n\t            }\n\t          }\n\t        });\n\t      }\n\t\n\t      element.removeAttr('error-container').removeAttr('field-name').removeAttr('field-errors').removeAttr('text-errors');\n\t    }\n\t  };\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _FieldErrorController = __webpack_require__(8);\n\t\n\tvar _FieldErrorController2 = _interopRequireDefault(_FieldErrorController);\n\t\n\tvar _FormControlService = __webpack_require__(4);\n\t\n\tvar _FormControlService2 = _interopRequireDefault(_FormControlService);\n\t\n\tvar _RequiredMarker = __webpack_require__(17);\n\t\n\tvar _RequiredMarker2 = _interopRequireDefault(_RequiredMarker);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.common', [_FieldErrorController2.default, _FormControlService2.default, _RequiredMarker2.default]);\n\t\n\texports.default = mod.name;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _Utility = __webpack_require__(7);\n\t\n\tvar _Utility2 = _interopRequireDefault(_Utility);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.common.formControlService', [_Utility2.default]);\n\t\n\texports.default = mod.name;\n\t\n\t// Workaround for bug #1404\n\t// https://github.com/angular/angular.js/issues/1404\n\t// Source: http://plnkr.co/edit/hSMzWC?p=preview\n\t// Not so great for IE8, but necessary for using radio buttons inside of dynamic forms (ng-repeat)\n\t\n\tmod.config(['$provide', function ($provide) {\n\t  $provide.decorator('ngModelDirective', ['$delegate', function ($delegate) {\n\t    var ngModel = $delegate[0],\n\t        controller = ngModel.controller;\n\t    ngModel.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {\n\t      var $interpolate = $injector.get('$interpolate');\n\t      attrs.$set('name', $interpolate(attrs.name || '')(scope));\n\t      $injector.invoke(controller, this, {\n\t        '$scope': scope,\n\t        '$element': element,\n\t        '$attrs': attrs\n\t      });\n\t    }];\n\t    return $delegate;\n\t  }]);\n\t  $provide.decorator('formDirective', ['$delegate', function ($delegate) {\n\t    var form = $delegate[0],\n\t        controller = form.controller;\n\t    form.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {\n\t      var $interpolate = $injector.get('$interpolate');\n\t      attrs.$set('name', $interpolate(attrs.name || attrs.ngForm || '')(scope));\n\t      $injector.invoke(controller, this, {\n\t        '$scope': scope,\n\t        '$element': element,\n\t        '$attrs': attrs\n\t      });\n\t    }];\n\t    return $delegate;\n\t  }]);\n\t}]);\n\t\n\t// Shared code for the accessible controls\n\tmod.provider('formControlService', function () {\n\t  var self = this,\n\t      counter = 0; // Private variable\n\t\n\t  //\n\t  self.defaults = {\n\t    idPrefix: 'fpFld',\n\t    templates: {\n\t      formCheckbox: {\n\t        template: __webpack_require__(20)\n\t      },\n\t      formDate: {\n\t        template: __webpack_require__(21)\n\t      },\n\t      formInput: {\n\t        template: __webpack_require__(22)\n\t      },\n\t      formRadioButton: {\n\t        template: __webpack_require__(23)\n\t      },\n\t      formSelect: {\n\t        template: __webpack_require__(24)\n\t      },\n\t      requiredMarker: {\n\t        template: __webpack_require__(25)\n\t      }\n\t    }\n\t  };\n\t\n\t  this.$get = ['ngFormLibStringUtil', '$interpolate', function (StringUtil) {\n\t\n\t    var service = {\n\t      defaults: self.defaults,\n\t\n\t      buildDirective: function buildDirective(params) {\n\t        var directive = {\n\t          restrict: 'AE',\n\t          replace: true,\n\t          transclude: true,\n\t          compile: function compile(tElement, tAttr) {\n\t\n\t            service.validateComponentStructure(params.controlName, tElement, params.expectedTemplateElements, tAttr, params.expectedAttributes);\n\t\n\t            // For items that are inside repeaters, if more than one element has the same id, the checkbox stops working.\n\t            // By using an attribute that is not called 'id', we can avoid this issue\n\t            var id = tAttr.uid || service.getUniqueFieldId(),\n\t                name = tAttr.name || id,\n\t                // Doing this *will* break radio buttons, but they SHOULD provide a name anyway (for their own good)\n\t            inputElem = tElement.find(params.inputElementName || 'input'),\n\t                labelElem = tElement.find('label'),\n\t                required = service.getRequiredAttribute(tAttr.required);\n\t\n\t            service.decorateLabel(labelElem, required, id, tAttr.labelClass, tAttr.hideLabel, tAttr.hideRequiredIndicator, tAttr.labelSuffix);\n\t            inputElem = service.decorateInputField(inputElem, tElement, tAttr, id, name, required);\n\t\n\t            // Do component-specific config last\n\t            params.configFn(tElement, tAttr, id, name, inputElem, labelElem);\n\t\n\t            // Clean up special attributes (to make HTML look nicer)\n\t            tElement.removeAttr('uid').removeAttr('name').removeAttr('label').removeAttr('required').removeAttr('field-hint').removeAttr('input-type').removeAttr('hide-label').removeAttr('hideRequiredIndicator').removeAttr('label-class').removeAttr('field-errors').removeAttr('text-errors');\n\t          },\n\t          templateUrl: function templateUrl(element, attr) {\n\t            // Check the element for a \"template\" attribute, which allows customisation-per-control. Otherwise, use the control-wide template.\n\t            return attr.template || service.getHTMLTemplate(element, params.controlName);\n\t          }\n\t        };\n\t\n\t        return directive;\n\t      },\n\t\n\t      getUniqueFieldId: function getUniqueFieldId() {\n\t        return '' + self.defaults.idPrefix + counter++;\n\t      },\n\t\n\t      getHTMLTemplate: function getHTMLTemplate(element, type) {\n\t        // Allow different templates to be applied for different form-styles (eg for horizontal forms, inline forms, \"normal\" forms).\n\t        // This is an advanced feature that most users will not need.\n\t        // E.g.: self.defaults.templates['select']['form-inline'] = 'path/to/your/custom/template.html'\n\t\n\t        // Check this element's parent-form-element-classes to see if they match. First match, wins.\n\t        var parentFormClasses = (element.inheritedData('formElementClasses') || '').split(' ');\n\t        var result = self.defaults.templates[type].template; // The default template, if nothing else is specified.\n\t\n\t        for (var i = 0; i < parentFormClasses.length; i++) {\n\t          var template = self.defaults.templates[type][parentFormClasses[i]];\n\t          if (template) {\n\t            result = template;\n\t            break;\n\t          }\n\t        }\n\t\n\t        return result;\n\t      },\n\t\n\t      addToAttribute: function addToAttribute(element, attributeName, value) {\n\t        var existingVal = element.attr(attributeName);\n\t        element.attr(attributeName, (existingVal ? existingVal + ' ' : '') + value);\n\t      },\n\t\n\t      removeFromAttribute: function removeFromAttribute(element, attributeName, value) {\n\t        // Borrowed this statement from Angular.js\n\t        var newValue = StringUtil.trim((' ' + (element.attr(attributeName) || '') + ' ').replace(/[\\n\\t]/g, ' ').replace(' ' + StringUtil.trim(value) + ' ', ' '));\n\t\n\t        // Remove the attribute if it is empty\n\t        if (newValue === '') {\n\t          element.removeAttr(attributeName);\n\t        } else {\n\t          element.attr(attributeName, newValue);\n\t        }\n\t      },\n\t\n\t      getRequiredAttribute: function getRequiredAttribute(required) {\n\t        // When we set required=\"true\" on a parent directive (like on-off-button), inputElem.attr('required', 'true')\n\t        // becomes <input required=\"required\" due to browser interference. So detect this case, and replace it with \"true\"\n\t        // In v1.3, required=\"true\" becomes required=\"\".\n\t        if (required === 'required' || required === '' || required === 'true') {\n\t          return 'true';\n\t        } else if (required === undefined) {\n\t          return 'false';\n\t        }\n\t        return required;\n\t      },\n\t\n\t      decorateLabel: function decorateLabel(labelElem, required, id, labelClass, hideLabelExpr, hideRequiredIndicator, labelSuffix) {\n\t        if (id) {\n\t          labelElem.attr('for', id);\n\t        }\n\t        if (labelClass) {\n\t          labelElem.addClass(labelClass);\n\t        }\n\t        if (hideLabelExpr) {\n\t          labelElem.attr('ng-class', '{\\'sr-only\\': ' + hideLabelExpr + '}');\n\t        }\n\t        if (!hideRequiredIndicator) {\n\t          labelElem.append('<span required-marker hide=\"!(' + required + ')\"></span>');\n\t        }\n\t        // Some labels have suffix text - text that helps with describing the label, but isn't really the label text.\n\t        // E.g. Amount ($AUD)\n\t        if (labelSuffix) {\n\t          labelElem.text(labelElem.text() + ' ' + labelSuffix);\n\t        }\n\t      },\n\t\n\t      decorateInputField: function decorateInputField(inputElem, hostElement, attr, id, name, required) {\n\t        if (attr.inputType) {\n\t          // inputElem.attr('type', attr.inputType); // THIS WILL NOT WORK ON IE8!\n\t          // Instead, we must replace the entire node with the only property which SHOULD exist on the template: 'class'\n\t          inputElem.replaceWith('<input type=\"' + attr.inputType + '\" class=\"' + inputElem.attr('class') + '\">');\n\t          inputElem = hostElement.find('input');\n\t        }\n\t\n\t        inputElem.attr('id', id);\n\t\n\t        // Allow the name to be interpolated\n\t        inputElem.attr('name', name);\n\t\n\t        // Apply all of the ff-* attributes to the input element. Use the original attribute names\n\t        // attr.$attr contains the snake-case names e.g. 'form-field' vs camel case 'formField'\n\t        for (var a in attr.$attr) {\n\t          if (a.indexOf('ff') === 0) {\n\t            // Don't search for 'ff-' as the '-' has been replaced with camel case now\n\t            var origAttrName = attr.$attr[a].substr(3);\n\t\n\t            if (origAttrName === 'class') {\n\t              inputElem.addClass(attr[a]);\n\t\n\t              // Special case for type property. It *must* be read-only. Therefore, don't write it to the element\n\t              // See http://stackoverflow.com/questions/8378563/why-cant-i-change-the-type-of-an-input-element-to-submit\n\t            } else if (origAttrName !== 'type') {\n\t                inputElem.attr(origAttrName, attr[a]);\n\t              }\n\t\n\t            // Remove all attributes off the host element\n\t            hostElement.removeAttr(attr.$attr[a]);\n\t          }\n\t        }\n\t\n\t        inputElem.attr('ng-required', required);\n\t        inputElem.attr('aria-required', '{{!!(' + required + ')}}'); // evaluates to true / false\n\t        return inputElem;\n\t      },\n\t\n\t      createErrorFeatures: function createErrorFeatures(parentElement, inputElement, name, fieldLabel, fieldErrors, textErrors) {\n\t        if (fieldErrors || textErrors) {\n\t          // Add an fieldErrorControllers attribute to the element, to hook-up the error features\n\t          inputElement.attr('field-error-controller', '');\n\t\n\t          var fieldLabelStr = fieldLabel ? ' field-label=\"' + fieldLabel + '\"' : '';\n\t          var errorContainerElem = _angular2.default.element('<div error-container field-name=\"' + name + '\"' + fieldLabelStr + '></div>');\n\t          if (fieldErrors) {\n\t            errorContainerElem.attr('field-errors', fieldErrors);\n\t          }\n\t          if (textErrors) {\n\t            errorContainerElem.attr('text-errors', textErrors);\n\t          }\n\t          parentElement.append(errorContainerElem);\n\t        }\n\t      },\n\t\n\t      createFieldHint: function createFieldHint(hostElement, inputElement, fieldHint, fieldHintId, fieldHintDisplay) {\n\t        var hintElement;\n\t\n\t        if (fieldHint) {\n\t          // If we have a field hint, add that as well\n\t          if (fieldHintDisplay) {\n\t            // If a field hint display rule exists, implement.\n\t            hintElement = _angular2.default.element('<p ng-if=\"' + fieldHintDisplay + '\" class=\"help-block\" id=\"' + fieldHintId + '\">' + fieldHint + '</p>');\n\t          } else {\n\t            hintElement = _angular2.default.element('<p class=\"help-block\" id=\"' + fieldHintId + '\">' + fieldHint + '</p>');\n\t          }\n\t          hostElement.append(hintElement);\n\t          inputElement.attr('aria-describedby', fieldHintId);\n\t        }\n\t      },\n\t\n\t      buildNgClassExpression: function buildNgClassExpression(inputElem, targetElem) {\n\t        // If the inputElem has an ngModel and/or ngChecked attribute, create the ng-class attribute\n\t        //todo.. test checkbox implementation\n\t        var modelStr = inputElem.attr('ng-model'),\n\t            checkedStr = inputElem.attr('ng-checked'),\n\t            disabledStr = inputElem.attr('ng-disabled'),\n\t            value = inputElem.attr('value'),\n\t            // a string - used for Radio buttons\n\t        ngValue = inputElem.attr('ng-value'),\n\t            // an expression - used for Radio buttons\n\t        ngTrueValue = inputElem.attr('ng-true-value');\n\t\n\t        if (modelStr) {\n\t          if (ngValue || ngTrueValue) {\n\t            modelStr += ' === ' + (ngValue || ngTrueValue);\n\t          } else if (value) {\n\t            // The value is ALWAYS a string\n\t            modelStr += ' === \\'' + value + '\\'';\n\t          } else {\n\t            modelStr += ' === true'; // For checkboxes, in the absence of ng-true-value\n\t          }\n\t        }\n\t\n\t        if (modelStr && checkedStr) {\n\t          modelStr += ' || ' + checkedStr;\n\t        } else if (checkedStr) {\n\t          modelStr = checkedStr;\n\t        }\n\t\n\t        if (modelStr && disabledStr) {\n\t          targetElem.attr('ng-class', '{\\'checked\\': ' + modelStr + ', \\'disabled\\': ' + disabledStr + '}');\n\t        } else if (modelStr) {\n\t          targetElem.attr('ng-class', '{\\'checked\\': ' + modelStr + '}');\n\t        }\n\t      },\n\t\n\t      validateComponentStructure: function validateComponentStructure(componentName, element, requiredElements, attr, requiredAttributes) {\n\t        for (var i = 0; i < requiredElements.length; i++) {\n\t          if (!element.find(requiredElements[i])) {\n\t            throw new Error('The ' + componentName + ' component template requires a ' + requiredElements[i] + ' element.');\n\t          }\n\t        }\n\t\n\t        for (var j = 0; j < requiredAttributes.length; j++) {\n\t          if (!attr[requiredAttributes[j]]) {\n\t            throw new Error('The ' + componentName + ' component requires a ' + requiredAttributes[j] + ' attribute.');\n\t          }\n\t        }\n\t      }\n\t\n\t    };\n\t    return service;\n\t  }];\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */,\n/* 6 */,\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.common.utility', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.constant('ngFormLibDateUtil', {\n\t  convertDate: function convertDate(dateStr, newSep) {\n\t    // Converts a date between dd/mm/yyyy and yyyy-mm-dd\n\t    if (!dateStr || !newSep || !(newSep === '/' || newSep === '-')) {\n\t      return dateStr;\n\t    }\n\t\n\t    // Choose a separator string that is the 'opposite' of the desired separator\n\t    var oldSep = newSep === '/' ? '-' : '/',\n\t        parts = dateStr.split(oldSep);\n\t\n\t    // if we get a dodgy date OR you tried to convert a date that was already in the correct format, return the input\n\t    if (isNaN(parts.join('')) || parts.length !== 3) {\n\t      return dateStr;\n\t    }\n\t\n\t    // Swap the year and day parts around\n\t    return parts[2] + newSep + parts[1] + newSep + parts[0];\n\t  },\n\t  formatDay: function formatDay(dayOrDate, month, year) {\n\t    var dd = dayOrDate,\n\t        mm = month,\n\t        yyyy = year;\n\t    if (dayOrDate.getUTCDay) {\n\t      dd = dayOrDate.getDate();\n\t      mm = dayOrDate.getMonth() + 1; //January is 0!`\n\t      yyyy = dayOrDate.getFullYear();\n\t    }\n\t    return (dd < 10 ? '0' + dd : dd) + '/' + (mm < 10 ? '0' + mm : mm) + '/' + yyyy;\n\t  },\n\t  dateAdd: function dateAdd(dateStr, numDays) {\n\t    // Return a modified date in ISO format\n\t    var myDate = this.getDate(dateStr);\n\t    myDate.setDate(myDate.getDate() + numDays);\n\t\n\t    return this.formatDay(myDate);\n\t  },\n\t  getToday: function getToday(optionalDate) {\n\t    return this.formatDay(optionalDate || new Date());\n\t  },\n\t  isISODate: function isISODate(dateStr) {\n\t    return typeof dateStr === 'string' && dateStr.indexOf('-') > 0;\n\t  },\n\t  getDate: function getDate(dateStr) {\n\t    if (!this.isISODate(dateStr)) {\n\t      dateStr = this.convertDate(dateStr, '-');\n\t    }\n\t    return new Date(dateStr);\n\t  },\n\t  monthsBetween: function monthsBetween(date1, date2) {\n\t    return date2.getMonth() - date1.getMonth() + 12 * (date2.getFullYear() - date1.getFullYear());\n\t  }\n\t});\n\t\n\tmod.constant('ngFormLibStringUtil', function () {\n\t  var trimRegExp = /^\\s+|\\s+$/g;\n\t\n\t  return {\n\t    trim: function trim(text) {\n\t      if (typeof text === 'string') {\n\t        return text.replace(trimRegExp, '');\n\t      }\n\t      return text;\n\t    }\n\t  };\n\t}());\n\t\n\tmod.constant('ngFormLibNumberUtil', function () {\n\t  var isDigitsRegExp = /^\\d+$/;\n\t\n\t  return {\n\t    isDigits: function isDigits(text) {\n\t      return isDigitsRegExp.test(text);\n\t    }\n\t  };\n\t}());\n\t\n\tmod.constant('ngFormLibObjectUtil', {\n\t  getUniqueId: function getUniqueId() {\n\t    return ('' + new Date().getTime() + Math.random()).replace(/\\./, '');\n\t  },\n\t  toArray: function toArray(obj) {\n\t    var arr = [];\n\t    for (var i in obj) {\n\t      if (obj.hasOwnProperty(i)) {\n\t        arr[arr.length] = { key: i, value: obj[i] };\n\t      }\n\t    }\n\t    arr.sort(function compare(a, b) {\n\t      return a.key < b.key;\n\t    });\n\t    return arr;\n\t  }\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _FormControlService = __webpack_require__(4);\n\t\n\tvar _FormControlService2 = _interopRequireDefault(_FormControlService);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.common.fieldErrorController', [_FormControlService2.default]);\n\t\n\texports.default = mod.name;\n\t\n\t/**\n\t * The Field Error Controller directive is designed to indicate to the browser when the field is in error\n\t *  and what the errors are. It applies the form-policy for showing errors\n\t *\n\t * It works in tandem with the form controller (and FormPolicy.js) to identify when a form-element has an error, and decorates\n\t *  the element accordingly.\n\t *\n\t * It also toggles the fieldController.fieldState flag, based on the form policy provided\n\t *\n\t */\n\t\n\t// INPUT:\n\t//  <input ... field-error-controller></input>\n\t\n\t// OUTPUT:\n\t//  <input ... aria-invalid=\"false/true\" aria-describedby=\"fieldId-errors\">\n\t\n\tmod.directive('fieldErrorController', ['formControlService', '$timeout', function (formControlService, $timeout) {\n\t\n\t  function updateAriaFeatures(fieldState, element, formName, fieldName) {\n\t    element.attr('aria-invalid', fieldState === 'error');\n\t    var errorElemId = formName + '-' + fieldName + '-errors-aria';\n\t\n\t    if (fieldState === 'error') {\n\t      // Use the errorContainer's special ARIA element as the source of the error text\n\t      formControlService.addToAttribute(element, 'aria-describedby', errorElemId);\n\t    } else {\n\t      formControlService.removeFromAttribute(element, 'aria-describedby', errorElemId);\n\t    }\n\t  }\n\t\n\t  function updateElementStyle(fieldState, element, formPolicy) {\n\t    element[fieldState === 'error' ? 'addClass' : 'removeClass'](formPolicy.fieldErrorClass);\n\t    element[fieldState === 'success' ? 'addClass' : 'removeClass'](formPolicy.fieldSuccessClass);\n\t  }\n\t\n\t  function setupCanShowErrorPropertyOnNgModelController(scope, formController, ngModelController, element, name) {\n\t    // Using the form policy, determine when to show errors for this field\n\t    var formPolicy = formController._policy,\n\t        formName = formController.$name,\n\t        fieldName = formName + '.' + name,\n\t        stateConditions = formPolicy.stateDefinitions(formName, fieldName);\n\t\n\t    formPolicy.checkForStateChanges(formController._scope, element, name, stateConditions, ngModelController, formController);\n\t  }\n\t\n\t  return {\n\t    restrict: 'AE',\n\t    require: ['?ngModel', '?^form', '?^formGroup'], // Require the formController controller somewhere in the parent hierarchy\n\t    replace: true,\n\t    link: function link(scope, element, attr, controllers) {\n\t      // Tried to use a template string, but the model was not binding properly. Using $compile() works :)\n\t      var ngModelController = controllers[0],\n\t          formController = controllers[1],\n\t          formGroupElement = (controllers[2] || {}).$element || element,\n\t          // This looks for a parent directive called formGroup, which has a controller, which has an $element property\n\t      name = attr.name;\n\t\n\t      if (formController) {\n\t        var formName = formController.$name,\n\t            errorBehaviour = formController._applyFormBehaviourOnStateChangePolicy; // returns a function which encapsulates the form policy rules for the behaviour to apply when errors show\n\t\n\t        if (ngModelController) {\n\t          setupCanShowErrorPropertyOnNgModelController(scope, formController, ngModelController, element, name);\n\t        }\n\t\n\t        // When the error-showing flag changes, update the field style\n\t        formController._scope.$watch(formName + '.' + name + '.fieldState', function (fieldState) {\n\t          updateAriaFeatures(fieldState, element, formName, name);\n\t          updateElementStyle(fieldState, formGroupElement, formController._policy);\n\t\n\t          // Apply the error behaviour behaviour\n\t          errorBehaviour.applyBehaviour(element, fieldState, false);\n\t        });\n\t\n\t        // Listen to form-submit events, to determine what to focus on too\n\t        scope.$on('event:FormSubmitAttempted', function () {\n\t          // Make sure that the field-level watchers have a chance to fire first, so use a timeout\n\t          $timeout(function () {\n\t            errorBehaviour.applyBehaviour(element, ngModelController.fieldState, true);\n\t          }, 1);\n\t        });\n\t      }\n\t    }\n\t  };\n\t}]);\n\t\n\t// This directive\n\tmod.directive('formGroup', [function () {\n\t  return {\n\t    restrict: 'AC',\n\t    controller: ['$scope', '$element', function ($scope, $element) {\n\t      this.$element = $element;\n\t    }]\n\t  };\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _index = __webpack_require__(3);\n\t\n\tvar _index2 = _interopRequireDefault(_index);\n\t\n\tvar _ErrorMessageContainer = __webpack_require__(2);\n\t\n\tvar _ErrorMessageContainer2 = _interopRequireDefault(_ErrorMessageContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.formCheckbox', [_index2.default, _ErrorMessageContainer2.default]);\n\t\n\texports.default = mod.name;\n\t\n\t// INPUT:\n\t//  <form-checkbox id=\"id\" name=\"name\" required=\"{{expression}}\"\n\t//      ff-class=\"span12\" ff-ng-model=\"application.contentType\" ff-value=\"software\" ff-aria-label=\"Software\"\n\t//        ff-ng-click=\"doSomething()\"\n\t//      field-errors=\"{required: 'Please select'}\"\n\t//      text-errors=\"['wrong value']\"\n\t//      >My label with <a href=\"http://www.google.com/\">HTML bits</a> in it</form-checkbox>\n\t\n\t// OUTPUT:\n\t\n\tmod.directive('formCheckbox', ['formControlService', function (formControlService) {\n\t\n\t  return formControlService.buildDirective({\n\t    controlName: 'formCheckbox',\n\t    expectedTemplateElements: ['input', 'label', 'div'],\n\t    expectedAttributes: [],\n\t    configFn: function configFn(tElement, tAttr, id, name, inputElem) {\n\t      // Move the class attribute from the outer-DIV to the checkbox DIV (special case)\n\t      var checkboxDiv = tElement.find('div');\n\t      checkboxDiv.addClass(tElement.attr('class'));\n\t      tElement.removeAttr('class');\n\t\n\t      formControlService.createErrorFeatures(tElement, inputElem, name, '', tAttr.fieldErrors, tAttr.textErrors);\n\t      formControlService.buildNgClassExpression(inputElem, inputElem); // Put the ng-class onto the input element itself, as this makes styling easier\n\t    }\n\t  });\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _common = __webpack_require__(3);\n\t\n\tvar _common2 = _interopRequireDefault(_common);\n\t\n\tvar _ErrorMessageContainer = __webpack_require__(2);\n\t\n\tvar _ErrorMessageContainer2 = _interopRequireDefault(_ErrorMessageContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.formDate', [_common2.default, _ErrorMessageContainer2.default]);\n\t\n\texports.default = mod.name;\n\t\n\t// INPUT:\n\t//    <div form-date id=\"toDate\" name=\"toDate\" label=\"To date\" hide-label=\"true\" input-type=\"text\"\n\t//    ff-ng-model=\"acctCtrl.search.toDate\" ff-max-date=\"today\" ff-bs-show=\"acctCtrl.datePickers.datePickerTo\"\n\t//    ff-ng-blur=\"acctCtrl.toggleDatePicker('datePickerTo', true)\"\n\t//    ff-ng-focus=\"acctCtrl.toggleDatePicker('datePickerFrom', true)\"\n\t//    ff-class=\"form-control input-beta input-date\"\n\t//    field-errors=\"{date: 'ERROR.DATE_INVALID'}\" >\n\t//      <i class=\"calendar\" ng-click=\"acctCtrl.toggleDatePicker('datePickerTo')\"></i>\n\t//    </div>\n\t\n\tmod.directive('formDate', ['formControlService', function (formControlService) {\n\t\n\t  return formControlService.buildDirective({\n\t    controlName: 'formDate',\n\t    expectedTemplateElements: ['input', 'label'],\n\t    expectedAttributes: ['label'],\n\t    configFn: function configFn(tElement, tAttr, id, name, inputElem, labelElem) {\n\t      labelElem.prepend(tAttr.label);\n\t\n\t      //formControlService.decorateInputGroup(tElement.find('div'), tAttr.inputGroupClass);\n\t      formControlService.createFieldHint(tElement, inputElem, tAttr.fieldHint, id + '-hint', tAttr.fieldHintDisplay);\n\t      formControlService.createErrorFeatures(inputElem.parent(), inputElem, name, tAttr.label, tAttr.fieldErrors, tAttr.textErrors);\n\t    }\n\t  });\n\t}]);\n\t\n\tmod.directive('formDateFormat', ['ngFormLibDateUtil', function (DateUtil) {\n\t  // All dates greater than AD 0 and less than AD 10000 in dd/mm/yyyy format\n\t  // RegEx behaves oddly if /g is uses in Regexp.test() situations\n\t  var dateRegEx = /^(((0[1-9]|[12][0-9]|3[01])([\\/])(0[13578]|10|12)([\\/])(\\d{4}))|(([0][1-9]|[12][0-9]|30)([\\/])(0[469]|11)([\\/])(\\d{4}))|((0[1-9]|1[0-9]|2[0-8])([\\/])(02)([\\/])(\\d{4}))|((29)(\\/)(02)([\\/])([02468][048]00))|((29)([\\/])(02)([\\/])([13579][26]00))|((29)([\\/])(02)([\\/])([0-9][0-9][0][48]))|((29)([\\/])(02)([\\/])([0-9][0-9][2468][048]))|((29)([\\/])(02)([\\/])([0-9][0-9][13579][26])))$/;\n\t\n\t  return {\n\t    require: 'ngModel',\n\t    priority: 150, // Higher priority than ui-mask (100), so the postLink function runs last\n\t    link: function link(scope, elem, attrs, ctrl) {\n\t\n\t      ctrl.$parsers.unshift(function (viewValue) {\n\t\n\t        // If viewValue is undefined or null, jump out\n\t        if (!viewValue) {\n\t          ctrl.$setValidity('date', true);\n\t          ctrl.$setValidity('minDate', true); // Turn off the error if the date format isn't valid\n\t          ctrl.$setValidity('maxDate', true); // Turn off the error if the date format isn't valid\n\t          return viewValue;\n\t        }\n\t\n\t        // If viewValue is a string of 8 digits, then convert it to dd/dd/dddd first\n\t        if (viewValue.length === 8 && !isNaN(viewValue * 1)) {\n\t          viewValue = viewValue.substr(0, 2) + '/' + viewValue.substr(2, 2) + '/' + viewValue.substr(4);\n\t        }\n\t\n\t        // Check that it is a valid date\n\t        var dateFormatValid = dateRegEx.test(viewValue) || typeof viewValue === 'undefined' || !viewValue;\n\t        ctrl.$setValidity('date', dateFormatValid);\n\t\n\t        //console.log('dateInput: ' + viewValue + ', ' + ctrl.$modelValue);\n\t\n\t        // If the date is valid\n\t        if (dateFormatValid && viewValue) {\n\t          var fieldDate = DateUtil.getDate(viewValue);\n\t          // and there is a min date, check if the value is greater than the min date\n\t          if (attrs.minDate) {\n\t            var minDate = DateUtil.getDate(attrs.minDate);\n\t            ctrl.$setValidity('minDate', fieldDate.getTime() >= minDate.getTime());\n\t          } else {\n\t            ctrl.$setValidity('minDate', true);\n\t          }\n\t          // and there is a max date, check if the value is less than the max date\n\t          if (attrs.maxDate) {\n\t            var maxDate;\n\t\n\t            if (attrs.maxDate === 'today') {\n\t              maxDate = DateUtil.getDate(DateUtil.getToday());\n\t            } else {\n\t              maxDate = DateUtil.getDate(attrs.maxDate);\n\t            }\n\t\n\t            ctrl.$setValidity('maxDate', fieldDate.getTime() <= maxDate.getTime());\n\t          } else {\n\t            ctrl.$setValidity('maxDate', true);\n\t          }\n\t        } else {\n\t          ctrl.$setValidity('minDate', true); // Turn off the error if the date format isn't valid\n\t          ctrl.$setValidity('maxDate', true); // Turn off the error if the date format isn't valid\n\t        }\n\t        return viewValue;\n\t      });\n\t\n\t      ctrl.$viewChangeListeners.push(function () {\n\t        // If there is a date-change attribute, execute it when the control is valid\n\t        if (attrs.dateChange && ctrl.$valid) {\n\t          scope.$eval(attrs.dateChange);\n\t        }\n\t      });\n\t    }\n\t  };\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _common = __webpack_require__(3);\n\t\n\tvar _common2 = _interopRequireDefault(_common);\n\t\n\tvar _ErrorMessageContainer = __webpack_require__(2);\n\t\n\tvar _ErrorMessageContainer2 = _interopRequireDefault(_ErrorMessageContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.formInput', [_common2.default, _ErrorMessageContainer2.default]);\n\t\n\texports.default = mod.name;\n\t\n\t// INPUT:\n\t//  <form-input id=\"\" name=\"\" label=\"Last name\" required=\"{{expression}}\"\n\t//      ff-class=\"span12\" input-type=\"text|tel|email\" ff-ng-model=\"application.lastName\"\n\t//      ff-maxlength=\"40\" ff-ng-pattern=\"/^[a-zA-Z0-9 \\-.']+$/\"\n\t//      field-hint=\"This must be the last name of the person who originally applied for the service.\"\n\t//      field-errors=\"{required: 'Please enter a valid last name', pattern: 'Please enter a valid last name'}\"\n\t//      text-errors=\"['data.errors.']\"\n\t//      content-class=\"span3\"\n\t//      >My content</form-input>\n\t\n\t// OUTPUT:\n\t\n\tmod.directive('formInput', ['formControlService', function (formControlService) {\n\t\n\t  return formControlService.buildDirective({\n\t    controlName: 'formInput',\n\t    expectedTemplateElements: ['input', 'label'],\n\t    expectedAttributes: ['label', 'inputType'],\n\t    configFn: function configFn(tElement, tAttr, id, name, inputElem, labelElem) {\n\t      labelElem.prepend(tAttr.label);\n\t      addPlaceholder(inputElem, tAttr.placeholder); // Do this to be API-compatible with the form-select control. ff-placeholder is still supported. Use one or the other.\n\t\n\t      // If the user wants to use 'input-addon-prefix' or 'input-addon-suffix', change the DOM\n\t      var hasInputGroup = addInputGroup(inputElem, tAttr.inputPrefix, tAttr.inputSuffix);\n\t      var parentElemForErrors = hasInputGroup ? inputElem.parent().parent() : inputElem.parent();\n\t\n\t      formControlService.createFieldHint(tElement, inputElem, tAttr.fieldHint, id + '-hint', tAttr.fieldHintDisplay);\n\t      formControlService.createErrorFeatures(parentElemForErrors, inputElem, name, tAttr.label, tAttr.fieldErrors, tAttr.textErrors);\n\t    }\n\t  });\n\t}]);\n\t\n\tfunction addPlaceholder(inputElem, placeholderText) {\n\t  if (placeholderText) {\n\t    inputElem.attr('placeholder', placeholderText);\n\t  }\n\t}\n\t\n\tfunction addInputGroup(inputElem, inputGroupPrefix, inputGroupSuffix) {\n\t  if (inputGroupPrefix || inputGroupSuffix) {\n\t    inputElem.wrap('<div class=\"input-group\">'); //inputElem.parent(); // This should be the 'control-row' element//wrap('<div class=\"input-group\">');\n\t    var wrapper = inputElem.parent();\n\t\n\t    if (inputGroupPrefix) {\n\t      wrapper.prepend('<span class=\"input-group-addon\">' + inputGroupPrefix + '</span>');\n\t    }\n\t    if (inputGroupSuffix) {\n\t      wrapper.append('<span class=\"input-group-addon\">' + inputGroupSuffix + '</span>');\n\t    }\n\t    return true;\n\t  }\n\t  return false;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _common = __webpack_require__(3);\n\t\n\tvar _common2 = _interopRequireDefault(_common);\n\t\n\tvar _ErrorMessageContainer = __webpack_require__(2);\n\t\n\tvar _ErrorMessageContainer2 = _interopRequireDefault(_ErrorMessageContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.formRadioButton', [_common2.default, _ErrorMessageContainer2.default]);\n\t\n\texports.default = mod.name;\n\t\n\t// INPUT:\n\t//  <form-radio-button uid=\"fld\" name=\"name\" aria-label=\"Book Type\" label-class=\"btn btn-toggle\"\n\t//    ff-class=\"someCSS\" ff-ng-model=\"application.bookType\" ff-value=\"Fiction\" ng-click=\"loadFiction()\" class=\"span6\">\n\t//     <icon class=\"icon-fiction\"></icon>Fiction\n\t//  </form-radio-button>\n\t\n\t// OUTPUT:\n\t\n\tmod.directive('formRadioButton', ['formControlService', function (formControlService) {\n\t\n\t  return formControlService.buildDirective({\n\t    controlName: 'formRadioButton',\n\t    expectedTemplateElements: ['input', 'label', 'div'],\n\t    expectedAttributes: [], // The template should NOT have a form-group element inside it, as this has to be specified externally (due to the group-nature of radio buttons)\n\t    configFn: function configFn(tElement, tAttr, id, name, inputElem) {\n\t      // Move the class attribute from the outer-DIV to the radio-button DIV (special case)\n\t      var rbDiv = tElement.find('div');\n\t      rbDiv.addClass(tElement.attr('class'));\n\t      tElement.removeAttr('class');\n\t\n\t      formControlService.createErrorFeatures(tElement, inputElem, name, '', tAttr.fieldErrors, tAttr.textErrors);\n\t      formControlService.buildNgClassExpression(inputElem, inputElem); // Put the ng-class onto the input element itself, as this makes styling easier\n\t    }\n\t  });\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.formReset', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formReset', ['$parse', function ($parse) {\n\t\n\t  function resetFieldState(controlMap) {\n\t    // Loops through the controlMap and reset's each field's state\n\t    for (var item in controlMap) {\n\t      if (controlMap.hasOwnProperty(item)) {\n\t        var controlList = controlMap[item];\n\t        for (var j = 0, jLen = controlList.length; j < jLen; j++) {\n\t          var control = controlList[j].controller;\n\t          control.fieldState = '';\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  return {\n\t    restrict: 'A',\n\t    require: '^form',\n\t    link: function link(scope, element, attr, controller) {\n\t      var ngModelGet = $parse(attr.formReset),\n\t          ngModelSet = ngModelGet.assign;\n\t\n\t      if (!ngModelSet) {\n\t        throw Error('formReset requires an assignable scope-expression. \"' + attr.formReset + '\" is un-assignable.');\n\t      }\n\t\n\t      // Get a copy of the data as soon as the directive is created, which is after the scope/controller has been initialised (safe)\n\t      var originalData = _angular2.default.copy(ngModelGet(scope));\n\t\n\t      element.on('click', function () {\n\t        if (typeof controller.setSubmitted === 'function') {\n\t          controller.setSubmitted(false);\n\t        }\n\t        // Use a *copy* of the original data, as we don't want originalData to be modified by subsequent changes to the model by the form controls\n\t        ngModelSet(scope, _angular2.default.copy(originalData));\n\t        resetFieldState(controller._controls || {});\n\t        controller.$setPristine();\n\t\n\t        scope.$emit('event:FormReset');\n\t        scope.$digest();\n\t      });\n\t    }\n\t  };\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _common = __webpack_require__(3);\n\t\n\tvar _common2 = _interopRequireDefault(_common);\n\t\n\tvar _ErrorMessageContainer = __webpack_require__(2);\n\t\n\tvar _ErrorMessageContainer2 = _interopRequireDefault(_ErrorMessageContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.formSelect', [_common2.default, _ErrorMessageContainer2.default]);\n\t\n\texports.default = mod.name;\n\t\n\t// INPUT:\n\t//  <form-select id=\"frm-size\" name=\"bookSize\" required=\"true\" label=\"Approximate size\"\n\t//    ff-class=\"span12\" ff-ng-model=\"model.size\" placeholder=\"Select a size bracket\"\n\t//    ff-ng-options=\"option.value as option.name for option in refData.bookSizes\"\n\t//    field-errors=\"{required: 'Please select a size bracket'}\"\n\t//    text-errors=\"['data.errors']\"></form-select>\n\t\n\t// OUTPUT:\n\t\n\tmod.directive('formSelect', ['formControlService', function (formControlService) {\n\t\n\t  function addPlaceholder(selectElem, placeholderText) {\n\t    if (placeholderText) {\n\t      selectElem.append('<option translate value=\"\">' + placeholderText + '</option>');\n\t    }\n\t  }\n\t\n\t  return formControlService.buildDirective({\n\t    controlName: 'formSelect',\n\t    inputElementName: 'select',\n\t    expectedTemplateElements: ['select', 'label'],\n\t    expectedAttributes: ['label'],\n\t    configFn: function configFn(tElement, tAttr, id, name, inputElem, labelElem) {\n\t      labelElem.prepend(tAttr.label);\n\t      addPlaceholder(inputElem, tAttr.placeholder); // Adds the extra option element to the start of the <option>\n\t\n\t      formControlService.createFieldHint(tElement, inputElem, tAttr.fieldHint, id + '-hint', tAttr.fieldHintDisplay);\n\t      formControlService.createErrorFeatures(inputElem.parent(), inputElem, name, tAttr.label, tAttr.fieldErrors, tAttr.textErrors);\n\t    }\n\t  });\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.formSubmit', []);\n\t\n\texports.default = mod.name;\n\t\n\t/**\n\t *  formSubmit - Executes an expression when the form is valid (essentially a form.submit() handler).\n\t *\n\t *  It can be applied to either the form element or to a button.\n\t *\n\t */\n\t\n\tmod.directive('formSubmit', ['$parse', function ($parse) {\n\t  return {\n\t    restrict: 'A',\n\t    require: ['^form'], // Get the form controller\n\t    link: function link(scope, element, attr, controller) {\n\t\n\t      var fn = $parse(attr.formSubmit) || _angular2.default.noop,\n\t          isForm = element[0].tagName === 'FORM',\n\t          formController = controller[0];\n\t\n\t      element.bind(isForm ? 'submit' : 'click', function (event) {\n\t\n\t        formController.setSubmitted(true);\n\t\n\t        scope.$apply(function () {\n\t          //scope.$emit('event:FormSubmitAttempted');\n\t\n\t          if (formController.$valid) {\n\t            if (fn(scope, { $event: event }) !== false) {\n\t              // Needed by the tracking tool as it clears the input data after a submission.\n\t              // Potentially, form field validation to be done here, but unnecessary at the moment.\n\t              // The reset behaviour can be over-ridden by returning false from the called function(maybe prevent default aswell?)\n\t              formController.setSubmitted(false);\n\t              formController.$setPristine();\n\t            }\n\t          } else {\n\t            event.preventDefault();\n\t          }\n\t        });\n\t      });\n\t    }\n\t  };\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _ErrorMessageContainer = __webpack_require__(2);\n\t\n\tvar _ErrorMessageContainer2 = _interopRequireDefault(_ErrorMessageContainer);\n\t\n\tvar _FormCheckbox = __webpack_require__(9);\n\t\n\tvar _FormCheckbox2 = _interopRequireDefault(_FormCheckbox);\n\t\n\tvar _FormDate = __webpack_require__(10);\n\t\n\tvar _FormDate2 = _interopRequireDefault(_FormDate);\n\t\n\tvar _FormInput = __webpack_require__(11);\n\t\n\tvar _FormInput2 = _interopRequireDefault(_FormInput);\n\t\n\tvar _FormRadioButton = __webpack_require__(12);\n\t\n\tvar _FormRadioButton2 = _interopRequireDefault(_FormRadioButton);\n\t\n\tvar _FormReset = __webpack_require__(13);\n\t\n\tvar _FormReset2 = _interopRequireDefault(_FormReset);\n\t\n\tvar _FormSelect = __webpack_require__(14);\n\t\n\tvar _FormSelect2 = _interopRequireDefault(_FormSelect);\n\t\n\tvar _FormSubmit = __webpack_require__(15);\n\t\n\tvar _FormSubmit2 = _interopRequireDefault(_FormSubmit);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// We need the utility module for the ngFormLibDateUtil.getDate() method for the formDateFormat directive, and ngFormLibStringUtil.trim() in controls.common\n\tvar mod = _angular2.default.module('ngFormLib.controls', [_ErrorMessageContainer2.default, _FormCheckbox2.default, _FormDate2.default, _FormInput2.default, _FormRadioButton2.default, _FormReset2.default, _FormSelect2.default, _FormSubmit2.default]);\n\t\n\texports.default = mod.name;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _FormControlService = __webpack_require__(4);\n\t\n\tvar _FormControlService2 = _interopRequireDefault(_FormControlService);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.controls.requiredMarker', [_FormControlService2.default]);\n\t\n\texports.default = mod.name;\n\t\n\t// Add a simple \"required\" marker that is not read-out by screen readers (as the field should also have a required indicator)\n\t//\n\t// INPUT:\n\t//  <span required-marker></span>\n\t//  <span required-marker hide=\"isNotRequired\">Some Text</span>\n\t\n\t// OUTPUT:\n\t//  <span class=\"required\" aria-hidden=\"true\" ng-class=\"{\\'ng-hide\\': hide}\" ng-transclude=\"\"></span>\n\t//  <span class=\"required\" aria-hidden=\"true\" ng-class=\"{\\'ng-hide\\': hide}\" ng-transclude=\"\" hide=\"isNotRequired\">Some Text</span>\n\t\n\tmod.directive('requiredMarker', ['formControlService', function (formControlService) {\n\t\n\t  return {\n\t    restrict: 'AE',\n\t    replace: true,\n\t    transclude: true,\n\t    templateUrl: function templateUrl(element, attr) {\n\t      return attr.template || formControlService.getHTMLTemplate(element, 'requiredMarker');\n\t    },\n\t    scope: {\n\t      hide: '='\n\t    }\n\t  };\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _angularAnimate = __webpack_require__(6);\n\t\n\tvar _angularAnimate2 = _interopRequireDefault(_angularAnimate);\n\t\n\tvar _FormPolicy = __webpack_require__(19);\n\t\n\tvar _FormPolicy2 = _interopRequireDefault(_FormPolicy);\n\t\n\tvar _controls = __webpack_require__(16);\n\t\n\tvar _controls2 = _interopRequireDefault(_controls);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib', [_angularAnimate2.default, _FormPolicy2.default,\n\t//    Add the policies you want, or define your own:\n\t//    'ngFormLib.policy.checkForStateChanges',\n\t//    'ngFormLib.policy.displayError',\n\t//    'ngFormLib.policy.focusBehaviour',\n\t_controls2.default]);\n\t\n\texports.default = mod.name;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// The form policy intentionally has no hard dependencies.\n\t// If there are form-policy values that exist when the service is being constructed, it will use them.\n\t// Otherwise it will use no-op policy functions.\n\tvar mod = _angular2.default.module('ngFormLib.policy', []);\n\t\n\texports.default = mod.name;\n\t\n\t// This is a configurable service\n\t// It should contain the _default_ values for form policies\n\t\n\tmod.provider('formPolicyService', function () {\n\t  var self = this,\n\t      noop = _angular2.default.noop,\n\t      nullBehaviourOnStateChange = function nullBehaviourOnStateChange() {\n\t    return {\n\t      applyBehaviour: noop,\n\t      resetBehaviour: noop\n\t    };\n\t  },\n\t      nullStateChanges = function nullStateChanges() {\n\t    return {};\n\t  };\n\t\n\t  self.defaults = {\n\t    formSubmitAttemptedClass: 'form-submit-attempted',\n\t    fieldErrorClass: 'has-error',\n\t    fieldSuccessClass: 'has-success',\n\t    behaviourOnStateChange: null, // Previously called focusBehavior\n\t    checkForStateChanges: null,\n\t    stateDefinitions: null,\n\t    fieldFocusScrollOffset: 0\n\t  };\n\t\n\t  this.$get = ['$injector', function ($injector) {\n\t\n\t    function getService(name) {\n\t      try {\n\t        return $injector.get(name);\n\t      } catch (e) {\n\t        return null; // Provider-not-found error, ignore and move on\n\t      }\n\t    }\n\t\n\t    // Policy precedence: this.defaults, policy-value-object, noop\n\t    self.defaults.behaviourOnStateChange = self.defaults.behaviourOnStateChange || getService('formPolicyBehaviourOnStateChange') || nullBehaviourOnStateChange;\n\t    self.defaults.checkForStateChanges = self.defaults.checkForStateChanges || getService('formPolicyCheckForStateChanges') || noop;\n\t    self.defaults.stateDefinitions = self.defaults.stateDefinitions || getService('formPolicyStateDefinitions') || nullStateChanges;\n\t\n\t    var policyService = {\n\t      getCurrentPolicy: function getCurrentPolicy() {\n\t        return _angular2.default.copy(self.defaults);\n\t      }\n\t    };\n\t\n\t    return policyService;\n\t  }];\n\t});\n\t\n\tfunction formDirective(formPolicyService) {\n\t\n\t  return {\n\t    //priority: -1,\n\t    restrict: 'AE',\n\t    require: ['?form'], // Tells the directive to get the controller for the 'form' directive, which is the FormController controller\n\t    compile: function compile(tElement, tAttr) {\n\t\n\t      // Use element.data() to store a reference to this element for use by child.inheritedData()\n\t      // Will storing an element this way cause a memory leak? Or should I just store the data I currently need (attr.class)\n\t      // This has to happen during the compile step, as the children need access to the variable when they are compiled\n\t      //  ('class' is a reserved word to JavaScript, so we need to treat it as a string)\n\t      tElement.data('formElementClasses', tAttr['class']); //jscs:ignore\n\t\n\t      return {\n\t        pre: function pre(scope, element, attr, controller) {\n\t          // We want to extend the FormController by adding a form policy\n\t          var formController = controller[0];\n\t          formController._policy = _angular2.default.extend(formPolicyService.getCurrentPolicy(), scope.$eval(attr.formPolicy));\n\t\n\t          // Add a reference to the <form> element's scope to the formController, to support showing errors for nested components\n\t          formController._scope = scope;\n\t\n\t          // Determine if we have a parent form controller. If we do, we want to use it for the focus behaviour\n\t          formController._parentController = element.parent().controller('form');\n\t\n\t          if (!formController._parentController) {\n\t            // We also want to add an element reference when a control is added\n\t            formController._controls = {};\n\t          }\n\t\n\t          // Generate the focus policy function for use by other directive\n\t          formController._applyFormBehaviourOnStateChangePolicy = formController._policy.behaviourOnStateChange(formController);\n\t\n\t          // Add/remove a class onto the form based on the value of the formSubmitted variable\n\t          formController.setSubmitted = function (value, tellNoOne) {\n\t            element[value ? 'addClass' : 'removeClass'](formController._policy.formSubmitAttemptedClass);\n\t            formController._formSubmitAttempted = value;\n\t            formController._applyFormBehaviourOnStateChangePolicy.resetBehaviour();\n\t\n\t            if (value && !tellNoOne) {\n\t              scope.$broadcast('event:FormSubmitAttempted');\n\t            }\n\t          };\n\t\n\t          // Flag to indicate whether the form has been submitted\n\t          formController._formSubmitAttempted = false;\n\t          formController._applyFormBehaviourOnStateChangePolicy.resetBehaviour();\n\t\n\t          // If this form is an ngForm (in that it has a parent 'form'), then we need to make sure that\n\t          // when the parent form is submitted or reset, the same thing happens to the child forms\n\t          if (formController._parentController) {\n\t            scope.$watch(function () {\n\t              return formController._parentController._formSubmitAttempted;\n\t            }, function (value) {\n\t              if (value !== undefined) {\n\t                //formController.setSubmitted(!!value, true);  // Don't send another notification, just update our own state\n\t                formController.setSubmitted(!!value); // Don't send another notification, just update our own state\n\t              }\n\t            });\n\t          }\n\t        }\n\t      };\n\t    }\n\t  };\n\t}\n\tmod.directive('form', ['formPolicyService', formDirective]);\n\tmod.directive('ngForm', ['formPolicyService', formDirective]);\n\t\n\t// We want our formController to expose the list of controls that are registered with the form,\n\t// including controls inside sub-forms. That allows us to reset them directly. Relying simply on the fieldName\n\t// does not work when using sub-forms inside ng-repeaters.\n\t\n\tvar inputElements = ['input', 'select'];\n\t\n\t_angular2.default.forEach(inputElements, function (inputElem) {\n\t  mod.directive(inputElem, function () {\n\t\n\t    function hookupElementToNameToElementMap(formController, element, fieldName, fieldController) {\n\t      // Each element in the map is an array, because form elements *can have the same name*!\n\t      var map = formController._controls;\n\t      if (!map[fieldName]) {\n\t        map[fieldName] = [];\n\t      }\n\t      // Add the field to the end of the list of items with the same name\n\t      map[fieldName][map[fieldName].length] = { 'element': element, 'controller': fieldController };\n\t\n\t      element.on('$destroy', function () {\n\t        // Delete just this element from the map of controls\n\t        var map = formController._controls[element.attr('name')];\n\t        var elementId = element.attr('id');\n\t        for (var i = 0; i < map.length; i++) {\n\t          if (map[i].element.attr('id') === elementId) {\n\t            map.splice(i, 1);\n\t            break;\n\t          }\n\t        }\n\t      });\n\t    }\n\t\n\t    return {\n\t      restrict: 'E',\n\t      require: ['?^form', '?ngModel'],\n\t      link: {\n\t        pre: function pre(scope, element, attr, controllers) {\n\t          if (!controllers[0]) {\n\t            return;\n\t          }\n\t\n\t          var rootFormController = controllers[0]._parentController || controllers[0],\n\t              fieldController = controllers[1],\n\t              name = attr.name;\n\t\n\t          if (rootFormController && rootFormController._controls) {\n\t            hookupElementToNameToElementMap(rootFormController, element, name, fieldController);\n\t          }\n\t        }\n\t      }\n\t    };\n\t  });\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/template/FormCheckboxTemplate.tpl.html\";\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/template/FormDateInputTemplate.tpl.html\";\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/template/FormInputTemplate.tpl.html\";\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/template/FormRadioButtonTemplate.tpl.html\";\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/template/FormSelectTemplate.tpl.html\";\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/template/RequiredMarkerTemplate.tpl.html\";\n\n/***/ },\n/* 26 */,\n/* 27 */,\n/* 28 */,\n/* 29 */\n/***/ function(module, exports) {\n\n\t/**\n\t * angular-strap\n\t * @version v2.1.6 - 2015-01-11\n\t * @link http://mgcrea.github.io/angular-strap\n\t * @author Olivier Louvignes (olivier@mg-crea.com)\n\t * @license MIT License, http://www.opensource.org/licenses/MIT\n\t */\n\t(function(window, document, undefined) {\n\t'use strict';\n\t// Source: module.js\n\tangular.module('mgcrea.ngStrap', [\n\t  'mgcrea.ngStrap.modal',\n\t  'mgcrea.ngStrap.aside',\n\t  'mgcrea.ngStrap.alert',\n\t  'mgcrea.ngStrap.button',\n\t  'mgcrea.ngStrap.select',\n\t  'mgcrea.ngStrap.datepicker',\n\t  'mgcrea.ngStrap.timepicker',\n\t  'mgcrea.ngStrap.navbar',\n\t  'mgcrea.ngStrap.tooltip',\n\t  'mgcrea.ngStrap.popover',\n\t  'mgcrea.ngStrap.dropdown',\n\t  'mgcrea.ngStrap.typeahead',\n\t  'mgcrea.ngStrap.scrollspy',\n\t  'mgcrea.ngStrap.affix',\n\t  'mgcrea.ngStrap.tab',\n\t  'mgcrea.ngStrap.collapse'\n\t]);\n\t\n\t// Source: affix.js\n\tangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\t\n\t  .provider('$affix', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      offsetTop: 'auto'\n\t    };\n\t\n\t    this.$get = [\"$window\", \"debounce\", \"dimensions\", function($window, debounce, dimensions) {\n\t\n\t      var bodyEl = angular.element($window.document.body);\n\t      var windowEl = angular.element($window);\n\t\n\t      function AffixFactory(element, config) {\n\t\n\t        var $affix = {};\n\t\n\t        // Common vars\n\t        var options = angular.extend({}, defaults, config);\n\t        var targetEl = options.target;\n\t\n\t        // Initial private vars\n\t        var reset = 'affix affix-top affix-bottom',\n\t            setWidth = false,\n\t            initialAffixTop = 0,\n\t            initialOffsetTop = 0,\n\t            offsetTop = 0,\n\t            offsetBottom = 0,\n\t            affixed = null,\n\t            unpin = null;\n\t\n\t        var parent = element.parent();\n\t        // Options: custom parent\n\t        if (options.offsetParent) {\n\t          if (options.offsetParent.match(/^\\d+$/)) {\n\t            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n\t              parent = parent.parent();\n\t            }\n\t          }\n\t          else {\n\t            parent = angular.element(options.offsetParent);\n\t          }\n\t        }\n\t\n\t        $affix.init = function() {\n\t\n\t          this.$parseOffsets();\n\t          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n\t          setWidth = !element[0].style.width;\n\t\n\t          // Bind events\n\t          targetEl.on('scroll', this.checkPosition);\n\t          targetEl.on('click', this.checkPositionWithEventLoop);\n\t          windowEl.on('resize', this.$debouncedOnResize);\n\t\n\t          // Both of these checkPosition() calls are necessary for the case where\n\t          // the user hits refresh after scrolling to the bottom of the page.\n\t          this.checkPosition();\n\t          this.checkPositionWithEventLoop();\n\t\n\t        };\n\t\n\t        $affix.destroy = function() {\n\t\n\t          // Unbind events\n\t          targetEl.off('scroll', this.checkPosition);\n\t          targetEl.off('click', this.checkPositionWithEventLoop);\n\t          windowEl.off('resize', this.$debouncedOnResize);\n\t\n\t        };\n\t\n\t        $affix.checkPositionWithEventLoop = function() {\n\t\n\t          // IE 9 throws an error if we use 'this' instead of '$affix'\n\t          // in this setTimeout call\n\t          setTimeout($affix.checkPosition, 1);\n\t\n\t        };\n\t\n\t        $affix.checkPosition = function() {\n\t          // if (!this.$element.is(':visible')) return\n\t\n\t          var scrollTop = getScrollTop();\n\t          var position = dimensions.offset(element[0]);\n\t          var elementHeight = dimensions.height(element[0]);\n\t\n\t          // Get required affix class according to position\n\t          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\t\n\t          // Did affix status changed this last check?\n\t          if(affixed === affix) return;\n\t          affixed = affix;\n\t\n\t          // Add proper affix class\n\t          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\t\n\t          if(affix === 'top') {\n\t            unpin = null;\n\t            element.css('position', (options.offsetParent) ? '' : 'relative');\n\t            if(setWidth) {\n\t              element.css('width', '');\n\t            }\n\t            element.css('top', '');\n\t          } else if(affix === 'bottom') {\n\t            if (options.offsetUnpin) {\n\t              unpin = -(options.offsetUnpin * 1);\n\t            }\n\t            else {\n\t              // Calculate unpin threshold when affixed to bottom.\n\t              // Hopefully the browser scrolls pixel by pixel.\n\t              unpin = position.top - scrollTop;\n\t            }\n\t            if(setWidth) {\n\t              element.css('width', '');\n\t            }\n\t            element.css('position', (options.offsetParent) ? '' : 'relative');\n\t            element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n\t          } else { // affix === 'middle'\n\t            unpin = null;\n\t            if(setWidth) {\n\t              element.css('width', element[0].offsetWidth + 'px');\n\t            }\n\t            element.css('position', 'fixed');\n\t            element.css('top', initialAffixTop + 'px');\n\t          }\n\t\n\t        };\n\t\n\t        $affix.$onResize = function() {\n\t          $affix.$parseOffsets();\n\t          $affix.checkPosition();\n\t        };\n\t        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\t\n\t        $affix.$parseOffsets = function() {\n\t          var initialPosition = element.css('position');\n\t          // Reset position to calculate correct offsetTop\n\t          element.css('position', (options.offsetParent) ? '' : 'relative');\n\t\n\t          if(options.offsetTop) {\n\t            if(options.offsetTop === 'auto') {\n\t              options.offsetTop = '+0';\n\t            }\n\t            if(options.offsetTop.match(/^[-+]\\d+$/)) {\n\t              initialAffixTop = - options.offsetTop * 1;\n\t              if(options.offsetParent) {\n\t                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n\t              }\n\t              else {\n\t                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n\t              }\n\t            }\n\t            else {\n\t              offsetTop = options.offsetTop * 1;\n\t            }\n\t          }\n\t\n\t          if(options.offsetBottom) {\n\t            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n\t              // add 1 pixel due to rounding problems...\n\t              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n\t            }\n\t            else {\n\t              offsetBottom = options.offsetBottom * 1;\n\t            }\n\t          }\n\t\n\t          // Bring back the element's position after calculations\n\t          element.css('position', initialPosition);\n\t        };\n\t\n\t        // Private methods\n\t\n\t        function getRequiredAffixClass(unpin, position, elementHeight) {\n\t\n\t          var scrollTop = getScrollTop();\n\t          var scrollHeight = getScrollHeight();\n\t\n\t          if(scrollTop <= offsetTop) {\n\t            return 'top';\n\t          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\n\t            return 'middle';\n\t          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n\t            return 'bottom';\n\t          } else {\n\t            return 'middle';\n\t          }\n\t\n\t        }\n\t\n\t        function getScrollTop() {\n\t          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n\t        }\n\t\n\t        function getScrollHeight() {\n\t          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n\t        }\n\t\n\t        $affix.init();\n\t        return $affix;\n\t\n\t      }\n\t\n\t      return AffixFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsAffix', [\"$affix\", \"$window\", function($affix, $window) {\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      require: '^?bsAffixTarget',\n\t      link: function postLink(scope, element, attr, affixTarget) {\n\t\n\t        var options = {scope: scope, offsetTop: 'auto', target: affixTarget ? affixTarget.$element : angular.element($window)};\n\t        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        var affix = $affix(element, options);\n\t        scope.$on('$destroy', function() {\n\t          affix && affix.destroy();\n\t          options = null;\n\t          affix = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }])\n\t\n\t  .directive('bsAffixTarget', function() {\n\t    return {\n\t      controller: [\"$element\", function($element) {\n\t        this.$element = $element;\n\t      }]\n\t    };\n\t  });\n\t\n\t// Source: alert.js\n\t// @BUG: following snippet won't compile correctly\n\t// @TODO: submit issue to core\n\t// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\t\n\tangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\t\n\t  .provider('$alert', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      prefixClass: 'alert',\n\t      prefixEvent: 'alert',\n\t      placement: null,\n\t      template: 'alert/alert.tpl.html',\n\t      container: false,\n\t      element: null,\n\t      backdrop: false,\n\t      keyboard: true,\n\t      show: true,\n\t      // Specific options\n\t      duration: false,\n\t      type: false,\n\t      dismissable: true\n\t    };\n\t\n\t    this.$get = [\"$modal\", \"$timeout\", function($modal, $timeout) {\n\t\n\t      function AlertFactory(config) {\n\t\n\t        var $alert = {};\n\t\n\t        // Common vars\n\t        var options = angular.extend({}, defaults, config);\n\t\n\t        $alert = $modal(options);\n\t\n\t        // Support scope as string options [/*title, content, */ type, dismissable]\n\t        $alert.$scope.dismissable = !!options.dismissable;\n\t        if(options.type) {\n\t          $alert.$scope.type = options.type;\n\t        }\n\t\n\t        // Support auto-close duration\n\t        var show = $alert.show;\n\t        if(options.duration) {\n\t          $alert.show = function() {\n\t            show();\n\t            $timeout(function() {\n\t              $alert.hide();\n\t            }, options.duration * 1000);\n\t          };\n\t        }\n\t\n\t        return $alert;\n\t\n\t      }\n\t\n\t      return AlertFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsAlert', [\"$window\", \"$sce\", \"$alert\", function($window, $sce, $alert) {\n\t\n\t    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      scope: true,\n\t      link: function postLink(scope, element, attr, transclusion) {\n\t\n\t        // Directive options\n\t        var options = {scope: scope, element: element, show: false};\n\t        angular.forEach(['template', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Support scope as data-attrs\n\t        angular.forEach(['title', 'content', 'type'], function(key) {\n\t          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n\t            scope[key] = $sce.trustAsHtml(newValue);\n\t          });\n\t        });\n\t\n\t        // Support scope as an object\n\t        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\n\t          if(angular.isObject(newValue)) {\n\t            angular.extend(scope, newValue);\n\t          } else {\n\t            scope.content = newValue;\n\t          }\n\t        }, true);\n\t\n\t        // Initialize alert\n\t        var alert = $alert(options);\n\t\n\t        // Trigger\n\t        element.on(attr.trigger || 'click', alert.toggle);\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if (alert) alert.destroy();\n\t          options = null;\n\t          alert = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: aside.js\n\tangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\t\n\t  .provider('$aside', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade-and-slide-right',\n\t      prefixClass: 'aside',\n\t      prefixEvent: 'aside',\n\t      placement: 'right',\n\t      template: 'aside/aside.tpl.html',\n\t      contentTemplate: false,\n\t      container: false,\n\t      element: null,\n\t      backdrop: true,\n\t      keyboard: true,\n\t      html: false,\n\t      show: true\n\t    };\n\t\n\t    this.$get = [\"$modal\", function($modal) {\n\t\n\t      function AsideFactory(config) {\n\t\n\t        var $aside = {};\n\t\n\t        // Common vars\n\t        var options = angular.extend({}, defaults, config);\n\t\n\t        $aside = $modal(options);\n\t\n\t        return $aside;\n\t\n\t      }\n\t\n\t      return AsideFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsAside', [\"$window\", \"$sce\", \"$aside\", function($window, $sce, $aside) {\n\t\n\t    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      scope: true,\n\t      link: function postLink(scope, element, attr, transclusion) {\n\t        // Directive options\n\t        var options = {scope: scope, element: element, show: false};\n\t        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Support scope as data-attrs\n\t        angular.forEach(['title', 'content'], function(key) {\n\t          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n\t            scope[key] = $sce.trustAsHtml(newValue);\n\t          });\n\t        });\n\t\n\t        // Support scope as an object\n\t        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\n\t          if(angular.isObject(newValue)) {\n\t            angular.extend(scope, newValue);\n\t          } else {\n\t            scope.content = newValue;\n\t          }\n\t        }, true);\n\t\n\t        // Initialize aside\n\t        var aside = $aside(options);\n\t\n\t        // Trigger\n\t        element.on(attr.trigger || 'click', aside.toggle);\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if (aside) aside.destroy();\n\t          options = null;\n\t          aside = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: button.js\n\tangular.module('mgcrea.ngStrap.button', [])\n\t\n\t  .provider('$button', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      activeClass:'active',\n\t      toggleEvent:'click'\n\t    };\n\t\n\t    this.$get = function() {\n\t      return {defaults: defaults};\n\t    };\n\t\n\t  })\n\t\n\t  .directive('bsCheckboxGroup', function() {\n\t\n\t    return {\n\t      restrict: 'A',\n\t      require: 'ngModel',\n\t      compile: function postLink(element, attr) {\n\t        element.attr('data-toggle', 'buttons');\n\t        element.removeAttr('ng-model');\n\t        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n\t        angular.forEach(children, function(child) {\n\t          var childEl = angular.element(child);\n\t          childEl.attr('bs-checkbox', '');\n\t          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n\t        });\n\t      }\n\t\n\t    };\n\t\n\t  })\n\t\n\t  .directive('bsCheckbox', [\"$button\", \"$$rAF\", function($button, $$rAF) {\n\t\n\t    var defaults = $button.defaults;\n\t    var constantValueRegExp = /^(true|false|\\d+)$/;\n\t\n\t    return {\n\t      restrict: 'A',\n\t      require: 'ngModel',\n\t      link: function postLink(scope, element, attr, controller) {\n\t\n\t        var options = defaults;\n\t\n\t        // Support label > input[type=\"checkbox\"]\n\t        var isInput = element[0].nodeName === 'INPUT';\n\t        var activeElement = isInput ? element.parent() : element;\n\t\n\t        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n\t        if(constantValueRegExp.test(attr.trueValue)) {\n\t          trueValue = scope.$eval(attr.trueValue);\n\t        }\n\t        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n\t        if(constantValueRegExp.test(attr.falseValue)) {\n\t          falseValue = scope.$eval(attr.falseValue);\n\t        }\n\t\n\t        // Parse exotic values\n\t        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n\t        if(hasExoticValues) {\n\t          controller.$parsers.push(function(viewValue) {\n\t            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n\t            return viewValue ? trueValue : falseValue;\n\t          });\n\t          // modelValue -> $formatters -> viewValue\n\t          controller.$formatters.push(function(modelValue) {\n\t             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n\t             return angular.equals(modelValue, trueValue);\n\t          });\n\t          // Fix rendering for exotic values\n\t          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n\t            controller.$render();\n\t          });\n\t        }\n\t\n\t        // model -> view\n\t        controller.$render = function () {\n\t          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n\t          var isActive = angular.equals(controller.$modelValue, trueValue);\n\t          $$rAF(function() {\n\t            if(isInput) element[0].checked = isActive;\n\t            activeElement.toggleClass(options.activeClass, isActive);\n\t          });\n\t        };\n\t\n\t        // view -> model\n\t        element.bind(options.toggleEvent, function() {\n\t          scope.$apply(function () {\n\t            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n\t            if(!isInput) {\n\t              controller.$setViewValue(!activeElement.hasClass('active'));\n\t            }\n\t            if(!hasExoticValues) {\n\t              controller.$render();\n\t            }\n\t          });\n\t        });\n\t\n\t      }\n\t\n\t    };\n\t\n\t  }])\n\t\n\t  .directive('bsRadioGroup', function() {\n\t\n\t    return {\n\t      restrict: 'A',\n\t      require: 'ngModel',\n\t      compile: function postLink(element, attr) {\n\t        element.attr('data-toggle', 'buttons');\n\t        element.removeAttr('ng-model');\n\t        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n\t        angular.forEach(children, function(child) {\n\t          angular.element(child).attr('bs-radio', '');\n\t          angular.element(child).attr('ng-model', attr.ngModel);\n\t        });\n\t      }\n\t\n\t    };\n\t\n\t  })\n\t\n\t  .directive('bsRadio', [\"$button\", \"$$rAF\", function($button, $$rAF) {\n\t\n\t    var defaults = $button.defaults;\n\t    var constantValueRegExp = /^(true|false|\\d+)$/;\n\t\n\t    return {\n\t      restrict: 'A',\n\t      require: 'ngModel',\n\t      link: function postLink(scope, element, attr, controller) {\n\t\n\t        var options = defaults;\n\t\n\t        // Support `label > input[type=\"radio\"]` markup\n\t        var isInput = element[0].nodeName === 'INPUT';\n\t        var activeElement = isInput ? element.parent() : element;\n\t\n\t        var value = constantValueRegExp.test(attr.value) ? scope.$eval(attr.value) : attr.value;\n\t\n\t        // model -> view\n\t        controller.$render = function () {\n\t          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n\t          var isActive = angular.equals(controller.$modelValue, value);\n\t          $$rAF(function() {\n\t            if(isInput) element[0].checked = isActive;\n\t            activeElement.toggleClass(options.activeClass, isActive);\n\t          });\n\t        };\n\t\n\t        // view -> model\n\t        element.bind(options.toggleEvent, function() {\n\t          scope.$apply(function () {\n\t            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n\t            controller.$setViewValue(value);\n\t            controller.$render();\n\t          });\n\t        });\n\t\n\t      }\n\t\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: collapse.js\n\tangular.module('mgcrea.ngStrap.collapse', [])\n\t\n\t  .provider('$collapse', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-collapse',\n\t      disallowToggle: false,\n\t      activeClass: 'in',\n\t      startCollapsed: false,\n\t      allowMultiple: false\n\t    };\n\t\n\t    var controller = this.controller = function($scope, $element, $attrs) {\n\t      var self = this;\n\t\n\t      // Attributes options\n\t      self.$options = angular.copy(defaults);\n\t      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n\t        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n\t      });\n\t\n\t      self.$toggles = [];\n\t      self.$targets = [];\n\t\n\t      self.$viewChangeListeners = [];\n\t\n\t      self.$registerToggle = function(element) {\n\t        self.$toggles.push(element);\n\t      };\n\t      self.$registerTarget = function(element) {\n\t        self.$targets.push(element);\n\t      };\n\t\n\t      self.$unregisterToggle = function(element) {\n\t        var index = self.$toggles.indexOf(element);\n\t        // remove toggle from $toggles array\n\t        self.$toggles.splice(index, 1);\n\t      };\n\t      self.$unregisterTarget = function(element) {\n\t        var index = self.$targets.indexOf(element);\n\t\n\t        // remove element from $targets array\n\t        self.$targets.splice(index, 1);\n\t\n\t        if (self.$options.allowMultiple) {\n\t          // remove target index from $active array values\n\t          deactivateItem(element);\n\t        }\n\t\n\t        // fix active item indexes\n\t        fixActiveItemIndexes(index);\n\t\n\t        self.$viewChangeListeners.forEach(function(fn) {\n\t          fn();\n\t        });\n\t      };\n\t\n\t      // use array to store all the currently open panels\n\t      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n\t      self.$setActive = $scope.$setActive = function(value) {\n\t        if(angular.isArray(value)) {\n\t          self.$targets.$active = angular.copy(value);\n\t        }\n\t        else if(!self.$options.disallowToggle) {\n\t          // toogle element active status\n\t          isActive(value) ? deactivateItem(value) : activateItem(value);\n\t        } else {\n\t          activateItem(value);\n\t        }\n\t\n\t        self.$viewChangeListeners.forEach(function(fn) {\n\t          fn();\n\t        });\n\t      };\n\t\n\t      self.$activeIndexes = function() {\n\t        return self.$options.allowMultiple ? self.$targets.$active :\n\t          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n\t      };\n\t\n\t      function fixActiveItemIndexes(index) {\n\t        // item with index was removed, so we\n\t        // need to adjust other items index values\n\t        var activeIndexes = self.$targets.$active;\n\t        for(var i = 0; i < activeIndexes.length; i++) {\n\t          if (index < activeIndexes[i]) {\n\t            activeIndexes[i] = activeIndexes[i] - 1;\n\t          }\n\t\n\t          // the last item is active, so we need to\n\t          // adjust its index\n\t          if (activeIndexes[i] === self.$targets.length) {\n\t            activeIndexes[i] = self.$targets.length - 1;\n\t          }\n\t        }\n\t      }\n\t\n\t      function isActive(value) {\n\t        var activeItems = self.$targets.$active;\n\t        return activeItems.indexOf(value) === -1 ? false : true;\n\t      }\n\t\n\t      function deactivateItem(value) {\n\t        var index = self.$targets.$active.indexOf(value);\n\t        if (index !== -1) {\n\t          self.$targets.$active.splice(index, 1);\n\t        }\n\t      }\n\t\n\t      function activateItem(value) {\n\t        if (!self.$options.allowMultiple) {\n\t          // remove current selected item\n\t          self.$targets.$active.splice(0, 1);\n\t        }\n\t\n\t        if (self.$targets.$active.indexOf(value) === -1) {\n\t          self.$targets.$active.push(value);\n\t        }\n\t      }\n\t\n\t    };\n\t\n\t    this.$get = function() {\n\t      var $collapse = {};\n\t      $collapse.defaults = defaults;\n\t      $collapse.controller = controller;\n\t      return $collapse;\n\t    };\n\t\n\t  })\n\t\n\t  .directive('bsCollapse', [\"$window\", \"$animate\", \"$collapse\", function($window, $animate, $collapse) {\n\t\n\t    var defaults = $collapse.defaults;\n\t\n\t    return {\n\t      require: ['?ngModel', 'bsCollapse'],\n\t      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n\t      link: function postLink(scope, element, attrs, controllers) {\n\t\n\t        var ngModelCtrl = controllers[0];\n\t        var bsCollapseCtrl = controllers[1];\n\t\n\t        if(ngModelCtrl) {\n\t\n\t          // Update the modelValue following\n\t          bsCollapseCtrl.$viewChangeListeners.push(function() {\n\t            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n\t          });\n\t\n\t          // modelValue -> $formatters -> viewValue\n\t          ngModelCtrl.$formatters.push(function(modelValue) {\n\t            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n\t            if (angular.isArray(modelValue)) {\n\t              // model value is an array, so just replace\n\t              // the active items directly\n\t              bsCollapseCtrl.$setActive(modelValue);\n\t            }\n\t            else {\n\t              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\t\n\t              if (angular.isArray(activeIndexes)) {\n\t                // we have an array of selected indexes\n\t                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n\t                  // item with modelValue index is not active\n\t                  bsCollapseCtrl.$setActive(modelValue * 1);\n\t                }\n\t              }\n\t              else if (activeIndexes !== modelValue * 1) {\n\t                bsCollapseCtrl.$setActive(modelValue * 1);\n\t              }\n\t            }\n\t            return modelValue;\n\t          });\n\t\n\t        }\n\t\n\t      }\n\t    };\n\t\n\t  }])\n\t\n\t  .directive('bsCollapseToggle', function() {\n\t\n\t    return {\n\t      require: ['^?ngModel', '^bsCollapse'],\n\t      link: function postLink(scope, element, attrs, controllers) {\n\t\n\t        var ngModelCtrl = controllers[0];\n\t        var bsCollapseCtrl = controllers[1];\n\t\n\t        // Add base attr\n\t        element.attr('data-toggle', 'collapse');\n\t\n\t        // Push pane to parent bsCollapse controller\n\t        bsCollapseCtrl.$registerToggle(element);\n\t\n\t        // remove toggle from collapse controller when toggle is destroyed\n\t        scope.$on('$destroy', function() {\n\t          bsCollapseCtrl.$unregisterToggle(element);\n\t        });\n\t\n\t        element.on('click', function() {\n\t          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\n\t          bsCollapseCtrl.$setActive(index * 1);\n\t          scope.$apply();\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  })\n\t\n\t  .directive('bsCollapseTarget', [\"$animate\", function($animate) {\n\t\n\t    return {\n\t      require: ['^?ngModel', '^bsCollapse'],\n\t      // scope: true,\n\t      link: function postLink(scope, element, attrs, controllers) {\n\t\n\t        var ngModelCtrl = controllers[0];\n\t        var bsCollapseCtrl = controllers[1];\n\t\n\t        // Add base class\n\t        element.addClass('collapse');\n\t\n\t        // Add animation class\n\t        if(bsCollapseCtrl.$options.animation) {\n\t          element.addClass(bsCollapseCtrl.$options.animation);\n\t        }\n\t\n\t        // Push pane to parent bsCollapse controller\n\t        bsCollapseCtrl.$registerTarget(element);\n\t\n\t        // remove pane target from collapse controller when target is destroyed\n\t        scope.$on('$destroy', function() {\n\t          bsCollapseCtrl.$unregisterTarget(element);\n\t        });\n\t\n\t        function render() {\n\t          var index = bsCollapseCtrl.$targets.indexOf(element);\n\t          var active = bsCollapseCtrl.$activeIndexes();\n\t          var action = 'removeClass';\n\t          if (angular.isArray(active)) {\n\t            if (active.indexOf(index) !== -1) {\n\t              action = 'addClass';\n\t            }\n\t          }\n\t          else if (index === active) {\n\t            action = 'addClass';\n\t          }\n\t\n\t          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n\t        }\n\t\n\t        bsCollapseCtrl.$viewChangeListeners.push(function() {\n\t          render();\n\t        });\n\t        render();\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: datepicker.js\n\tangular.module('mgcrea.ngStrap.datepicker', [\n\t  'mgcrea.ngStrap.helpers.dateParser',\n\t  'mgcrea.ngStrap.helpers.dateFormatter',\n\t  'mgcrea.ngStrap.tooltip'])\n\t\n\t  .provider('$datepicker', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      prefixClass: 'datepicker',\n\t      placement: 'bottom-left',\n\t      template: 'datepicker/datepicker.tpl.html',\n\t      trigger: 'focus',\n\t      container: false,\n\t      keyboard: true,\n\t      html: false,\n\t      delay: 0,\n\t      // lang: $locale.id,\n\t      useNative: false,\n\t      dateType: 'date',\n\t      dateFormat: 'shortDate',\n\t      modelDateFormat: null,\n\t      dayFormat: 'dd',\n\t      monthFormat: 'MMM',\n\t      yearFormat: 'yyyy',\n\t      monthTitleFormat: 'MMMM yyyy',\n\t      yearTitleFormat: 'yyyy',\n\t      strictFormat: false,\n\t      autoclose: false,\n\t      minDate: -Infinity,\n\t      maxDate: +Infinity,\n\t      startView: 0,\n\t      minView: 0,\n\t      startWeek: 0,\n\t      daysOfWeekDisabled: '',\n\t      iconLeft: 'glyphicon glyphicon-chevron-left',\n\t      iconRight: 'glyphicon glyphicon-chevron-right'\n\t    };\n\t\n\t    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"$sce\", \"$dateFormatter\", \"datepickerViews\", \"$tooltip\", \"$timeout\", function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\t\n\t      var bodyEl = angular.element($window.document.body);\n\t      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\t      var isTouch = ('createTouch' in $window.document) && isNative;\n\t      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\t\n\t      function DatepickerFactory(element, controller, config) {\n\t\n\t        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n\t        var parentScope = config.scope;\n\t        var options = $datepicker.$options;\n\t        var scope = $datepicker.$scope;\n\t        if(options.startView) options.startView -= options.minView;\n\t\n\t        // View vars\n\t\n\t        var pickerViews = datepickerViews($datepicker);\n\t        $datepicker.$views = pickerViews.views;\n\t        var viewDate = pickerViews.viewDate;\n\t        scope.$mode = options.startView;\n\t        scope.$iconLeft = options.iconLeft;\n\t        scope.$iconRight = options.iconRight;\n\t        var $picker = $datepicker.$views[scope.$mode];\n\t\n\t        // Scope methods\n\t\n\t        scope.$select = function(date) {\n\t          $datepicker.select(date);\n\t        };\n\t        scope.$selectPane = function(value) {\n\t          $datepicker.$selectPane(value);\n\t        };\n\t        scope.$toggleMode = function() {\n\t          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n\t        };\n\t\n\t        // Public methods\n\t\n\t        $datepicker.update = function(date) {\n\t          // console.warn('$datepicker.update() newValue=%o', date);\n\t          if(angular.isDate(date) && !isNaN(date.getTime())) {\n\t            $datepicker.$date = date;\n\t            $picker.update.call($picker, date);\n\t          }\n\t          // Build only if pristine\n\t          $datepicker.$build(true);\n\t        };\n\t\n\t        $datepicker.updateDisabledDates = function(dateRanges) {\n\t          options.disabledDateRanges = dateRanges;\n\t          for(var i = 0, l = scope.rows.length; i < l; i++) {\n\t            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n\t          }\n\t        };\n\t\n\t        $datepicker.select = function(date, keep) {\n\t          // console.warn('$datepicker.select', date, scope.$mode);\n\t          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n\t          if(!scope.$mode || keep) {\n\t            controller.$setViewValue(angular.copy(date));\n\t            controller.$render();\n\t            if(options.autoclose && !keep) {\n\t              $timeout(function() { $datepicker.hide(true); });\n\t            }\n\t          } else {\n\t            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n\t            $datepicker.setMode(scope.$mode - 1);\n\t            $datepicker.$build();\n\t          }\n\t        };\n\t\n\t        $datepicker.setMode = function(mode) {\n\t          // console.warn('$datepicker.setMode', mode);\n\t          scope.$mode = mode;\n\t          $picker = $datepicker.$views[scope.$mode];\n\t          $datepicker.$build();\n\t        };\n\t\n\t        // Protected methods\n\t\n\t        $datepicker.$build = function(pristine) {\n\t          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n\t          if(pristine === true && $picker.built) return;\n\t          if(pristine === false && !$picker.built) return;\n\t          $picker.build.call($picker);\n\t        };\n\t\n\t        $datepicker.$updateSelected = function() {\n\t          for(var i = 0, l = scope.rows.length; i < l; i++) {\n\t            angular.forEach(scope.rows[i], updateSelected);\n\t          }\n\t        };\n\t\n\t        $datepicker.$isSelected = function(date) {\n\t          return $picker.isSelected(date);\n\t        };\n\t\n\t        $datepicker.$setDisabledEl = function(el) {\n\t          el.disabled = $picker.isDisabled(el.date);\n\t        };\n\t\n\t        $datepicker.$selectPane = function(value) {\n\t          var steps = $picker.steps;\n\t          // set targetDate to first day of month to avoid problems with\n\t          // date values rollover. This assumes the viewDate does not\n\t          // depend on the day of the month\n\t          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n\t          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n\t          $datepicker.$build();\n\t        };\n\t\n\t        $datepicker.$onMouseDown = function(evt) {\n\t          // Prevent blur on mousedown on .dropdown-menu\n\t          evt.preventDefault();\n\t          evt.stopPropagation();\n\t          // Emulate click for mobile devices\n\t          if(isTouch) {\n\t            var targetEl = angular.element(evt.target);\n\t            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n\t              targetEl = targetEl.parent();\n\t            }\n\t            targetEl.triggerHandler('click');\n\t          }\n\t        };\n\t\n\t        $datepicker.$onKeyDown = function(evt) {\n\t          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n\t          evt.preventDefault();\n\t          evt.stopPropagation();\n\t\n\t          if(evt.keyCode === 13) {\n\t            if(!scope.$mode) {\n\t              return $datepicker.hide(true);\n\t            } else {\n\t              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n\t            }\n\t          }\n\t\n\t          // Navigate with keyboard\n\t          $picker.onKeyDown(evt);\n\t          parentScope.$digest();\n\t        };\n\t\n\t        // Private\n\t\n\t        function updateSelected(el) {\n\t          el.selected = $datepicker.$isSelected(el.date);\n\t        }\n\t\n\t        function focusElement() {\n\t          element[0].focus();\n\t        }\n\t\n\t        // Overrides\n\t\n\t        var _init = $datepicker.init;\n\t        $datepicker.init = function() {\n\t          if(isNative && options.useNative) {\n\t            element.prop('type', 'date');\n\t            element.css('-webkit-appearance', 'textfield');\n\t            return;\n\t          } else if(isTouch) {\n\t            element.prop('type', 'text');\n\t            element.attr('readonly', 'true');\n\t            element.on('click', focusElement);\n\t          }\n\t          _init();\n\t        };\n\t\n\t        var _destroy = $datepicker.destroy;\n\t        $datepicker.destroy = function() {\n\t          if(isNative && options.useNative) {\n\t            element.off('click', focusElement);\n\t          }\n\t          _destroy();\n\t        };\n\t\n\t        var _show = $datepicker.show;\n\t        $datepicker.show = function() {\n\t          _show();\n\t          // use timeout to hookup the events to prevent\n\t          // event bubbling from being processed imediately.\n\t          $timeout(function() {\n\t            // if $datepicker is no longer showing, don't setup events\n\t            if(!$datepicker.$isShown) return;\n\t            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\t            if(options.keyboard) {\n\t              element.on('keydown', $datepicker.$onKeyDown);\n\t            }\n\t          }, 0, false);\n\t        };\n\t\n\t        var _hide = $datepicker.hide;\n\t        $datepicker.hide = function(blur) {\n\t          if(!$datepicker.$isShown) return;\n\t          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\t          if(options.keyboard) {\n\t            element.off('keydown', $datepicker.$onKeyDown);\n\t          }\n\t          _hide(blur);\n\t        };\n\t\n\t        return $datepicker;\n\t\n\t      }\n\t\n\t      DatepickerFactory.defaults = defaults;\n\t      return DatepickerFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsDatepicker', [\"$window\", \"$parse\", \"$q\", \"$dateFormatter\", \"$dateParser\", \"$datepicker\", function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\t\n\t    var defaults = $datepicker.defaults;\n\t    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      require: 'ngModel',\n\t      link: function postLink(scope, element, attr, controller) {\n\t\n\t        // Directive options\n\t        var options = {scope: scope, controller: controller};\n\t        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Visibility binding support\n\t        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n\t          if(!datepicker || !angular.isDefined(newValue)) return;\n\t          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n\t          newValue === true ? datepicker.show() : datepicker.hide();\n\t        });\n\t\n\t        // Initialize datepicker\n\t        var datepicker = $datepicker(element, controller, options);\n\t        options = datepicker.$options;\n\t        // Set expected iOS format\n\t        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\t\n\t        var lang = options.lang;\n\t\n\t        var formatDate = function(date, format) {\n\t          return $dateFormatter.formatDate(date, format, lang);\n\t        };\n\t\n\t        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\t\n\t        // Observe attributes for changes\n\t        angular.forEach(['minDate', 'maxDate'], function(key) {\n\t          // console.warn('attr.$observe(%s)', key, attr[key]);\n\t          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n\t            // console.warn('attr.$observe(%s)=%o', key, newValue);\n\t            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n\t            // Build only if dirty\n\t            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n\t            validateAgainstMinMaxDate(controller.$dateValue);\n\t          });\n\t        });\n\t\n\t        // Watch model for changes\n\t        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n\t          datepicker.update(controller.$dateValue);\n\t        }, true);\n\t\n\t        // Normalize undefined/null/empty array,\n\t        // so that we don't treat changing from undefined->null as a change.\n\t        function normalizeDateRanges(ranges) {\n\t          if (!ranges || !ranges.length) return null;\n\t          return ranges;\n\t        }\n\t\n\t        if (angular.isDefined(attr.disabledDates)) {\n\t          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n\t            disabledRanges = normalizeDateRanges(disabledRanges);\n\t            previousValue = normalizeDateRanges(previousValue);\n\t\n\t            if (disabledRanges) {\n\t              datepicker.updateDisabledDates(disabledRanges);\n\t            }\n\t          });\n\t        }\n\t\n\t        function validateAgainstMinMaxDate(parsedDate) {\n\t          if (!angular.isDate(parsedDate)) return;\n\t          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n\t          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n\t          var isValid = isMinValid && isMaxValid;\n\t          controller.$setValidity('date', isValid);\n\t          controller.$setValidity('min', isMinValid);\n\t          controller.$setValidity('max', isMaxValid);\n\t          // Only update the model when we have a valid date\n\t          if(isValid) controller.$dateValue = parsedDate;\n\t        }\n\t\n\t        // viewValue -> $parsers -> modelValue\n\t        controller.$parsers.unshift(function(viewValue) {\n\t          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n\t          // Null values should correctly reset the model value & validity\n\t          if(!viewValue) {\n\t            controller.$setValidity('date', true);\n\t            // BREAKING CHANGE:\n\t            // return null (not undefined) when input value is empty, so angularjs 1.3\n\t            // ngModelController can go ahead and run validators, like ngRequired\n\t            return null;\n\t          }\n\t          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n\t          if(!parsedDate || isNaN(parsedDate.getTime())) {\n\t            controller.$setValidity('date', false);\n\t            // return undefined, causes ngModelController to\n\t            // invalidate model value\n\t            return;\n\t          } else {\n\t            validateAgainstMinMaxDate(parsedDate);\n\t          }\n\t          if(options.dateType === 'string') {\n\t            return formatDate(parsedDate, options.modelDateFormat || options.dateFormat);\n\t          } else if(options.dateType === 'number') {\n\t            return controller.$dateValue.getTime();\n\t          } else if(options.dateType === 'unix') {\n\t            return controller.$dateValue.getTime() / 1000;\n\t          } else if(options.dateType === 'iso') {\n\t            return controller.$dateValue.toISOString();\n\t          } else {\n\t            return new Date(controller.$dateValue);\n\t          }\n\t        });\n\t\n\t        // modelValue -> $formatters -> viewValue\n\t        controller.$formatters.push(function(modelValue) {\n\t          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n\t          var date;\n\t          if(angular.isUndefined(modelValue) || modelValue === null) {\n\t            date = NaN;\n\t          } else if(angular.isDate(modelValue)) {\n\t            date = modelValue;\n\t          } else if(options.dateType === 'string') {\n\t            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n\t          } else if(options.dateType === 'unix') {\n\t            date = new Date(modelValue * 1000);\n\t          } else {\n\t            date = new Date(modelValue);\n\t          }\n\t          // Setup default value?\n\t          // if(isNaN(date.getTime())) {\n\t          //   var today = new Date();\n\t          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n\t          // }\n\t          controller.$dateValue = date;\n\t          return getDateFormattedString();\n\t        });\n\t\n\t        // viewValue -> element\n\t        controller.$render = function() {\n\t          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n\t          element.val(getDateFormattedString());\n\t        };\n\t\n\t        function getDateFormattedString() {\n\t          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n\t        }\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if(datepicker) datepicker.destroy();\n\t          options = null;\n\t          datepicker = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }])\n\t\n\t  .provider('datepickerViews', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      dayFormat: 'dd',\n\t      daySplit: 7\n\t    };\n\t\n\t    // Split array into smaller arrays\n\t    function split(arr, size) {\n\t      var arrays = [];\n\t      while(arr.length > 0) {\n\t        arrays.push(arr.splice(0, size));\n\t      }\n\t      return arrays;\n\t    }\n\t\n\t    // Modulus operator\n\t    function mod(n, m) {\n\t      return ((n % m) + m) % m;\n\t    }\n\t\n\t    this.$get = [\"$dateFormatter\", \"$dateParser\", \"$sce\", function($dateFormatter, $dateParser, $sce) {\n\t\n\t      return function(picker) {\n\t\n\t        var scope = picker.$scope;\n\t        var options = picker.$options;\n\t\n\t        var lang = options.lang;\n\t        var formatDate = function(date, format) {\n\t          return $dateFormatter.formatDate(date, format, lang);\n\t        };\n\t        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\t\n\t        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n\t        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n\t        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\t\n\t        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n\t        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\t        var timezoneOffset = startDate.getTimezoneOffset() * 6e4;\n\t\n\t        var views = [{\n\t            format: options.dayFormat,\n\t            split: 7,\n\t            steps: { month: 1 },\n\t            update: function(date, force) {\n\t              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n\t                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n\t                picker.$build();\n\t              } else if(date.getDate() !== viewDate.date) {\n\t                viewDate.date = picker.$date.getDate();\n\t                picker.$updateSelected();\n\t              }\n\t            },\n\t            build: function() {\n\t              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n\t              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n\t              var today = new Date().toDateString();\n\t              // Handle daylight time switch\n\t              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n\t              var days = [], day;\n\t              for(var i = 0; i < 42; i++) { // < 7 * 6\n\t                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n\t                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n\t              }\n\t              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n\t              scope.showLabels = true;\n\t              scope.labels = weekDaysLabelsHtml;\n\t              scope.rows = split(days, this.split);\n\t              this.built = true;\n\t            },\n\t            isSelected: function(date) {\n\t              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n\t            },\n\t            isDisabled: function(date) {\n\t              var time = date.getTime();\n\t\n\t              // Disabled because of min/max date.\n\t              if (time < options.minDate || time > options.maxDate) return true;\n\t\n\t              // Disabled due to being a disabled day of the week\n\t              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\t\n\t              // Disabled because of disabled date range.\n\t              if (options.disabledDateRanges) {\n\t                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n\t                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n\t                    return true;\n\t                  }\n\t                }\n\t              }\n\t\n\t              return false;\n\t            },\n\t            onKeyDown: function(evt) {\n\t              if (!picker.$date) {\n\t                return;\n\t              }\n\t              var actualTime = picker.$date.getTime();\n\t              var newDate;\n\t\n\t              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n\t              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n\t              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n\t              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\t\n\t              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n\t            }\n\t          }, {\n\t            name: 'month',\n\t            format: options.monthFormat,\n\t            split: 4,\n\t            steps: { year: 1 },\n\t            update: function(date, force) {\n\t              if(!this.built || date.getFullYear() !== viewDate.year) {\n\t                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n\t                picker.$build();\n\t              } else if(date.getMonth() !== viewDate.month) {\n\t                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n\t                picker.$updateSelected();\n\t              }\n\t            },\n\t            build: function() {\n\t              var firstMonth = new Date(viewDate.year, 0, 1);\n\t              var months = [], month;\n\t              for (var i = 0; i < 12; i++) {\n\t                month = new Date(viewDate.year, i, 1);\n\t                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n\t              }\n\t              scope.title = formatDate(month, options.yearTitleFormat);\n\t              scope.showLabels = false;\n\t              scope.rows = split(months, this.split);\n\t              this.built = true;\n\t            },\n\t            isSelected: function(date) {\n\t              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n\t            },\n\t            isDisabled: function(date) {\n\t              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\t              return lastDate < options.minDate || date.getTime() > options.maxDate;\n\t            },\n\t            onKeyDown: function(evt) {\n\t              if (!picker.$date) {\n\t                return;\n\t              }\n\t              var actualMonth = picker.$date.getMonth();\n\t              var newDate = new Date(picker.$date);\n\t\n\t              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n\t              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n\t              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n\t              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\t\n\t              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n\t            }\n\t          }, {\n\t            name: 'year',\n\t            format: options.yearFormat,\n\t            split: 4,\n\t            steps: { year: 12 },\n\t            update: function(date, force) {\n\t              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n\t                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n\t                picker.$build();\n\t              } else if(date.getFullYear() !== viewDate.year) {\n\t                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n\t                picker.$updateSelected();\n\t              }\n\t            },\n\t            build: function() {\n\t              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n\t              var years = [], year;\n\t              for (var i = 0; i < 12; i++) {\n\t                year = new Date(firstYear + i, 0, 1);\n\t                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n\t              }\n\t              scope.title = years[0].label + '-' + years[years.length - 1].label;\n\t              scope.showLabels = false;\n\t              scope.rows = split(years, this.split);\n\t              this.built = true;\n\t            },\n\t            isSelected: function(date) {\n\t              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n\t            },\n\t            isDisabled: function(date) {\n\t              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n\t              return lastDate < options.minDate || date.getTime() > options.maxDate;\n\t            },\n\t            onKeyDown: function(evt) {\n\t              if (!picker.$date) {\n\t                return;\n\t              }\n\t              var actualYear = picker.$date.getFullYear(),\n\t                  newDate = new Date(picker.$date);\n\t\n\t              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\n\t              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\n\t              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\n\t              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\t\n\t              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n\t            }\n\t          }];\n\t\n\t        return {\n\t          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n\t          viewDate: viewDate\n\t        };\n\t\n\t      };\n\t\n\t    }];\n\t\n\t  });\n\t\n\t// Source: dropdown.js\n\tangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\t\n\t  .provider('$dropdown', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      prefixClass: 'dropdown',\n\t      placement: 'bottom-left',\n\t      template: 'dropdown/dropdown.tpl.html',\n\t      trigger: 'click',\n\t      container: false,\n\t      keyboard: true,\n\t      html: false,\n\t      delay: 0\n\t    };\n\t\n\t    this.$get = [\"$window\", \"$rootScope\", \"$tooltip\", \"$timeout\", function($window, $rootScope, $tooltip, $timeout) {\n\t\n\t      var bodyEl = angular.element($window.document.body);\n\t      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\t\n\t      function DropdownFactory(element, config) {\n\t\n\t        var $dropdown = {};\n\t\n\t        // Common vars\n\t        var options = angular.extend({}, defaults, config);\n\t        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\t\n\t        $dropdown = $tooltip(element, options);\n\t        var parentEl = element.parent();\n\t\n\t        // Protected methods\n\t\n\t        $dropdown.$onKeyDown = function(evt) {\n\t          if (!/(38|40)/.test(evt.keyCode)) return;\n\t          evt.preventDefault();\n\t          evt.stopPropagation();\n\t\n\t          // Retrieve focused index\n\t          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n\t          if(!items.length) return;\n\t          var index;\n\t          angular.forEach(items, function(el, i) {\n\t            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n\t          });\n\t\n\t          // Navigate with keyboard\n\t          if(evt.keyCode === 38 && index > 0) index--;\n\t          else if(evt.keyCode === 40 && index < items.length - 1) index++;\n\t          else if(angular.isUndefined(index)) index = 0;\n\t          items.eq(index)[0].focus();\n\t\n\t        };\n\t\n\t        // Overrides\n\t\n\t        var show = $dropdown.show;\n\t        $dropdown.show = function() {\n\t          show();\n\t          // use timeout to hookup the events to prevent\n\t          // event bubbling from being processed imediately.\n\t          $timeout(function() {\n\t            options.keyboard && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n\t            bodyEl.on('click', onBodyClick);\n\t          }, 0, false);\n\t          parentEl.hasClass('dropdown') && parentEl.addClass('open');\n\t        };\n\t\n\t        var hide = $dropdown.hide;\n\t        $dropdown.hide = function() {\n\t          if(!$dropdown.$isShown) return;\n\t          options.keyboard && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n\t          bodyEl.off('click', onBodyClick);\n\t          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\n\t          hide();\n\t        };\n\t\n\t        var destroy = $dropdown.destroy;\n\t        $dropdown.destroy = function() {\n\t          bodyEl.off('click', onBodyClick);\n\t          destroy();\n\t        };\n\t\n\t        // Private functions\n\t\n\t        function onBodyClick(evt) {\n\t          if(evt.target === element[0]) return;\n\t          return evt.target !== element[0] && $dropdown.hide();\n\t        }\n\t\n\t        return $dropdown;\n\t\n\t      }\n\t\n\t      return DropdownFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsDropdown', [\"$window\", \"$sce\", \"$dropdown\", function($window, $sce, $dropdown) {\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      scope: true,\n\t      link: function postLink(scope, element, attr, transclusion) {\n\t\n\t        // Directive options\n\t        var options = {scope: scope};\n\t        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'id'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Support scope as an object\n\t        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\n\t          scope.content = newValue;\n\t        }, true);\n\t\n\t        // Visibility binding support\n\t        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n\t          if(!dropdown || !angular.isDefined(newValue)) return;\n\t          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n\t          newValue === true ? dropdown.show() : dropdown.hide();\n\t        });\n\t\n\t        // Initialize dropdown\n\t        var dropdown = $dropdown(element, options);\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if (dropdown) dropdown.destroy();\n\t          options = null;\n\t          dropdown = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: date-formatter.js\n\tangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\t\n\t  .service('$dateFormatter', [\"$locale\", \"dateFilter\", function($locale, dateFilter) {\n\t\n\t    // The unused `lang` arguments are on purpose. The default implementation does not\n\t    // use them and it always uses the locale loaded into the `$locale` service.\n\t    // Custom implementations might use it, thus allowing different directives to\n\t    // have different languages.\n\t\n\t    this.getDefaultLocale = function() {\n\t      return $locale.id;\n\t    };\n\t\n\t    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n\t    // Return either the corresponding date format or the given date format.\n\t    this.getDatetimeFormat = function(format, lang) {\n\t      return $locale.DATETIME_FORMATS[format] || format;\n\t    };\n\t\n\t    this.weekdaysShort = function(lang) {\n\t      return $locale.DATETIME_FORMATS.SHORTDAY;\n\t    };\n\t\n\t    function splitTimeFormat(format) {\n\t      return /(h+)([:\\.])?(m+)[ ]?(a?)/i.exec(format).slice(1);\n\t    }\n\t\n\t    // h:mm a => h\n\t    this.hoursFormat = function(timeFormat) {\n\t      return splitTimeFormat(timeFormat)[0];\n\t    };\n\t\n\t    // h:mm a => mm\n\t    this.minutesFormat = function(timeFormat) {\n\t      return splitTimeFormat(timeFormat)[2];\n\t    };\n\t\n\t    // h:mm a => :\n\t    this.timeSeparator = function(timeFormat) {\n\t      return splitTimeFormat(timeFormat)[1];\n\t    };\n\t\n\t    // h:mm a => true, H.mm => false\n\t    this.showAM = function(timeFormat) {\n\t      return !!splitTimeFormat(timeFormat)[3];\n\t    };\n\t\n\t    this.formatDate = function(date, format, lang){\n\t      return dateFilter(date, format);\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: date-parser.js\n\tangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\t\n\t.provider('$dateParser', [\"$localeProvider\", function($localeProvider) {\n\t\n\t  // define a custom ParseDate object to use instead of native Date\n\t  // to avoid date values wrapping when setting date component values\n\t  function ParseDate() {\n\t    this.year = 1970;\n\t    this.month = 0;\n\t    this.day = 1;\n\t    this.hours = 0;\n\t    this.minutes = 0;\n\t    this.seconds = 0;\n\t    this.milliseconds = 0;\n\t  }\n\t\n\t  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n\t  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n\t  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n\t  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n\t  ParseDate.prototype.getHours = function() { return this.hours; };\n\t  ParseDate.prototype.setDate = function(value) { this.day = value; };\n\t  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n\t  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n\t  ParseDate.prototype.fromDate = function(value) {\n\t    this.year = value.getFullYear();\n\t    this.month = value.getMonth();\n\t    this.day = value.getDate();\n\t    this.hours = value.getHours();\n\t    this.minutes = value.getMinutes();\n\t    this.seconds = value.getSeconds();\n\t    this.milliseconds = value.getMilliseconds();\n\t    return this;\n\t  };\n\t\n\t  ParseDate.prototype.toDate = function() {\n\t    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n\t  };\n\t\n\t  var proto = ParseDate.prototype;\n\t\n\t  function noop() {\n\t  }\n\t\n\t  function isNumeric(n) {\n\t    return !isNaN(parseFloat(n)) && isFinite(n);\n\t  }\n\t\n\t  function indexOfCaseInsensitive(array, value) {\n\t    var len = array.length, str=value.toString().toLowerCase();\n\t    for (var i=0; i<len; i++) {\n\t      if (array[i].toLowerCase() === str) { return i; }\n\t    }\n\t    return -1; // Return -1 per the \"Array.indexOf()\" method.\n\t  }\n\t\n\t  var defaults = this.defaults = {\n\t    format: 'shortDate',\n\t    strict: false\n\t  };\n\t\n\t  this.$get = [\"$locale\", \"dateFilter\", function($locale, dateFilter) {\n\t\n\t    var DateParserFactory = function(config) {\n\t\n\t      var options = angular.extend({}, defaults, config);\n\t\n\t      var $dateParser = {};\n\t\n\t      var regExpMap = {\n\t        'sss'   : '[0-9]{3}',\n\t        'ss'    : '[0-5][0-9]',\n\t        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n\t        'mm'    : '[0-5][0-9]',\n\t        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n\t        'HH'    : '[01][0-9]|2[0-3]',\n\t        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n\t        'hh'    : '[0][1-9]|[1][012]',\n\t        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n\t        'a'     : 'AM|PM',\n\t        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n\t        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n\t        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n\t        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n\t        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n\t        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n\t        'MM'    : '0[1-9]|1[012]',\n\t        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n\t        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n\t        'yy'    : '[0-9]{2}',\n\t        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n\t      };\n\t\n\t      var setFnMap = {\n\t        'sss'   : proto.setMilliseconds,\n\t        'ss'    : proto.setSeconds,\n\t        's'     : proto.setSeconds,\n\t        'mm'    : proto.setMinutes,\n\t        'm'     : proto.setMinutes,\n\t        'HH'    : proto.setHours,\n\t        'H'     : proto.setHours,\n\t        'hh'    : proto.setHours,\n\t        'h'     : proto.setHours,\n\t        'EEEE'  : noop,\n\t        'EEE'   : noop,\n\t        'dd'    : proto.setDate,\n\t        'd'     : proto.setDate,\n\t        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n\t        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n\t        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n\t        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n\t        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n\t        'yyyy'  : proto.setFullYear,\n\t        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n\t        'y'     : proto.setFullYear\n\t      };\n\t\n\t      var regex, setMap;\n\t\n\t      $dateParser.init = function() {\n\t        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n\t        regex = regExpForFormat($dateParser.$format);\n\t        setMap = setMapForFormat($dateParser.$format);\n\t      };\n\t\n\t      $dateParser.isValid = function(date) {\n\t        if(angular.isDate(date)) return !isNaN(date.getTime());\n\t        return regex.test(date);\n\t      };\n\t\n\t      $dateParser.parse = function(value, baseDate, format) {\n\t        // check for date format special names\n\t        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n\t        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format);\n\t        var formatRegex = format ? regExpForFormat(format) : regex;\n\t        var formatSetMap = format ? setMapForFormat(format) : setMap;\n\t        var matches = formatRegex.exec(value);\n\t        if(!matches) return false;\n\t        // use custom ParseDate object to set parsed values\n\t        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n\t        for(var i = 0; i < matches.length - 1; i++) {\n\t          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n\t        }\n\t        // convert back to native Date object\n\t        var newDate = date.toDate();\n\t\n\t        // check new native Date object for day values overflow\n\t        if (parseInt(date.day, 10) !== newDate.getDate()) {\n\t          return false;\n\t        }\n\t\n\t        return newDate;\n\t      };\n\t\n\t      $dateParser.getDateForAttribute = function(key, value) {\n\t        var date;\n\t\n\t        if(value === 'today') {\n\t          var today = new Date();\n\t          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n\t        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n\t          date = new Date(value.substr(1, value.length - 2));\n\t        } else if(isNumeric(value)) {\n\t          date = new Date(parseInt(value, 10));\n\t        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n\t          date = key === 'minDate' ? -Infinity : +Infinity;\n\t        } else {\n\t          date = new Date(value);\n\t        }\n\t\n\t        return date;\n\t      };\n\t\n\t      $dateParser.getTimeForAttribute = function(key, value) {\n\t        var time;\n\t\n\t        if(value === 'now') {\n\t          time = new Date().setFullYear(1970, 0, 1);\n\t        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n\t          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n\t        } else if(isNumeric(value)) {\n\t          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n\t        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n\t          time = key === 'minTime' ? -Infinity : +Infinity;\n\t        } else {\n\t          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n\t        }\n\t\n\t        return time;\n\t      };\n\t\n\t      /* Handle switch to/from daylight saving.\n\t      * Hours may be non-zero on daylight saving cut-over:\n\t      * > 12 when midnight changeover, but then cannot generate\n\t      * midnight datetime, so jump to 1AM, otherwise reset.\n\t      * @param  date  (Date) the date to check\n\t      * @return  (Date) the corrected date\n\t      *\n\t      * __ copied from jquery ui datepicker __\n\t      */\n\t      $dateParser.daylightSavingAdjust = function(date) {\n\t        if (!date) {\n\t          return null;\n\t        }\n\t        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n\t        return date;\n\t      };\n\t\n\t      // Private functions\n\t\n\t      function setMapForFormat(format) {\n\t        var keys = Object.keys(setFnMap), i;\n\t        var map = [], sortedMap = [];\n\t        // Map to setFn\n\t        var clonedFormat = format;\n\t        for(i = 0; i < keys.length; i++) {\n\t          if(format.split(keys[i]).length > 1) {\n\t            var index = clonedFormat.search(keys[i]);\n\t            format = format.split(keys[i]).join('');\n\t            if(setFnMap[keys[i]]) {\n\t              map[index] = setFnMap[keys[i]];\n\t            }\n\t          }\n\t        }\n\t        // Sort result map\n\t        angular.forEach(map, function(v) {\n\t          // conditional required since angular.forEach broke around v1.2.21\n\t          // related pr: https://github.com/angular/angular.js/pull/8525\n\t          if(v) sortedMap.push(v);\n\t        });\n\t        return sortedMap;\n\t      }\n\t\n\t      function escapeReservedSymbols(text) {\n\t        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\n\t      }\n\t\n\t      function regExpForFormat(format) {\n\t        var keys = Object.keys(regExpMap), i;\n\t\n\t        var re = format;\n\t        // Abstract replaces to avoid collisions\n\t        for(i = 0; i < keys.length; i++) {\n\t          re = re.split(keys[i]).join('${' + i + '}');\n\t        }\n\t        // Replace abstracted values\n\t        for(i = 0; i < keys.length; i++) {\n\t          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\n\t        }\n\t        format = escapeReservedSymbols(format);\n\t\n\t        return new RegExp('^' + re + '$', ['i']);\n\t      }\n\t\n\t      $dateParser.init();\n\t      return $dateParser;\n\t\n\t    };\n\t\n\t    return DateParserFactory;\n\t\n\t  }];\n\t\n\t}]);\n\t\n\t// Source: debounce.js\n\tangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\t\n\t// @source jashkenas/underscore\n\t// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n\t.factory('debounce', [\"$timeout\", function($timeout) {\n\t  return function(func, wait, immediate) {\n\t    var timeout = null;\n\t    return function() {\n\t      var context = this,\n\t        args = arguments,\n\t        callNow = immediate && !timeout;\n\t      if(timeout) {\n\t        $timeout.cancel(timeout);\n\t      }\n\t      timeout = $timeout(function later() {\n\t        timeout = null;\n\t        if(!immediate) {\n\t          func.apply(context, args);\n\t        }\n\t      }, wait, false);\n\t      if(callNow) {\n\t        func.apply(context, args);\n\t      }\n\t      return timeout;\n\t    };\n\t  };\n\t}])\n\t\n\t\n\t// @source jashkenas/underscore\n\t// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n\t.factory('throttle', [\"$timeout\", function($timeout) {\n\t  return function(func, wait, options) {\n\t    var timeout = null;\n\t    options || (options = {});\n\t    return function() {\n\t      var context = this,\n\t        args = arguments;\n\t      if(!timeout) {\n\t        if(options.leading !== false) {\n\t          func.apply(context, args);\n\t        }\n\t        timeout = $timeout(function later() {\n\t          timeout = null;\n\t          if(options.trailing !== false) {\n\t            func.apply(context, args);\n\t          }\n\t        }, wait, false);\n\t      }\n\t    };\n\t  };\n\t}]);\n\t\n\t// Source: dimensions.js\n\tangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\t\n\t  .factory('dimensions', [\"$document\", \"$window\", function($document, $window) {\n\t\n\t    var jqLite = angular.element;\n\t    var fn = {};\n\t\n\t    /**\n\t     * Test the element nodeName\n\t     * @param element\n\t     * @param name\n\t     */\n\t    var nodeName = fn.nodeName = function(element, name) {\n\t      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n\t    };\n\t\n\t    /**\n\t     * Returns the element computed style\n\t     * @param element\n\t     * @param prop\n\t     * @param extra\n\t     */\n\t    fn.css = function(element, prop, extra) {\n\t      var value;\n\t      if (element.currentStyle) { //IE\n\t        value = element.currentStyle[prop];\n\t      } else if (window.getComputedStyle) {\n\t        value = window.getComputedStyle(element)[prop];\n\t      } else {\n\t        value = element.style[prop];\n\t      }\n\t      return extra === true ? parseFloat(value) || 0 : value;\n\t    };\n\t\n\t    /**\n\t     * Provides read-only equivalent of jQuery's offset function:\n\t     * @required-by bootstrap-tooltip, bootstrap-affix\n\t     * @url http://api.jquery.com/offset/\n\t     * @param element\n\t     */\n\t    fn.offset = function(element) {\n\t      var boxRect = element.getBoundingClientRect();\n\t      var docElement = element.ownerDocument;\n\t      return {\n\t        width: boxRect.width || element.offsetWidth,\n\t        height: boxRect.height || element.offsetHeight,\n\t        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n\t        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n\t      };\n\t    };\n\t\n\t    /**\n\t     * Provides read-only equivalent of jQuery's position function\n\t     * @required-by bootstrap-tooltip, bootstrap-affix\n\t     * @url http://api.jquery.com/offset/\n\t     * @param element\n\t     */\n\t    fn.position = function(element) {\n\t\n\t      var offsetParentRect = {top: 0, left: 0},\n\t          offsetParentElement,\n\t          offset;\n\t\n\t      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n\t      if (fn.css(element, 'position') === 'fixed') {\n\t\n\t        // We assume that getBoundingClientRect is available when computed position is fixed\n\t        offset = element.getBoundingClientRect();\n\t\n\t      } else {\n\t\n\t        // Get *real* offsetParentElement\n\t        offsetParentElement = offsetParent(element);\n\t\n\t        // Get correct offsets\n\t        offset = fn.offset(element);\n\t        if (!nodeName(offsetParentElement, 'html')) {\n\t          offsetParentRect = fn.offset(offsetParentElement);\n\t        }\n\t\n\t        // Add offsetParent borders\n\t        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\n\t        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\n\t      }\n\t\n\t      // Subtract parent offsets and element margins\n\t      return {\n\t        width: element.offsetWidth,\n\t        height: element.offsetHeight,\n\t        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n\t        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n\t      };\n\t\n\t    };\n\t\n\t    /**\n\t     * Returns the closest, non-statically positioned offsetParent of a given element\n\t     * @required-by fn.position\n\t     * @param element\n\t     */\n\t    var offsetParent = function offsetParentElement(element) {\n\t      var docElement = element.ownerDocument;\n\t      var offsetParent = element.offsetParent || docElement;\n\t      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\n\t      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n\t        offsetParent = offsetParent.offsetParent;\n\t      }\n\t      return offsetParent || docElement.documentElement;\n\t    };\n\t\n\t    /**\n\t     * Provides equivalent of jQuery's height function\n\t     * @required-by bootstrap-affix\n\t     * @url http://api.jquery.com/height/\n\t     * @param element\n\t     * @param outer\n\t     */\n\t    fn.height = function(element, outer) {\n\t      var value = element.offsetHeight;\n\t      if(outer) {\n\t        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n\t      } else {\n\t        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n\t      }\n\t      return value;\n\t    };\n\t\n\t    /**\n\t     * Provides equivalent of jQuery's width function\n\t     * @required-by bootstrap-affix\n\t     * @url http://api.jquery.com/width/\n\t     * @param element\n\t     * @param outer\n\t     */\n\t    fn.width = function(element, outer) {\n\t      var value = element.offsetWidth;\n\t      if(outer) {\n\t        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n\t      } else {\n\t        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n\t      }\n\t      return value;\n\t    };\n\t\n\t    return fn;\n\t\n\t  }]);\n\t\n\t// Source: parse-options.js\n\tangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\t\n\t  .provider('$parseOptions', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n\t    };\n\t\n\t    this.$get = [\"$parse\", \"$q\", function($parse, $q) {\n\t\n\t      function ParseOptionsFactory(attr, config) {\n\t\n\t        var $parseOptions = {};\n\t\n\t        // Common vars\n\t        var options = angular.extend({}, defaults, config);\n\t        $parseOptions.$values = [];\n\t\n\t        // Private vars\n\t        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\t\n\t        $parseOptions.init = function() {\n\t          $parseOptions.$match = match = attr.match(options.regexp);\n\t          displayFn = $parse(match[2] || match[1]),\n\t          valueName = match[4] || match[6],\n\t          keyName = match[5],\n\t          groupByFn = $parse(match[3] || ''),\n\t          valueFn = $parse(match[2] ? match[1] : valueName),\n\t          valuesFn = $parse(match[7]);\n\t        };\n\t\n\t        $parseOptions.valuesFn = function(scope, controller) {\n\t          return $q.when(valuesFn(scope, controller))\n\t          .then(function(values) {\n\t            $parseOptions.$values = values ? parseValues(values, scope) : {};\n\t            return $parseOptions.$values;\n\t          });\n\t        };\n\t\n\t        $parseOptions.displayValue = function(modelValue) {\n\t          var scope = {};\n\t          scope[valueName] = modelValue;\n\t          return displayFn(scope);\n\t        };\n\t\n\t        // Private functions\n\t\n\t        function parseValues(values, scope) {\n\t          return values.map(function(match, index) {\n\t            var locals = {}, label, value;\n\t            locals[valueName] = match;\n\t            label = displayFn(scope, locals);\n\t            value = valueFn(scope, locals);\n\t            return {label: label, value: value, index: index};\n\t          });\n\t        }\n\t\n\t        $parseOptions.init();\n\t        return $parseOptions;\n\t\n\t      }\n\t\n\t      return ParseOptionsFactory;\n\t\n\t    }];\n\t\n\t  });\n\t\n\t// Source: raf.js\n\t(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\n\t\n\t.factory('$$rAF', [\"$window\", \"$timeout\", function($window, $timeout) {\n\t\n\t  var requestAnimationFrame = $window.requestAnimationFrame ||\n\t                              $window.webkitRequestAnimationFrame ||\n\t                              $window.mozRequestAnimationFrame;\n\t\n\t  var cancelAnimationFrame = $window.cancelAnimationFrame ||\n\t                             $window.webkitCancelAnimationFrame ||\n\t                             $window.mozCancelAnimationFrame ||\n\t                             $window.webkitCancelRequestAnimationFrame;\n\t\n\t  var rafSupported = !!requestAnimationFrame;\n\t  var raf = rafSupported ?\n\t    function(fn) {\n\t      var id = requestAnimationFrame(fn);\n\t      return function() {\n\t        cancelAnimationFrame(id);\n\t      };\n\t    } :\n\t    function(fn) {\n\t      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n\t      return function() {\n\t        $timeout.cancel(timer);\n\t      };\n\t    };\n\t\n\t  raf.supported = rafSupported;\n\t\n\t  return raf;\n\t\n\t}]);\n\t\n\t// .factory('$$animateReflow', function($$rAF, $document) {\n\t\n\t//   var bodyEl = $document[0].body;\n\t\n\t//   return function(fn) {\n\t//     //the returned function acts as the cancellation function\n\t//     return $$rAF(function() {\n\t//       //the line below will force the browser to perform a repaint\n\t//       //so that all the animated elements within the animation frame\n\t//       //will be properly updated and drawn on screen. This is\n\t//       //required to perform multi-class CSS based animations with\n\t//       //Firefox. DO NOT REMOVE THIS LINE.\n\t//       var a = bodyEl.offsetWidth + 1;\n\t//       fn();\n\t//     });\n\t//   };\n\t\n\t// });\n\t\n\t// Source: modal.js\n\tangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.helpers.dimensions'])\n\t\n\t  .provider('$modal', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      backdropAnimation: 'am-fade',\n\t      prefixClass: 'modal',\n\t      prefixEvent: 'modal',\n\t      placement: 'top',\n\t      template: 'modal/modal.tpl.html',\n\t      contentTemplate: false,\n\t      container: false,\n\t      element: null,\n\t      backdrop: true,\n\t      keyboard: true,\n\t      html: false,\n\t      show: true\n\t    };\n\t\n\t    this.$get = [\"$window\", \"$rootScope\", \"$compile\", \"$q\", \"$templateCache\", \"$http\", \"$animate\", \"$timeout\", \"$sce\", \"dimensions\", function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $timeout, $sce, dimensions) {\n\t\n\t      var forEach = angular.forEach;\n\t      var trim = String.prototype.trim;\n\t      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\t      var bodyElement = angular.element($window.document.body);\n\t      var htmlReplaceRegExp = /ng-bind=\"/ig;\n\t\n\t      function ModalFactory(config) {\n\t\n\t        var $modal = {};\n\t\n\t        // Common vars\n\t        var options = $modal.$options = angular.extend({}, defaults, config);\n\t        $modal.$promise = fetchTemplate(options.template);\n\t        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\t        if(!options.element && !options.container) {\n\t          options.container = 'body';\n\t        }\n\t\n\t        // store $id to identify the triggering element in events\n\t        // give priority to options.id, otherwise, try to use\n\t        // element id if defined\n\t        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\t\n\t        // Support scope as string options\n\t        forEach(['title', 'content'], function(key) {\n\t          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n\t        });\n\t\n\t        // Provide scope helpers\n\t        scope.$hide = function() {\n\t          scope.$$postDigest(function() {\n\t            $modal.hide();\n\t          });\n\t        };\n\t        scope.$show = function() {\n\t          scope.$$postDigest(function() {\n\t            $modal.show();\n\t          });\n\t        };\n\t        scope.$toggle = function() {\n\t          scope.$$postDigest(function() {\n\t            $modal.toggle();\n\t          });\n\t        };\n\t        // Publish isShown as a protected var on scope\n\t        $modal.$isShown = scope.$isShown = false;\n\t\n\t        // Support contentTemplate option\n\t        if(options.contentTemplate) {\n\t          $modal.$promise = $modal.$promise.then(function(template) {\n\t            var templateEl = angular.element(template);\n\t            return fetchTemplate(options.contentTemplate)\n\t            .then(function(contentTemplate) {\n\t              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(contentTemplate);\n\t              // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n\t              if(!config.template) contentEl.next().remove();\n\t              return templateEl[0].outerHTML;\n\t            });\n\t          });\n\t        }\n\t\n\t        // Fetch, compile then initialize modal\n\t        var modalLinker, modalElement;\n\t        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n\t        $modal.$promise.then(function(template) {\n\t          if(angular.isObject(template)) template = template.data;\n\t          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\n\t          template = trim.apply(template);\n\t          modalLinker = $compile(template);\n\t          $modal.init();\n\t        });\n\t\n\t        $modal.init = function() {\n\t\n\t          // Options: show\n\t          if(options.show) {\n\t            scope.$$postDigest(function() {\n\t              $modal.show();\n\t            });\n\t          }\n\t\n\t        };\n\t\n\t        $modal.destroy = function() {\n\t\n\t          // Remove element\n\t          if(modalElement) {\n\t            modalElement.remove();\n\t            modalElement = null;\n\t          }\n\t          if(backdropElement) {\n\t            backdropElement.remove();\n\t            backdropElement = null;\n\t          }\n\t\n\t          // Destroy scope\n\t          scope.$destroy();\n\t\n\t        };\n\t\n\t        $modal.show = function() {\n\t          if($modal.$isShown) return;\n\t\n\t          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n\t            return;\n\t          }\n\t          var parent, after;\n\t          if(angular.isElement(options.container)) {\n\t            parent = options.container;\n\t            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n\t          } else {\n\t            if (options.container) {\n\t              parent = findElement(options.container);\n\t              after = parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n\t            } else {\n\t              parent = null;\n\t              after = options.element;\n\t            }\n\t          }\n\t\n\t          // Fetch a cloned element linked from template\n\t          modalElement = $modal.$element = modalLinker(scope, function(clonedElement, scope) {});\n\t\n\t          // Set the initial positioning.\n\t          modalElement.css({display: 'block'}).addClass(options.placement);\n\t\n\t          // Options: animation\n\t          if(options.animation) {\n\t            if(options.backdrop) {\n\t              backdropElement.addClass(options.backdropAnimation);\n\t            }\n\t            modalElement.addClass(options.animation);\n\t          }\n\t\n\t          if(options.backdrop) {\n\t            $animate.enter(backdropElement, bodyElement, null);\n\t          }\n\t          // Support v1.3+ $animate\n\t          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\n\t          var promise = $animate.enter(modalElement, parent, after, enterAnimateCallback);\n\t          if(promise && promise.then) promise.then(enterAnimateCallback);\n\t\n\t          $modal.$isShown = scope.$isShown = true;\n\t          safeDigest(scope);\n\t          // Focus once the enter-animation has started\n\t          // Weird PhantomJS bug hack\n\t          var el = modalElement[0];\n\t          requestAnimationFrame(function() {\n\t            el.focus();\n\t          });\n\t\n\t          bodyElement.addClass(options.prefixClass + '-open');\n\t          if(options.animation) {\n\t            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n\t          }\n\t\n\t          // Bind events\n\t          if(options.backdrop) {\n\t            modalElement.on('click', hideOnBackdropClick);\n\t            backdropElement.on('click', hideOnBackdropClick);\n\t            backdropElement.on('wheel', preventEventDefault);\n\t          }\n\t          if(options.keyboard) {\n\t            modalElement.on('keyup', $modal.$onKeyUp);\n\t          }\n\t        };\n\t\n\t        function enterAnimateCallback() {\n\t          scope.$emit(options.prefixEvent + '.show', $modal);\n\t        }\n\t\n\t        $modal.hide = function() {\n\t          if(!$modal.$isShown) return;\n\t\n\t          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n\t            return;\n\t          }\n\t          var promise = $animate.leave(modalElement, leaveAnimateCallback);\n\t          // Support v1.3+ $animate\n\t          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\n\t          if(promise && promise.then) promise.then(leaveAnimateCallback);\n\t\n\t          if(options.backdrop) {\n\t            $animate.leave(backdropElement);\n\t          }\n\t          $modal.$isShown = scope.$isShown = false;\n\t          safeDigest(scope);\n\t\n\t          // Unbind events\n\t          if(options.backdrop) {\n\t            modalElement.off('click', hideOnBackdropClick);\n\t            backdropElement.off('click', hideOnBackdropClick);\n\t            backdropElement.off('wheel', preventEventDefault);\n\t          }\n\t          if(options.keyboard) {\n\t            modalElement.off('keyup', $modal.$onKeyUp);\n\t          }\n\t        };\n\t\n\t        function leaveAnimateCallback() {\n\t          scope.$emit(options.prefixEvent + '.hide', $modal);\n\t          bodyElement.removeClass(options.prefixClass + '-open');\n\t          if(options.animation) {\n\t            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n\t          }\n\t        }\n\t\n\t        $modal.toggle = function() {\n\t\n\t          $modal.$isShown ? $modal.hide() : $modal.show();\n\t\n\t        };\n\t\n\t        $modal.focus = function() {\n\t          modalElement[0].focus();\n\t        };\n\t\n\t        // Protected methods\n\t\n\t        $modal.$onKeyUp = function(evt) {\n\t\n\t          if (evt.which === 27 && $modal.$isShown) {\n\t            $modal.hide();\n\t            evt.stopPropagation();\n\t          }\n\t\n\t        };\n\t\n\t        // Private methods\n\t\n\t        function hideOnBackdropClick(evt) {\n\t          if(evt.target !== evt.currentTarget) return;\n\t          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\n\t        }\n\t\n\t        function preventEventDefault(evt) {\n\t          evt.preventDefault();\n\t        }\n\t\n\t        return $modal;\n\t\n\t      }\n\t\n\t      // Helper functions\n\t\n\t      function safeDigest(scope) {\n\t        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n\t      }\n\t\n\t      function findElement(query, element) {\n\t        return angular.element((element || document).querySelectorAll(query));\n\t      }\n\t\n\t      var fetchPromises = {};\n\t      function fetchTemplate(template) {\n\t        if(fetchPromises[template]) return fetchPromises[template];\n\t        return (fetchPromises[template] = $q.when($templateCache.get(template) || $http.get(template))\n\t        .then(function(res) {\n\t          if(angular.isObject(res)) {\n\t            $templateCache.put(template, res.data);\n\t            return res.data;\n\t          }\n\t          return res;\n\t        }));\n\t      }\n\t\n\t      return ModalFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsModal', [\"$window\", \"$sce\", \"$modal\", function($window, $sce, $modal) {\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      scope: true,\n\t      link: function postLink(scope, element, attr, transclusion) {\n\t\n\t        // Directive options\n\t        var options = {scope: scope, element: element, show: false};\n\t        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Support scope as data-attrs\n\t        angular.forEach(['title', 'content'], function(key) {\n\t          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n\t            scope[key] = $sce.trustAsHtml(newValue);\n\t          });\n\t        });\n\t\n\t        // Support scope as an object\n\t        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\n\t          if(angular.isObject(newValue)) {\n\t            angular.extend(scope, newValue);\n\t          } else {\n\t            scope.content = newValue;\n\t          }\n\t        }, true);\n\t\n\t        // Initialize modal\n\t        var modal = $modal(options);\n\t\n\t        // Trigger\n\t        element.on(attr.trigger || 'click', modal.toggle);\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if (modal) modal.destroy();\n\t          options = null;\n\t          modal = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: navbar.js\n\tangular.module('mgcrea.ngStrap.navbar', [])\n\t\n\t  .provider('$navbar', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      activeClass: 'active',\n\t      routeAttr: 'data-match-route',\n\t      strict: false\n\t    };\n\t\n\t    this.$get = function() {\n\t      return {defaults: defaults};\n\t    };\n\t\n\t  })\n\t\n\t  .directive('bsNavbar', [\"$window\", \"$location\", \"$navbar\", function($window, $location, $navbar) {\n\t\n\t    var defaults = $navbar.defaults;\n\t\n\t    return {\n\t      restrict: 'A',\n\t      link: function postLink(scope, element, attr, controller) {\n\t\n\t        // Directive options\n\t        var options = angular.copy(defaults);\n\t        angular.forEach(Object.keys(defaults), function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Watch for the $location\n\t        scope.$watch(function() {\n\t\n\t          return $location.path();\n\t\n\t        }, function(newValue, oldValue) {\n\t\n\t          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\t\n\t          angular.forEach(liElements, function(li) {\n\t\n\t            var liElement = angular.element(li);\n\t            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n\t            if(options.strict) {\n\t              pattern = '^' + pattern + '$';\n\t            }\n\t            var regexp = new RegExp(pattern, ['i']);\n\t\n\t            if(regexp.test(newValue)) {\n\t              liElement.addClass(options.activeClass);\n\t            } else {\n\t              liElement.removeClass(options.activeClass);\n\t            }\n\t\n\t          });\n\t\n\t        });\n\t\n\t      }\n\t\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: popover.js\n\tangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\t\n\t  .provider('$popover', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      customClass: '',\n\t      container: false,\n\t      target: false,\n\t      placement: 'right',\n\t      template: 'popover/popover.tpl.html',\n\t      contentTemplate: false,\n\t      trigger: 'click',\n\t      keyboard: true,\n\t      html: false,\n\t      title: '',\n\t      content: '',\n\t      delay: 0,\n\t      autoClose: false\n\t    };\n\t\n\t    this.$get = [\"$tooltip\", function($tooltip) {\n\t\n\t      function PopoverFactory(element, config) {\n\t\n\t        // Common vars\n\t        var options = angular.extend({}, defaults, config);\n\t\n\t        var $popover = $tooltip(element, options);\n\t\n\t        // Support scope as string options [/*title, */content]\n\t        if(options.content) {\n\t          $popover.$scope.content = options.content;\n\t        }\n\t\n\t        return $popover;\n\t\n\t      }\n\t\n\t      return PopoverFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsPopover', [\"$window\", \"$sce\", \"$popover\", function($window, $sce, $popover) {\n\t\n\t    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      scope: true,\n\t      link: function postLink(scope, element, attr) {\n\t\n\t        // Directive options\n\t        var options = {scope: scope};\n\t        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'customClass', 'autoClose', 'id'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Support scope as data-attrs\n\t        angular.forEach(['title', 'content'], function(key) {\n\t          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n\t            scope[key] = $sce.trustAsHtml(newValue);\n\t            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n\t              popover && popover.$applyPlacement();\n\t            });\n\t          });\n\t        });\n\t\n\t        // Support scope as an object\n\t        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n\t          if(angular.isObject(newValue)) {\n\t            angular.extend(scope, newValue);\n\t          } else {\n\t            scope.content = newValue;\n\t          }\n\t          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n\t            popover && popover.$applyPlacement();\n\t          });\n\t        }, true);\n\t\n\t        // Visibility binding support\n\t        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n\t          if(!popover || !angular.isDefined(newValue)) return;\n\t          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n\t          newValue === true ? popover.show() : popover.hide();\n\t        });\n\t\n\t        // Initialize popover\n\t        var popover = $popover(element, options);\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if (popover) popover.destroy();\n\t          options = null;\n\t          popover = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: select.js\n\tangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\t\n\t  .provider('$select', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      prefixClass: 'select',\n\t      prefixEvent: '$select',\n\t      placement: 'bottom-left',\n\t      template: 'select/select.tpl.html',\n\t      trigger: 'focus',\n\t      container: false,\n\t      keyboard: true,\n\t      html: false,\n\t      delay: 0,\n\t      multiple: false,\n\t      allNoneButtons: false,\n\t      sort: true,\n\t      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n\t      placeholder: 'Choose among the following...',\n\t      allText: 'All',\n\t      noneText: 'None',\n\t      maxLength: 3,\n\t      maxLengthHtml: 'selected',\n\t      iconCheckmark: 'glyphicon glyphicon-ok'\n\t    };\n\t\n\t    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"$tooltip\", \"$timeout\", function($window, $document, $rootScope, $tooltip, $timeout) {\n\t\n\t      var bodyEl = angular.element($window.document.body);\n\t      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\t      var isTouch = ('createTouch' in $window.document) && isNative;\n\t\n\t      function SelectFactory(element, controller, config) {\n\t\n\t        var $select = {};\n\t\n\t        // Common vars\n\t        var options = angular.extend({}, defaults, config);\n\t\n\t        $select = $tooltip(element, options);\n\t        var scope = $select.$scope;\n\t\n\t        scope.$matches = [];\n\t        scope.$activeIndex = 0;\n\t        scope.$isMultiple = options.multiple;\n\t        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n\t        scope.$iconCheckmark = options.iconCheckmark;\n\t        scope.$allText = options.allText;\n\t        scope.$noneText = options.noneText;\n\t\n\t        scope.$activate = function(index) {\n\t          scope.$$postDigest(function() {\n\t            $select.activate(index);\n\t          });\n\t        };\n\t\n\t        scope.$select = function(index, evt) {\n\t          scope.$$postDigest(function() {\n\t            $select.select(index);\n\t          });\n\t        };\n\t\n\t        scope.$isVisible = function() {\n\t          return $select.$isVisible();\n\t        };\n\t\n\t        scope.$isActive = function(index) {\n\t          return $select.$isActive(index);\n\t        };\n\t\n\t        scope.$selectAll = function () {\n\t          for (var i = 0; i < scope.$matches.length; i++) {\n\t            if (!scope.$isActive(i)) {\n\t              scope.$select(i);\n\t            }\n\t          }\n\t        };\n\t\n\t        scope.$selectNone = function () {\n\t          for (var i = 0; i < scope.$matches.length; i++) {\n\t            if (scope.$isActive(i)) {\n\t              scope.$select(i);\n\t            }\n\t          }\n\t        };\n\t\n\t        // Public methods\n\t\n\t        $select.update = function(matches) {\n\t          scope.$matches = matches;\n\t          $select.$updateActiveIndex();\n\t        };\n\t\n\t        $select.activate = function(index) {\n\t          if(options.multiple) {\n\t            scope.$activeIndex.sort();\n\t            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n\t            if(options.sort) scope.$activeIndex.sort();\n\t          } else {\n\t            scope.$activeIndex = index;\n\t          }\n\t          return scope.$activeIndex;\n\t        };\n\t\n\t        $select.select = function(index) {\n\t          var value = scope.$matches[index].value;\n\t          scope.$apply(function() {\n\t            $select.activate(index);\n\t            if(options.multiple) {\n\t              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n\t                return scope.$matches[index].value;\n\t              }));\n\t            } else {\n\t              controller.$setViewValue(value);\n\t              // Hide if single select\n\t              $select.hide();\n\t            }\n\t          });\n\t          // Emit event\n\t          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n\t        };\n\t\n\t        // Protected methods\n\t\n\t        $select.$updateActiveIndex = function() {\n\t          if(controller.$modelValue && scope.$matches.length) {\n\t            if(options.multiple && angular.isArray(controller.$modelValue)) {\n\t              scope.$activeIndex = controller.$modelValue.map(function(value) {\n\t                return $select.$getIndex(value);\n\t              });\n\t            } else {\n\t              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n\t            }\n\t          } else if(scope.$activeIndex >= scope.$matches.length) {\n\t            scope.$activeIndex = options.multiple ? [] : 0;\n\t          }\n\t        };\n\t\n\t        $select.$isVisible = function() {\n\t          if(!options.minLength || !controller) {\n\t            return scope.$matches.length;\n\t          }\n\t          // minLength support\n\t          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n\t        };\n\t\n\t        $select.$isActive = function(index) {\n\t          if(options.multiple) {\n\t            return scope.$activeIndex.indexOf(index) !== -1;\n\t          } else {\n\t            return scope.$activeIndex === index;\n\t          }\n\t        };\n\t\n\t        $select.$getIndex = function(value) {\n\t          var l = scope.$matches.length, i = l;\n\t          if(!l) return;\n\t          for(i = l; i--;) {\n\t            if(scope.$matches[i].value === value) break;\n\t          }\n\t          if(i < 0) return;\n\t          return i;\n\t        };\n\t\n\t        $select.$onMouseDown = function(evt) {\n\t          // Prevent blur on mousedown on .dropdown-menu\n\t          evt.preventDefault();\n\t          evt.stopPropagation();\n\t          // Emulate click for mobile devices\n\t          if(isTouch) {\n\t            var targetEl = angular.element(evt.target);\n\t            targetEl.triggerHandler('click');\n\t          }\n\t        };\n\t\n\t        $select.$onKeyDown = function(evt) {\n\t          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n\t          evt.preventDefault();\n\t          evt.stopPropagation();\n\t\n\t          // Select with enter\n\t          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n\t            return $select.select(scope.$activeIndex);\n\t          }\n\t\n\t          // Navigate with keyboard\n\t          if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n\t          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n\t          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n\t          scope.$digest();\n\t        };\n\t\n\t        // Overrides\n\t\n\t        var _show = $select.show;\n\t        $select.show = function() {\n\t          _show();\n\t          if(options.multiple) {\n\t            $select.$element.addClass('select-multiple');\n\t          }\n\t          // use timeout to hookup the events to prevent\n\t          // event bubbling from being processed imediately.\n\t          $timeout(function() {\n\t            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n\t            if(options.keyboard) {\n\t              element.on('keydown', $select.$onKeyDown);\n\t            }\n\t          }, 0, false);\n\t        };\n\t\n\t        var _hide = $select.hide;\n\t        $select.hide = function() {\n\t          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n\t          if(options.keyboard) {\n\t            element.off('keydown', $select.$onKeyDown);\n\t          }\n\t          _hide(true);\n\t        };\n\t\n\t        return $select;\n\t\n\t      }\n\t\n\t      SelectFactory.defaults = defaults;\n\t      return SelectFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsSelect', [\"$window\", \"$parse\", \"$q\", \"$select\", \"$parseOptions\", function($window, $parse, $q, $select, $parseOptions) {\n\t\n\t    var defaults = $select.defaults;\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      require: 'ngModel',\n\t      link: function postLink(scope, element, attr, controller) {\n\t\n\t        // Directive options\n\t        var options = {scope: scope, placeholder: defaults.placeholder};\n\t        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'placeholder', 'multiple', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Add support for select markup\n\t        if(element[0].nodeName.toLowerCase() === 'select') {\n\t          var inputEl = element;\n\t          inputEl.css('display', 'none');\n\t          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n\t          inputEl.after(element);\n\t        }\n\t\n\t        // Build proper ngOptions\n\t        var parsedOptions = $parseOptions(attr.ngOptions);\n\t\n\t        // Initialize select\n\t        var select = $select(element, controller, options);\n\t\n\t        // Watch ngOptions values before filtering for changes\n\t        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n\t        scope.$watch(watchedOptions, function(newValue, oldValue) {\n\t          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n\t          parsedOptions.valuesFn(scope, controller)\n\t          .then(function(values) {\n\t            select.update(values);\n\t            controller.$render();\n\t          });\n\t        }, true);\n\t\n\t        // Watch model for changes\n\t        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n\t          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n\t          select.$updateActiveIndex();\n\t          controller.$render();\n\t        }, true);\n\t\n\t        // Model rendering in view\n\t        controller.$render = function () {\n\t          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n\t          var selected, index;\n\t          if(options.multiple && angular.isArray(controller.$modelValue)) {\n\t            selected = controller.$modelValue.map(function(value) {\n\t              index = select.$getIndex(value);\n\t              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n\t            }).filter(angular.isDefined);\n\t            if(selected.length > (options.maxLength || defaults.maxLength)) {\n\t              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n\t            } else {\n\t              selected = selected.join(', ');\n\t            }\n\t          } else {\n\t            index = select.$getIndex(controller.$modelValue);\n\t            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n\t          }\n\t          element.html((selected ? selected : options.placeholder) + defaults.caretHtml);\n\t        };\n\t\n\t        if(options.multiple){\n\t          controller.$isEmpty = function(value){\n\t            return !value || value.length === 0;\n\t          };\n\t        }\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if (select) select.destroy();\n\t          options = null;\n\t          select = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: tab.js\n\tangular.module('mgcrea.ngStrap.tab', [])\n\t\n\t  .provider('$tab', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      template: 'tab/tab.tpl.html',\n\t      navClass: 'nav-tabs',\n\t      activeClass: 'active'\n\t    };\n\t\n\t    var controller = this.controller = function($scope, $element, $attrs) {\n\t      var self = this;\n\t\n\t      // Attributes options\n\t      self.$options = angular.copy(defaults);\n\t      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n\t        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n\t      });\n\t\n\t      // Publish options on scope\n\t      $scope.$navClass = self.$options.navClass;\n\t      $scope.$activeClass = self.$options.activeClass;\n\t\n\t      self.$panes = $scope.$panes = [];\n\t\n\t      // DEPRECATED: $viewChangeListeners, please use $activePaneChangeListeners\n\t      // Because we deprecated ngModel usage, we rename viewChangeListeners to \n\t      // activePaneChangeListeners to make more sense.\n\t      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\t\n\t      self.$push = function(pane) {\n\t        self.$panes.push(pane);\n\t      };\n\t\n\t      self.$remove = function(pane) {\n\t        var index = self.$panes.indexOf(pane);\n\t        var activeIndex = self.$panes.$active;\n\t\n\t        // remove pane from $panes array\n\t        self.$panes.splice(index, 1);\n\t\n\t        if (index < activeIndex) {\n\t          // we removed a pane before the active pane, so we need to \n\t          // decrement the active pane index\n\t          activeIndex--;\n\t        }\n\t        else if (index === activeIndex && activeIndex === self.$panes.length) {\n\t          // we remove the active pane and it was the one at the end,\n\t          // so select the previous one\n\t          activeIndex--;\n\t        }\n\t        self.$setActive(activeIndex);\n\t      };\n\t\n\t      self.$panes.$active = 0;\n\t      self.$setActive = $scope.$setActive = function(value) {\n\t        self.$panes.$active = value;\n\t        self.$activePaneChangeListeners.forEach(function(fn) {\n\t          fn();\n\t        });\n\t      };\n\t\n\t    };\n\t\n\t    this.$get = function() {\n\t      var $tab = {};\n\t      $tab.defaults = defaults;\n\t      $tab.controller = controller;\n\t      return $tab;\n\t    };\n\t\n\t  })\n\t\n\t  .directive('bsTabs', [\"$window\", \"$animate\", \"$tab\", \"$parse\", function($window, $animate, $tab, $parse) {\n\t\n\t    var defaults = $tab.defaults;\n\t\n\t    return {\n\t      require: ['?ngModel', 'bsTabs'],\n\t      transclude: true,\n\t      scope: true,\n\t      controller: ['$scope', '$element', '$attrs', $tab.controller],\n\t      templateUrl: function(element, attr) {\n\t        return attr.template || defaults.template;\n\t      },\n\t      link: function postLink(scope, element, attrs, controllers) {\n\t\n\t        var ngModelCtrl = controllers[0];\n\t        var bsTabsCtrl = controllers[1];\n\t\n\t        // DEPRECATED: ngModel, please use bsActivePane\n\t        // 'ngModel' is deprecated bacause if interferes with form validation\n\t        // and status, so avoid using it here.\n\t        if(ngModelCtrl) {\n\t          console.warn('Usage of ngModel is deprecated, please use bsActivePane instead!');\n\t\n\t          // Update the modelValue following\n\t          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n\t            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n\t          });\n\t\n\t          // modelValue -> $formatters -> viewValue\n\t          ngModelCtrl.$formatters.push(function(modelValue) {\n\t            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n\t            bsTabsCtrl.$setActive(modelValue * 1);\n\t            return modelValue;\n\t          });\n\t\n\t        }\n\t\n\t        if (attrs.bsActivePane) {\n\t          // adapted from angularjs ngModelController bindings\n\t          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n\t          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\t\n\t          // Update bsActivePane value with change\n\t          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n\t            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n\t          });\n\t\n\t          // watch bsActivePane for value changes\n\t          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n\t            bsTabsCtrl.$setActive(newValue * 1);\n\t          }, true);\n\t        }\n\t      }\n\t    };\n\t\n\t  }])\n\t\n\t  .directive('bsPane', [\"$window\", \"$animate\", \"$sce\", function($window, $animate, $sce) {\n\t\n\t    return {\n\t      require: ['^?ngModel', '^bsTabs'],\n\t      scope: true,\n\t      link: function postLink(scope, element, attrs, controllers) {\n\t\n\t        var ngModelCtrl = controllers[0];\n\t        var bsTabsCtrl = controllers[1];\n\t\n\t        // Add base class\n\t        element.addClass('tab-pane');\n\t\n\t        // Observe title attribute for change\n\t        attrs.$observe('title', function(newValue, oldValue) {\n\t          scope.title = $sce.trustAsHtml(newValue);\n\t        });\n\t\n\t        // Add animation class\n\t        if(bsTabsCtrl.$options.animation) {\n\t          element.addClass(bsTabsCtrl.$options.animation);\n\t        }\n\t\n\t        // Push pane to parent bsTabs controller\n\t        bsTabsCtrl.$push(scope);\n\t\n\t        // remove pane from tab controller when pane is destroyed\n\t        scope.$on('$destroy', function() {\n\t          bsTabsCtrl.$remove(scope);\n\t        });\n\t\n\t        function render() {\n\t          var index = bsTabsCtrl.$panes.indexOf(scope);\n\t          var active = bsTabsCtrl.$panes.$active;\n\t          $animate[index === active ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n\t        }\n\t\n\t        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n\t          render();\n\t        });\n\t        render();\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: scrollspy.js\n\tangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\t\n\t  .provider('$scrollspy', function() {\n\t\n\t    // Pool of registered spies\n\t    var spies = this.$$spies = {};\n\t\n\t    var defaults = this.defaults = {\n\t      debounce: 150,\n\t      throttle: 100,\n\t      offset: 100\n\t    };\n\t\n\t    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"dimensions\", \"debounce\", \"throttle\", function($window, $document, $rootScope, dimensions, debounce, throttle) {\n\t\n\t      var windowEl = angular.element($window);\n\t      var docEl = angular.element($document.prop('documentElement'));\n\t      var bodyEl = angular.element($window.document.body);\n\t\n\t      // Helper functions\n\t\n\t      function nodeName(element, name) {\n\t        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n\t      }\n\t\n\t      function ScrollSpyFactory(config) {\n\t\n\t        // Common vars\n\t        var options = angular.extend({}, defaults, config);\n\t        if(!options.element) options.element = bodyEl;\n\t        var isWindowSpy = nodeName(options.element, 'body');\n\t        var scrollEl = isWindowSpy ? windowEl : options.element;\n\t        var scrollId = isWindowSpy ? 'window' : options.id;\n\t\n\t        // Use existing spy\n\t        if(spies[scrollId]) {\n\t          spies[scrollId].$$count++;\n\t          return spies[scrollId];\n\t        }\n\t\n\t        var $scrollspy = {};\n\t\n\t        // Private vars\n\t        var unbindViewContentLoaded, unbindIncludeContentLoaded;\n\t        var trackedElements = $scrollspy.$trackedElements = [];\n\t        var sortedElements = [];\n\t        var activeTarget;\n\t        var debouncedCheckPosition;\n\t        var throttledCheckPosition;\n\t        var debouncedCheckOffsets;\n\t        var viewportHeight;\n\t        var scrollTop;\n\t\n\t        $scrollspy.init = function() {\n\t\n\t          // Setup internal ref counter\n\t          this.$$count = 1;\n\t\n\t          // Bind events\n\t          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n\t          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n\t          scrollEl.on('click', this.checkPositionWithEventLoop);\n\t          windowEl.on('resize', debouncedCheckPosition);\n\t          scrollEl.on('scroll', throttledCheckPosition);\n\t\n\t          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n\t          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n\t          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n\t          debouncedCheckOffsets();\n\t\n\t          // Register spy for reuse\n\t          if(scrollId) {\n\t            spies[scrollId] = $scrollspy;\n\t          }\n\t\n\t        };\n\t\n\t        $scrollspy.destroy = function() {\n\t\n\t          // Check internal ref counter\n\t          this.$$count--;\n\t          if(this.$$count > 0) {\n\t            return;\n\t          }\n\t\n\t          // Unbind events\n\t          scrollEl.off('click', this.checkPositionWithEventLoop);\n\t          windowEl.off('resize', debouncedCheckPosition);\n\t          scrollEl.off('scroll', throttledCheckPosition);\n\t          unbindViewContentLoaded();\n\t          unbindIncludeContentLoaded();\n\t          if (scrollId) {\n\t            delete spies[scrollId];\n\t          }\n\t        };\n\t\n\t        $scrollspy.checkPosition = function() {\n\t\n\t          // Not ready yet\n\t          if(!sortedElements.length) return;\n\t\n\t          // Calculate the scroll position\n\t          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\t\n\t          // Calculate the viewport height for use by the components\n\t          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\t\n\t          // Activate first element if scroll is smaller\n\t          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n\t            return $scrollspy.$activateElement(sortedElements[0]);\n\t          }\n\t\n\t          // Activate proper element\n\t          for (var i = sortedElements.length; i--;) {\n\t            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n\t            if(activeTarget === sortedElements[i].target) continue;\n\t            if(scrollTop < sortedElements[i].offsetTop) continue;\n\t            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n\t            return $scrollspy.$activateElement(sortedElements[i]);\n\t          }\n\t\n\t        };\n\t\n\t        $scrollspy.checkPositionWithEventLoop = function() {\n\t          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n\t          // in this setTimeout call\n\t          setTimeout($scrollspy.checkPosition, 1);\n\t        };\n\t\n\t        // Protected methods\n\t\n\t        $scrollspy.$activateElement = function(element) {\n\t          if(activeTarget) {\n\t            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n\t            if(activeElement) {\n\t              activeElement.source.removeClass('active');\n\t              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n\t                activeElement.source.parent().parent().removeClass('active');\n\t              }\n\t            }\n\t          }\n\t          activeTarget = element.target;\n\t          element.source.addClass('active');\n\t          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n\t            element.source.parent().parent().addClass('active');\n\t          }\n\t        };\n\t\n\t        $scrollspy.$getTrackedElement = function(target) {\n\t          return trackedElements.filter(function(obj) {\n\t            return obj.target === target;\n\t          })[0];\n\t        };\n\t\n\t        // Track offsets behavior\n\t\n\t        $scrollspy.checkOffsets = function() {\n\t\n\t          angular.forEach(trackedElements, function(trackedElement) {\n\t            var targetElement = document.querySelector(trackedElement.target);\n\t            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n\t            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n\t          });\n\t\n\t          sortedElements = trackedElements\n\t          .filter(function(el) {\n\t            return el.offsetTop !== null;\n\t          })\n\t          .sort(function(a, b) {\n\t            return a.offsetTop - b.offsetTop;\n\t          });\n\t\n\t          debouncedCheckPosition();\n\t\n\t        };\n\t\n\t        $scrollspy.trackElement = function(target, source) {\n\t          trackedElements.push({target: target, source: source});\n\t        };\n\t\n\t        $scrollspy.untrackElement = function(target, source) {\n\t          var toDelete;\n\t          for (var i = trackedElements.length; i--;) {\n\t            if(trackedElements[i].target === target && trackedElements[i].source === source) {\n\t              toDelete = i;\n\t              break;\n\t            }\n\t          }\n\t          trackedElements = trackedElements.splice(toDelete, 1);\n\t        };\n\t\n\t        $scrollspy.activate = function(i) {\n\t          trackedElements[i].addClass('active');\n\t        };\n\t\n\t        // Initialize plugin\n\t\n\t        $scrollspy.init();\n\t        return $scrollspy;\n\t\n\t      }\n\t\n\t      return ScrollSpyFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsScrollspy', [\"$rootScope\", \"debounce\", \"dimensions\", \"$scrollspy\", function($rootScope, debounce, dimensions, $scrollspy) {\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      link: function postLink(scope, element, attr) {\n\t\n\t        var options = {scope: scope};\n\t        angular.forEach(['offset', 'target'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        var scrollspy = $scrollspy(options);\n\t        scrollspy.trackElement(options.target, element);\n\t\n\t        scope.$on('$destroy', function() {\n\t          if (scrollspy) {\n\t            scrollspy.untrackElement(options.target, element);\n\t            scrollspy.destroy();\n\t          }\n\t          options = null;\n\t          scrollspy = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }])\n\t\n\t\n\t  .directive('bsScrollspyList', [\"$rootScope\", \"debounce\", \"dimensions\", \"$scrollspy\", function($rootScope, debounce, dimensions, $scrollspy) {\n\t\n\t    return {\n\t      restrict: 'A',\n\t      compile: function postLink(element, attr) {\n\t        var children = element[0].querySelectorAll('li > a[href]');\n\t        angular.forEach(children, function(child) {\n\t          var childEl = angular.element(child);\n\t          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n\t        });\n\t      }\n\t\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: timepicker.js\n\tangular.module('mgcrea.ngStrap.timepicker', [\n\t  'mgcrea.ngStrap.helpers.dateParser',\n\t  'mgcrea.ngStrap.helpers.dateFormatter',\n\t  'mgcrea.ngStrap.tooltip'])\n\t\n\t  .provider('$timepicker', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      prefixClass: 'timepicker',\n\t      placement: 'bottom-left',\n\t      template: 'timepicker/timepicker.tpl.html',\n\t      trigger: 'focus',\n\t      container: false,\n\t      keyboard: true,\n\t      html: false,\n\t      delay: 0,\n\t      // lang: $locale.id,\n\t      useNative: true,\n\t      timeType: 'date',\n\t      timeFormat: 'shortTime',\n\t      modelTimeFormat: null,\n\t      autoclose: false,\n\t      minTime: -Infinity,\n\t      maxTime: +Infinity,\n\t      length: 5,\n\t      hourStep: 1,\n\t      minuteStep: 5,\n\t      iconUp: 'glyphicon glyphicon-chevron-up',\n\t      iconDown: 'glyphicon glyphicon-chevron-down',\n\t      arrowBehavior: 'pager'\n\t    };\n\t\n\t    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"$sce\", \"$dateFormatter\", \"$tooltip\", \"$timeout\", function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\t\n\t      var bodyEl = angular.element($window.document.body);\n\t      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\t      var isTouch = ('createTouch' in $window.document) && isNative;\n\t      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\t\n\t      function timepickerFactory(element, controller, config) {\n\t\n\t        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n\t        var parentScope = config.scope;\n\t        var options = $timepicker.$options;\n\t        var scope = $timepicker.$scope;\n\t\n\t        var lang = options.lang;\n\t        var formatDate = function(date, format) {\n\t          return $dateFormatter.formatDate(date, format, lang);\n\t        };\n\t\n\t        // View vars\n\t\n\t        var selectedIndex = 0;\n\t        var startDate = controller.$dateValue || new Date();\n\t        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\n\t\n\t        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\t\n\t        var hoursFormat = $dateFormatter.hoursFormat(format),\n\t          timeSeparator = $dateFormatter.timeSeparator(format),\n\t          minutesFormat = $dateFormatter.minutesFormat(format),\n\t          showAM = $dateFormatter.showAM(format);\n\t\n\t        scope.$iconUp = options.iconUp;\n\t        scope.$iconDown = options.iconDown;\n\t\n\t        // Scope methods\n\t\n\t        scope.$select = function(date, index) {\n\t          $timepicker.select(date, index);\n\t        };\n\t        scope.$moveIndex = function(value, index) {\n\t          $timepicker.$moveIndex(value, index);\n\t        };\n\t        scope.$switchMeridian = function(date) {\n\t          $timepicker.switchMeridian(date);\n\t        };\n\t\n\t        // Public methods\n\t\n\t        $timepicker.update = function(date) {\n\t          // console.warn('$timepicker.update() newValue=%o', date);\n\t          if(angular.isDate(date) && !isNaN(date.getTime())) {\n\t            $timepicker.$date = date;\n\t            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\n\t            $timepicker.$build();\n\t          } else if(!$timepicker.$isBuilt) {\n\t            $timepicker.$build();\n\t          }\n\t        };\n\t\n\t        $timepicker.select = function(date, index, keep) {\n\t          // console.warn('$timepicker.select', date, scope.$mode);\n\t          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n\t          if(!angular.isDate(date)) date = new Date(date);\n\t          if(index === 0) controller.$dateValue.setHours(date.getHours());\n\t          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n\t          controller.$setViewValue(angular.copy(controller.$dateValue));\n\t          controller.$render();\n\t          if(options.autoclose && !keep) {\n\t            $timeout(function() { $timepicker.hide(true); });\n\t          }\n\t        };\n\t\n\t        $timepicker.switchMeridian = function(date) {\n\t          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n\t            return;\n\t          }\n\t          var hours = (date || controller.$dateValue).getHours();\n\t          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n\t          controller.$setViewValue(angular.copy(controller.$dateValue));\n\t          controller.$render();\n\t        };\n\t\n\t        // Protected methods\n\t\n\t        $timepicker.$build = function() {\n\t          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n\t          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n\t          var hours = [], hour;\n\t          for(i = 0; i < options.length; i++) {\n\t            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n\t            hours.push({date: hour, label: formatDate(hour, hoursFormat), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\n\t          }\n\t          var minutes = [], minute;\n\t          for(i = 0; i < options.length; i++) {\n\t            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n\t            minutes.push({date: minute, label: formatDate(minute, minutesFormat), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\n\t          }\n\t\n\t          var rows = [];\n\t          for(i = 0; i < options.length; i++) {\n\t            rows.push([hours[i], minutes[i]]);\n\t          }\n\t          scope.rows = rows;\n\t          scope.showAM = showAM;\n\t          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n\t          scope.timeSeparator = timeSeparator;\n\t          $timepicker.$isBuilt = true;\n\t        };\n\t\n\t        $timepicker.$isSelected = function(date, index) {\n\t          if(!$timepicker.$date) return false;\n\t          else if(index === 0) {\n\t            return date.getHours() === $timepicker.$date.getHours();\n\t          } else if(index === 1) {\n\t            return date.getMinutes() === $timepicker.$date.getMinutes();\n\t          }\n\t        };\n\t\n\t        $timepicker.$isDisabled = function(date, index) {\n\t          var selectedTime;\n\t          if(index === 0) {\n\t            selectedTime = date.getTime() + viewDate.minute * 6e4;\n\t          } else if(index === 1) {\n\t            selectedTime = date.getTime() + viewDate.hour * 36e5;\n\t          }\n\t          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n\t        };\n\t\n\t        scope.$arrowAction = function (value, index) {\n\t          if (options.arrowBehavior === 'picker') {\n\t            $timepicker.$setTimeByStep(value,index);\n\t          } else {\n\t            $timepicker.$moveIndex(value,index);\n\t          }\n\t        };\n\t\n\t        $timepicker.$setTimeByStep = function(value, index) {\n\t          var newDate = new Date($timepicker.$date);\n\t          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n\t          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n\t          if (index === 0) {\n\t            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n\t          }\n\t          else {\n\t            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n\t          }\n\t          $timepicker.select(newDate, index, true);\n\t        };\n\t\n\t        $timepicker.$moveIndex = function(value, index) {\n\t          var targetDate;\n\t          if(index === 0) {\n\t            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute);\n\t            angular.extend(viewDate, {hour: targetDate.getHours()});\n\t          } else if(index === 1) {\n\t            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep));\n\t            angular.extend(viewDate, {minute: targetDate.getMinutes()});\n\t          }\n\t          $timepicker.$build();\n\t        };\n\t\n\t        $timepicker.$onMouseDown = function(evt) {\n\t          // Prevent blur on mousedown on .dropdown-menu\n\t          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n\t          evt.stopPropagation();\n\t          // Emulate click for mobile devices\n\t          if(isTouch) {\n\t            var targetEl = angular.element(evt.target);\n\t            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n\t              targetEl = targetEl.parent();\n\t            }\n\t            targetEl.triggerHandler('click');\n\t          }\n\t        };\n\t\n\t        $timepicker.$onKeyDown = function(evt) {\n\t          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n\t          evt.preventDefault();\n\t          evt.stopPropagation();\n\t\n\t          // Close on enter\n\t          if(evt.keyCode === 13) return $timepicker.hide(true);\n\t\n\t          // Navigate with keyboard\n\t          var newDate = new Date($timepicker.$date);\n\t          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n\t          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n\t          var lateralMove = /(37|39)/.test(evt.keyCode);\n\t          var count = 2 + showAM * 1;\n\t\n\t          // Navigate indexes (left, right)\n\t          if (lateralMove) {\n\t            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n\t            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n\t          }\n\t\n\t          // Update values (up, down)\n\t          var selectRange = [0, hoursLength];\n\t          if(selectedIndex === 0) {\n\t            if(evt.keyCode === 38) newDate.setHours(hours - parseInt(options.hourStep, 10));\n\t            else if(evt.keyCode === 40) newDate.setHours(hours + parseInt(options.hourStep, 10));\n\t            // re-calculate hours length because we have changed hours value\n\t            hoursLength = formatDate(newDate, hoursFormat).length;\n\t            selectRange = [0, hoursLength];\n\t          } else if(selectedIndex === 1) {\n\t            if(evt.keyCode === 38) newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));\n\t            else if(evt.keyCode === 40) newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));\n\t            // re-calculate minutes length because we have changes minutes value\n\t            minutesLength = formatDate(newDate, minutesFormat).length;\n\t            selectRange = [hoursLength + 1, hoursLength + 1 + minutesLength];\n\t          } else if(selectedIndex === 2) {\n\t            if(!lateralMove) $timepicker.switchMeridian();\n\t            selectRange = [hoursLength + 1 + minutesLength + 1, hoursLength + 1 + minutesLength + 3];\n\t          }\n\t          $timepicker.select(newDate, selectedIndex, true);\n\t          createSelection(selectRange[0], selectRange[1]);\n\t          parentScope.$digest();\n\t        };\n\t\n\t        // Private\n\t\n\t        function createSelection(start, end) {\n\t          if(element[0].createTextRange) {\n\t            var selRange = element[0].createTextRange();\n\t            selRange.collapse(true);\n\t            selRange.moveStart('character', start);\n\t            selRange.moveEnd('character', end);\n\t            selRange.select();\n\t          } else if(element[0].setSelectionRange) {\n\t            element[0].setSelectionRange(start, end);\n\t          } else if(angular.isUndefined(element[0].selectionStart)) {\n\t            element[0].selectionStart = start;\n\t            element[0].selectionEnd = end;\n\t          }\n\t        }\n\t\n\t        function focusElement() {\n\t          element[0].focus();\n\t        }\n\t\n\t        // Overrides\n\t\n\t        var _init = $timepicker.init;\n\t        $timepicker.init = function() {\n\t          if(isNative && options.useNative) {\n\t            element.prop('type', 'time');\n\t            element.css('-webkit-appearance', 'textfield');\n\t            return;\n\t          } else if(isTouch) {\n\t            element.prop('type', 'text');\n\t            element.attr('readonly', 'true');\n\t            element.on('click', focusElement);\n\t          }\n\t          _init();\n\t        };\n\t\n\t        var _destroy = $timepicker.destroy;\n\t        $timepicker.destroy = function() {\n\t          if(isNative && options.useNative) {\n\t            element.off('click', focusElement);\n\t          }\n\t          _destroy();\n\t        };\n\t\n\t        var _show = $timepicker.show;\n\t        $timepicker.show = function() {\n\t          _show();\n\t          // use timeout to hookup the events to prevent\n\t          // event bubbling from being processed imediately.\n\t          $timeout(function() {\n\t            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n\t            if(options.keyboard) {\n\t              element.on('keydown', $timepicker.$onKeyDown);\n\t            }\n\t          }, 0, false);\n\t        };\n\t\n\t        var _hide = $timepicker.hide;\n\t        $timepicker.hide = function(blur) {\n\t          if(!$timepicker.$isShown) return;\n\t          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n\t          if(options.keyboard) {\n\t            element.off('keydown', $timepicker.$onKeyDown);\n\t          }\n\t          _hide(blur);\n\t        };\n\t\n\t        return $timepicker;\n\t\n\t      }\n\t\n\t      timepickerFactory.defaults = defaults;\n\t      return timepickerFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t\n\t  .directive('bsTimepicker', [\"$window\", \"$parse\", \"$q\", \"$dateFormatter\", \"$dateParser\", \"$timepicker\", function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\t\n\t    var defaults = $timepicker.defaults;\n\t    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\t    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      require: 'ngModel',\n\t      link: function postLink(scope, element, attr, controller) {\n\t\n\t        // Directive options\n\t        var options = {scope: scope, controller: controller};\n\t        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'id'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Visibility binding support\n\t        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n\t          if(!timepicker || !angular.isDefined(newValue)) return;\n\t          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n\t          newValue === true ? timepicker.show() : timepicker.hide();\n\t        });\n\t\n\t        // Initialize timepicker\n\t        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n\t        var timepicker = $timepicker(element, controller, options);\n\t        options = timepicker.$options;\n\t\n\t        var lang = options.lang;\n\t        var formatDate = function(date, format) {\n\t          return $dateFormatter.formatDate(date, format, lang);\n\t        };\n\t\n\t        // Initialize parser\n\t        var dateParser = $dateParser({format: options.timeFormat, lang: lang});\n\t\n\t        // Observe attributes for changes\n\t        angular.forEach(['minTime', 'maxTime'], function(key) {\n\t          // console.warn('attr.$observe(%s)', key, attr[key]);\n\t          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n\t            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n\t            !isNaN(timepicker.$options[key]) && timepicker.$build();\n\t            validateAgainstMinMaxTime(controller.$dateValue);\n\t          });\n\t        });\n\t\n\t        // Watch model for changes\n\t        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n\t          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n\t          timepicker.update(controller.$dateValue);\n\t        }, true);\n\t\n\t        function validateAgainstMinMaxTime(parsedTime) {\n\t          if (!angular.isDate(parsedTime)) return;\n\t          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n\t          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n\t          var isValid = isMinValid && isMaxValid;\n\t          controller.$setValidity('date', isValid);\n\t          controller.$setValidity('min', isMinValid);\n\t          controller.$setValidity('max', isMaxValid);\n\t          // Only update the model when we have a valid date\n\t          if(!isValid) {\n\t              return;\n\t          }\n\t          controller.$dateValue = parsedTime;\n\t        }\n\t\n\t        // viewValue -> $parsers -> modelValue\n\t        controller.$parsers.unshift(function(viewValue) {\n\t          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n\t          // Null values should correctly reset the model value & validity\n\t          if(!viewValue) {\n\t            // BREAKING CHANGE:\n\t            // return null (not undefined) when input value is empty, so angularjs 1.3\n\t            // ngModelController can go ahead and run validators, like ngRequired\n\t            controller.$setValidity('date', true);\n\t            return null;\n\t          }\n\t          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n\t          if(!parsedTime || isNaN(parsedTime.getTime())) {\n\t            controller.$setValidity('date', false);\n\t            // return undefined, causes ngModelController to\n\t            // invalidate model value\n\t            return;\n\t          } else {\n\t            validateAgainstMinMaxTime(parsedTime);\n\t          }\n\t          if(options.timeType === 'string') {\n\t            return formatDate(parsedTime, options.modelTimeFormat || options.timeFormat);\n\t          } else if(options.timeType === 'number') {\n\t            return controller.$dateValue.getTime();\n\t          } else if(options.timeType === 'unix') {\n\t            return controller.$dateValue.getTime() / 1000;\n\t          } else if(options.timeType === 'iso') {\n\t            return controller.$dateValue.toISOString();\n\t          } else {\n\t            return new Date(controller.$dateValue);\n\t          }\n\t        });\n\t\n\t        // modelValue -> $formatters -> viewValue\n\t        controller.$formatters.push(function(modelValue) {\n\t          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n\t          var date;\n\t          if(angular.isUndefined(modelValue) || modelValue === null) {\n\t            date = NaN;\n\t          } else if(angular.isDate(modelValue)) {\n\t            date = modelValue;\n\t          } else if(options.timeType === 'string') {\n\t            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n\t          } else if(options.timeType === 'unix') {\n\t            date = new Date(modelValue * 1000);\n\t          } else {\n\t            date = new Date(modelValue);\n\t          }\n\t          // Setup default value?\n\t          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n\t          controller.$dateValue = date;\n\t          return getTimeFormattedString();\n\t        });\n\t\n\t        // viewValue -> element\n\t        controller.$render = function() {\n\t          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n\t          element.val(getTimeFormattedString());\n\t        };\n\t\n\t        function getTimeFormattedString() {\n\t          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n\t        }\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if (timepicker) timepicker.destroy();\n\t          options = null;\n\t          timepicker = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: tooltip.js\n\tangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.helpers.dimensions'])\n\t\n\t  .provider('$tooltip', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      customClass: '',\n\t      prefixClass: 'tooltip',\n\t      prefixEvent: 'tooltip',\n\t      container: false,\n\t      target: false,\n\t      placement: 'top',\n\t      template: 'tooltip/tooltip.tpl.html',\n\t      contentTemplate: false,\n\t      trigger: 'hover focus',\n\t      keyboard: false,\n\t      html: false,\n\t      show: false,\n\t      title: '',\n\t      type: '',\n\t      delay: 0,\n\t      autoClose: false,\n\t      bsEnabled: true\n\t    };\n\t\n\t    this.$get = [\"$window\", \"$rootScope\", \"$compile\", \"$q\", \"$templateCache\", \"$http\", \"$animate\", \"$sce\", \"dimensions\", \"$$rAF\", \"$timeout\", function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\t\n\t      var trim = String.prototype.trim;\n\t      var isTouch = 'createTouch' in $window.document;\n\t      var htmlReplaceRegExp = /ng-bind=\"/ig;\n\t      var $body = angular.element($window.document);\n\t\n\t      function TooltipFactory(element, config) {\n\t\n\t        var $tooltip = {};\n\t\n\t        // Common vars\n\t        var nodeName = element[0].nodeName.toLowerCase();\n\t        var options = $tooltip.$options = angular.extend({}, defaults, config);\n\t        $tooltip.$promise = fetchTemplate(options.template);\n\t        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\t        if(options.delay && angular.isString(options.delay)) {\n\t          var split = options.delay.split(',').map(parseFloat);\n\t          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n\t        }\n\t\n\t        // store $id to identify the triggering element in events\n\t        // give priority to options.id, otherwise, try to use\n\t        // element id if defined\n\t        $tooltip.$id = options.id || element.attr('id') || '';\n\t\n\t        // Support scope as string options\n\t        if(options.title) {\n\t          scope.title = $sce.trustAsHtml(options.title);\n\t        }\n\t\n\t        // Provide scope helpers\n\t        scope.$setEnabled = function(isEnabled) {\n\t          scope.$$postDigest(function() {\n\t            $tooltip.setEnabled(isEnabled);\n\t          });\n\t        };\n\t        scope.$hide = function() {\n\t          scope.$$postDigest(function() {\n\t            $tooltip.hide();\n\t          });\n\t        };\n\t        scope.$show = function() {\n\t          scope.$$postDigest(function() {\n\t            $tooltip.show();\n\t          });\n\t        };\n\t        scope.$toggle = function() {\n\t          scope.$$postDigest(function() {\n\t            $tooltip.toggle();\n\t          });\n\t        };\n\t        // Publish isShown as a protected var on scope\n\t        $tooltip.$isShown = scope.$isShown = false;\n\t\n\t        // Private vars\n\t        var timeout, hoverState;\n\t\n\t        // Support contentTemplate option\n\t        if(options.contentTemplate) {\n\t          $tooltip.$promise = $tooltip.$promise.then(function(template) {\n\t            var templateEl = angular.element(template);\n\t            return fetchTemplate(options.contentTemplate)\n\t            .then(function(contentTemplate) {\n\t              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]);\n\t              if(!contentEl.length) contentEl = findElement('[ng-bind=\"title\"]', templateEl[0]);\n\t              contentEl.removeAttr('ng-bind').html(contentTemplate);\n\t              return templateEl[0].outerHTML;\n\t            });\n\t          });\n\t        }\n\t\n\t        // Fetch, compile then initialize tooltip\n\t        var tipLinker, tipElement, tipTemplate, tipContainer, tipScope;\n\t        $tooltip.$promise.then(function(template) {\n\t          if(angular.isObject(template)) template = template.data;\n\t          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\n\t          template = trim.apply(template);\n\t          tipTemplate = template;\n\t          tipLinker = $compile(template);\n\t          $tooltip.init();\n\t        });\n\t\n\t        $tooltip.init = function() {\n\t\n\t          // Options: delay\n\t          if (options.delay && angular.isNumber(options.delay)) {\n\t            options.delay = {\n\t              show: options.delay,\n\t              hide: options.delay\n\t            };\n\t          }\n\t\n\t          // Replace trigger on touch devices ?\n\t          // if(isTouch && options.trigger === defaults.trigger) {\n\t          //   options.trigger.replace(/hover/g, 'click');\n\t          // }\n\t\n\t          // Options : container\n\t          if(options.container === 'self') {\n\t            tipContainer = element;\n\t          } else if(angular.isElement(options.container)) {\n\t            tipContainer = options.container;\n\t          } else if(options.container) {\n\t            tipContainer = findElement(options.container);\n\t          }\n\t\n\t          // Options: trigger\n\t          bindTriggerEvents();\n\t\n\t          // Options: target\n\t          if(options.target) {\n\t            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n\t          }\n\t\n\t          // Options: show\n\t          if(options.show) {\n\t            scope.$$postDigest(function() {\n\t              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n\t            });\n\t          }\n\t\n\t        };\n\t\n\t        $tooltip.destroy = function() {\n\t\n\t          // Unbind events\n\t          unbindTriggerEvents();\n\t\n\t          // Remove element\n\t          destroyTipElement();\n\t\n\t          // Destroy scope\n\t          scope.$destroy();\n\t\n\t        };\n\t\n\t        $tooltip.enter = function() {\n\t\n\t          clearTimeout(timeout);\n\t          hoverState = 'in';\n\t          if (!options.delay || !options.delay.show) {\n\t            return $tooltip.show();\n\t          }\n\t\n\t          timeout = setTimeout(function() {\n\t            if (hoverState ==='in') $tooltip.show();\n\t          }, options.delay.show);\n\t\n\t        };\n\t\n\t        $tooltip.show = function() {\n\t          if (!options.bsEnabled || $tooltip.$isShown) return;\n\t\n\t          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n\t          var parent, after;\n\t          if (options.container) {\n\t            parent = tipContainer;\n\t            if (tipContainer[0].lastChild) {\n\t              after = angular.element(tipContainer[0].lastChild);\n\t            } else {\n\t              after = null;\n\t            }\n\t          } else {\n\t            parent = null;\n\t            after = element;\n\t          }\n\t\n\t\n\t          // Hide any existing tipElement\n\t          if(tipElement) destroyTipElement();\n\t          // Fetch a cloned element linked from template\n\t          tipScope = $tooltip.$scope.$new();\n\t          tipElement = $tooltip.$element = tipLinker(tipScope, function(clonedElement, scope) {});\n\t\n\t          // Set the initial positioning.  Make the tooltip invisible\n\t          // so IE doesn't try to focus on it off screen.\n\t          tipElement.css({top: '-9999px', left: '-9999px', display: 'block', visibility: 'hidden'});\n\t\n\t          // Options: animation\n\t          if(options.animation) tipElement.addClass(options.animation);\n\t          // Options: type\n\t          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n\t          // Options: custom classes\n\t          if(options.customClass) tipElement.addClass(options.customClass);\n\t\n\t          // Support v1.3+ $animate\n\t          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\n\t          var promise = $animate.enter(tipElement, parent, after, enterAnimateCallback);\n\t          if(promise && promise.then) promise.then(enterAnimateCallback);\n\t\n\t          $tooltip.$isShown = scope.$isShown = true;\n\t          safeDigest(scope);\n\t          $$rAF(function () {\n\t            $tooltip.$applyPlacement();\n\t\n\t            // Once placed, make the tooltip visible\n\t            if(tipElement) tipElement.css({visibility: 'visible'});\n\t          }); // var a = bodyEl.offsetWidth + 1; ?\n\t\n\t          // Bind events\n\t          if(options.keyboard) {\n\t            if(options.trigger !== 'focus') {\n\t              $tooltip.focus();\n\t            }\n\t            bindKeyboardEvents();\n\t          }\n\t\n\t          if(options.autoClose) {\n\t            bindAutoCloseEvents();\n\t          }\n\t\n\t        };\n\t\n\t        function enterAnimateCallback() {\n\t          scope.$emit(options.prefixEvent + '.show', $tooltip);\n\t        }\n\t\n\t        $tooltip.leave = function() {\n\t\n\t          clearTimeout(timeout);\n\t          hoverState = 'out';\n\t          if (!options.delay || !options.delay.hide) {\n\t            return $tooltip.hide();\n\t          }\n\t          timeout = setTimeout(function () {\n\t            if (hoverState === 'out') {\n\t              $tooltip.hide();\n\t            }\n\t          }, options.delay.hide);\n\t\n\t        };\n\t\n\t        var _blur;\n\t        var _tipToHide;\n\t        $tooltip.hide = function(blur) {\n\t\n\t          if(!$tooltip.$isShown) return;\n\t          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\t\n\t          // store blur value for leaveAnimateCallback to use\n\t          _blur = blur;\n\t\n\t          // store current tipElement reference to use\n\t          // in leaveAnimateCallback\n\t          _tipToHide = tipElement;\n\t\n\t          // Support v1.3+ $animate\n\t          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\n\t          var promise = $animate.leave(tipElement, leaveAnimateCallback);\n\t          if(promise && promise.then) promise.then(leaveAnimateCallback);\n\t\n\t          $tooltip.$isShown = scope.$isShown = false;\n\t          safeDigest(scope);\n\t\n\t          // Unbind events\n\t          if(options.keyboard && tipElement !== null) {\n\t            unbindKeyboardEvents();\n\t          }\n\t\n\t          if(options.autoClose && tipElement !== null) {\n\t            unbindAutoCloseEvents();\n\t          }\n\t        };\n\t\n\t        function leaveAnimateCallback() {\n\t          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\t\n\t          // check if current tipElement still references\n\t          // the same element when hide was called\n\t          if (tipElement === _tipToHide) {\n\t            // Allow to blur the input when hidden, like when pressing enter key\n\t            if(_blur && options.trigger === 'focus') {\n\t              return element[0].blur();\n\t            }\n\t\n\t            // clean up child scopes\n\t            destroyTipElement();\n\t          }\n\t        }\n\t\n\t        $tooltip.toggle = function() {\n\t          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n\t        };\n\t\n\t        $tooltip.focus = function() {\n\t          tipElement[0].focus();\n\t        };\n\t\n\t        $tooltip.setEnabled = function(isEnabled) {\n\t          options.bsEnabled = isEnabled;\n\t        };\n\t\n\t        // Protected methods\n\t\n\t        $tooltip.$applyPlacement = function() {\n\t          if(!tipElement) return;\n\t\n\t          // Determine if we're doing an auto or normal placement\n\t          var placement = options.placement,\n\t              autoToken = /\\s?auto?\\s?/i,\n\t              autoPlace  = autoToken.test(placement);\n\t\n\t          if (autoPlace) {\n\t            placement = placement.replace(autoToken, '') || defaults.placement;\n\t          }\n\t\n\t          // Need to add the position class before we get\n\t          // the offsets\n\t          tipElement.addClass(options.placement);\n\t\n\t          // Get the position of the target element\n\t          // and the height and width of the tooltip so we can center it.\n\t          var elementPosition = getPosition(),\n\t              tipWidth = tipElement.prop('offsetWidth'),\n\t              tipHeight = tipElement.prop('offsetHeight');\n\t\n\t          // If we're auto placing, we need to check the positioning\n\t          if (autoPlace) {\n\t            var originalPlacement = placement;\n\t            var container = options.container ? angular.element(document.querySelector(options.container)) : element.parent();\n\t            var containerPosition = getPosition(container);\n\t\n\t            // Determine if the vertical placement\n\t            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > containerPosition.bottom) {\n\t              placement = originalPlacement.replace('bottom', 'top');\n\t            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < containerPosition.top) {\n\t              placement = originalPlacement.replace('top', 'bottom');\n\t            }\n\t\n\t            // Determine the horizontal placement\n\t            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\n\t            // and flow in the opposite direction of their placement.\n\t            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\n\t                elementPosition.right + tipWidth > containerPosition.width) {\n\t\n\t              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\n\t            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\n\t                elementPosition.left - tipWidth < containerPosition.left) {\n\t\n\t              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\n\t            }\n\t\n\t            tipElement.removeClass(originalPlacement).addClass(placement);\n\t          }\n\t\n\t          // Get the tooltip's top and left coordinates to center it with this directive.\n\t          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n\t          applyPlacementCss(tipPosition.top, tipPosition.left);\n\t        };\n\t\n\t        $tooltip.$onKeyUp = function(evt) {\n\t          if (evt.which === 27 && $tooltip.$isShown) {\n\t            $tooltip.hide();\n\t            evt.stopPropagation();\n\t          }\n\t        };\n\t\n\t        $tooltip.$onFocusKeyUp = function(evt) {\n\t          if (evt.which === 27) {\n\t            element[0].blur();\n\t            evt.stopPropagation();\n\t          }\n\t        };\n\t\n\t        $tooltip.$onFocusElementMouseDown = function(evt) {\n\t          evt.preventDefault();\n\t          evt.stopPropagation();\n\t          // Some browsers do not auto-focus buttons (eg. Safari)\n\t          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n\t        };\n\t\n\t        // bind/unbind events\n\t        function bindTriggerEvents() {\n\t          var triggers = options.trigger.split(' ');\n\t          angular.forEach(triggers, function(trigger) {\n\t            if(trigger === 'click') {\n\t              element.on('click', $tooltip.toggle);\n\t            } else if(trigger !== 'manual') {\n\t              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n\t              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n\t              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n\t            }\n\t          });\n\t        }\n\t\n\t        function unbindTriggerEvents() {\n\t          var triggers = options.trigger.split(' ');\n\t          for (var i = triggers.length; i--;) {\n\t            var trigger = triggers[i];\n\t            if(trigger === 'click') {\n\t              element.off('click', $tooltip.toggle);\n\t            } else if(trigger !== 'manual') {\n\t              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n\t              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n\t              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n\t            }\n\t          }\n\t        }\n\t\n\t        function bindKeyboardEvents() {\n\t          if(options.trigger !== 'focus') {\n\t            tipElement.on('keyup', $tooltip.$onKeyUp);\n\t          } else {\n\t            element.on('keyup', $tooltip.$onFocusKeyUp);\n\t          }\n\t        }\n\t\n\t        function unbindKeyboardEvents() {\n\t          if(options.trigger !== 'focus') {\n\t            tipElement.off('keyup', $tooltip.$onKeyUp);\n\t          } else {\n\t            element.off('keyup', $tooltip.$onFocusKeyUp);\n\t          }\n\t        }\n\t\n\t        var _autoCloseEventsBinded = false;\n\t        function bindAutoCloseEvents() {\n\t          // use timeout to hookup the events to prevent\n\t          // event bubbling from being processed imediately.\n\t          $timeout(function() {\n\t            // Stop propagation when clicking inside tooltip\n\t            tipElement.on('click', stopEventPropagation);\n\t\n\t            // Hide when clicking outside tooltip\n\t            $body.on('click', $tooltip.hide);\n\t\n\t            _autoCloseEventsBinded = true;\n\t          }, 0, false);\n\t        }\n\t\n\t        function unbindAutoCloseEvents() {\n\t          if (_autoCloseEventsBinded) {\n\t            tipElement.off('click', stopEventPropagation);\n\t            $body.off('click', $tooltip.hide);\n\t            _autoCloseEventsBinded = false;\n\t          }\n\t        }\n\t\n\t        function stopEventPropagation(event) {\n\t          event.stopPropagation();\n\t        }\n\t\n\t        // Private methods\n\t\n\t        function getPosition($element) {\n\t          $element = $element || (options.target || element);\n\t\n\t          var el = $element[0];\n\t\n\t          var elRect = el.getBoundingClientRect();\n\t          if (elRect.width === null) {\n\t            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n\t            elRect = angular.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n\t          }\n\t\n\t          var elPos;\n\t          if (options.container === 'body') {\n\t            elPos = dimensions.offset(el);\n\t          } else {\n\t            elPos = dimensions.position(el);\n\t          }\n\t\n\t          return angular.extend({}, elRect, elPos);\n\t        }\n\t\n\t        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n\t          var offset;\n\t          var split = placement.split('-');\n\t\n\t          switch (split[0]) {\n\t          case 'right':\n\t            offset = {\n\t              top: position.top + position.height / 2 - actualHeight / 2,\n\t              left: position.left + position.width\n\t            };\n\t            break;\n\t          case 'bottom':\n\t            offset = {\n\t              top: position.top + position.height,\n\t              left: position.left + position.width / 2 - actualWidth / 2\n\t            };\n\t            break;\n\t          case 'left':\n\t            offset = {\n\t              top: position.top + position.height / 2 - actualHeight / 2,\n\t              left: position.left - actualWidth\n\t            };\n\t            break;\n\t          default:\n\t            offset = {\n\t              top: position.top - actualHeight,\n\t              left: position.left + position.width / 2 - actualWidth / 2\n\t            };\n\t            break;\n\t          }\n\t\n\t          if(!split[1]) {\n\t            return offset;\n\t          }\n\t\n\t          // Add support for corners @todo css\n\t          if(split[0] === 'top' || split[0] === 'bottom') {\n\t            switch (split[1]) {\n\t            case 'left':\n\t              offset.left = position.left;\n\t              break;\n\t            case 'right':\n\t              offset.left =  position.left + position.width - actualWidth;\n\t            }\n\t          } else if(split[0] === 'left' || split[0] === 'right') {\n\t            switch (split[1]) {\n\t            case 'top':\n\t              offset.top = position.top - actualHeight;\n\t              break;\n\t            case 'bottom':\n\t              offset.top = position.top + position.height;\n\t            }\n\t          }\n\t\n\t          return offset;\n\t        }\n\t\n\t        function applyPlacementCss(top, left) {\n\t          tipElement.css({ top: top + 'px', left: left + 'px' });\n\t        }\n\t\n\t        function destroyTipElement() {\n\t          // Cancel pending callbacks\n\t          clearTimeout(timeout);\n\t\n\t          if($tooltip.$isShown && tipElement !== null) {\n\t            if(options.autoClose) {\n\t              unbindAutoCloseEvents();\n\t            }\n\t\n\t            if(options.keyboard) {\n\t              unbindKeyboardEvents();\n\t            }\n\t          }\n\t\n\t          if(tipScope) {\n\t            tipScope.$destroy();\n\t            tipScope = null;\n\t          }\n\t\n\t          if(tipElement) {\n\t            tipElement.remove();\n\t            tipElement = $tooltip.$element = null;\n\t          }\n\t        }\n\t\n\t        return $tooltip;\n\t\n\t      }\n\t\n\t      // Helper functions\n\t\n\t      function safeDigest(scope) {\n\t        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n\t      }\n\t\n\t      function findElement(query, element) {\n\t        return angular.element((element || document).querySelectorAll(query));\n\t      }\n\t\n\t      var fetchPromises = {};\n\t      function fetchTemplate(template) {\n\t        if(fetchPromises[template]) return fetchPromises[template];\n\t        return (fetchPromises[template] = $q.when($templateCache.get(template) || $http.get(template))\n\t        .then(function(res) {\n\t          if(angular.isObject(res)) {\n\t            $templateCache.put(template, res.data);\n\t            return res.data;\n\t          }\n\t          return res;\n\t        }));\n\t      }\n\t\n\t      return TooltipFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsTooltip', [\"$window\", \"$location\", \"$sce\", \"$tooltip\", \"$$rAF\", function($window, $location, $sce, $tooltip, $$rAF) {\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      scope: true,\n\t      link: function postLink(scope, element, attr, transclusion) {\n\t\n\t        // Directive options\n\t        var options = {scope: scope};\n\t        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // overwrite inherited title value when no value specified\n\t        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n\t        if (!scope.hasOwnProperty('title')){\n\t          scope.title = '';\n\t        }\n\t\n\t        // Observe scope attributes for change\n\t        attr.$observe('title', function(newValue) {\n\t          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n\t            var oldValue = scope.title;\n\t            scope.title = $sce.trustAsHtml(newValue);\n\t            angular.isDefined(oldValue) && $$rAF(function() {\n\t              tooltip && tooltip.$applyPlacement();\n\t            });\n\t          }\n\t        });\n\t\n\t        // Support scope as an object\n\t        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n\t          if(angular.isObject(newValue)) {\n\t            angular.extend(scope, newValue);\n\t          } else {\n\t            scope.title = newValue;\n\t          }\n\t          angular.isDefined(oldValue) && $$rAF(function() {\n\t            tooltip && tooltip.$applyPlacement();\n\t          });\n\t        }, true);\n\t\n\t        // Visibility binding support\n\t        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n\t          if(!tooltip || !angular.isDefined(newValue)) return;\n\t          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n\t          newValue === true ? tooltip.show() : tooltip.hide();\n\t        });\n\t\n\t        // Enabled binding support\n\t        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n\t          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n\t          if(!tooltip || !angular.isDefined(newValue)) return;\n\t          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n\t          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n\t        });\n\t\n\t        // Initialize popover\n\t        var tooltip = $tooltip(element, options);\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if(tooltip) tooltip.destroy();\n\t          options = null;\n\t          tooltip = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t// Source: typeahead.js\n\tangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\t\n\t  .provider('$typeahead', function() {\n\t\n\t    var defaults = this.defaults = {\n\t      animation: 'am-fade',\n\t      prefixClass: 'typeahead',\n\t      prefixEvent: '$typeahead',\n\t      placement: 'bottom-left',\n\t      template: 'typeahead/typeahead.tpl.html',\n\t      trigger: 'focus',\n\t      container: false,\n\t      keyboard: true,\n\t      html: false,\n\t      delay: 0,\n\t      minLength: 1,\n\t      filter: 'filter',\n\t      limit: 6,\n\t      comparator: ''\n\t    };\n\t\n\t    this.$get = [\"$window\", \"$rootScope\", \"$tooltip\", \"$timeout\", function($window, $rootScope, $tooltip, $timeout) {\n\t\n\t      var bodyEl = angular.element($window.document.body);\n\t\n\t      function TypeaheadFactory(element, controller, config) {\n\t\n\t        var $typeahead = {};\n\t\n\t        // Common vars\n\t        var options = angular.extend({}, defaults, config);\n\t\n\t        $typeahead = $tooltip(element, options);\n\t        var parentScope = config.scope;\n\t        var scope = $typeahead.$scope;\n\t\n\t        scope.$resetMatches = function(){\n\t          scope.$matches = [];\n\t          scope.$activeIndex = 0;\n\t        };\n\t        scope.$resetMatches();\n\t\n\t        scope.$activate = function(index) {\n\t          scope.$$postDigest(function() {\n\t            $typeahead.activate(index);\n\t          });\n\t        };\n\t\n\t        scope.$select = function(index, evt) {\n\t          scope.$$postDigest(function() {\n\t            $typeahead.select(index);\n\t          });\n\t        };\n\t\n\t        scope.$isVisible = function() {\n\t          return $typeahead.$isVisible();\n\t        };\n\t\n\t        // Public methods\n\t\n\t        $typeahead.update = function(matches) {\n\t          scope.$matches = matches;\n\t          if(scope.$activeIndex >= matches.length) {\n\t            scope.$activeIndex = 0;\n\t          }\n\t        };\n\t\n\t        $typeahead.activate = function(index) {\n\t          scope.$activeIndex = index;\n\t        };\n\t\n\t        $typeahead.select = function(index) {\n\t          var value = scope.$matches[index].value;\n\t          // console.log('$setViewValue', value);\n\t          controller.$setViewValue(value);\n\t          controller.$render();\n\t          scope.$resetMatches();\n\t          if(parentScope) parentScope.$digest();\n\t          // Emit event\n\t          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n\t        };\n\t\n\t        // Protected methods\n\t\n\t        $typeahead.$isVisible = function() {\n\t          if(!options.minLength || !controller) {\n\t            return !!scope.$matches.length;\n\t          }\n\t          // minLength support\n\t          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n\t        };\n\t\n\t        $typeahead.$getIndex = function(value) {\n\t          var l = scope.$matches.length, i = l;\n\t          if(!l) return;\n\t          for(i = l; i--;) {\n\t            if(scope.$matches[i].value === value) break;\n\t          }\n\t          if(i < 0) return;\n\t          return i;\n\t        };\n\t\n\t        $typeahead.$onMouseDown = function(evt) {\n\t          // Prevent blur on mousedown\n\t          evt.preventDefault();\n\t          evt.stopPropagation();\n\t        };\n\t\n\t        $typeahead.$onKeyDown = function(evt) {\n\t          if(!/(38|40|13)/.test(evt.keyCode)) return;\n\t\n\t          // Let ngSubmit pass if the typeahead tip is hidden\n\t          if($typeahead.$isVisible()) {\n\t            evt.preventDefault();\n\t            evt.stopPropagation();\n\t          }\n\t\n\t          // Select with enter\n\t          if(evt.keyCode === 13 && scope.$matches.length) {\n\t            $typeahead.select(scope.$activeIndex);\n\t          }\n\t\n\t          // Navigate with keyboard\n\t          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n\t          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n\t          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n\t          scope.$digest();\n\t        };\n\t\n\t        // Overrides\n\t\n\t        var show = $typeahead.show;\n\t        $typeahead.show = function() {\n\t          show();\n\t          // use timeout to hookup the events to prevent\n\t          // event bubbling from being processed imediately.\n\t          $timeout(function() {\n\t            $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n\t            if(options.keyboard) {\n\t              element.on('keydown', $typeahead.$onKeyDown);\n\t            }\n\t          }, 0, false);\n\t        };\n\t\n\t        var hide = $typeahead.hide;\n\t        $typeahead.hide = function() {\n\t          $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n\t          if(options.keyboard) {\n\t            element.off('keydown', $typeahead.$onKeyDown);\n\t          }\n\t          hide();\n\t        };\n\t\n\t        return $typeahead;\n\t\n\t      }\n\t\n\t      TypeaheadFactory.defaults = defaults;\n\t      return TypeaheadFactory;\n\t\n\t    }];\n\t\n\t  })\n\t\n\t  .directive('bsTypeahead', [\"$window\", \"$parse\", \"$q\", \"$typeahead\", \"$parseOptions\", function($window, $parse, $q, $typeahead, $parseOptions) {\n\t\n\t    var defaults = $typeahead.defaults;\n\t\n\t    return {\n\t      restrict: 'EAC',\n\t      require: 'ngModel',\n\t      link: function postLink(scope, element, attr, controller) {\n\t\n\t        // Directive options\n\t        var options = {scope: scope};\n\t        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'comparator', 'id'], function(key) {\n\t          if(angular.isDefined(attr[key])) options[key] = attr[key];\n\t        });\n\t\n\t        // Build proper ngOptions\n\t        var filter = options.filter || defaults.filter;\n\t        var limit = options.limit || defaults.limit;\n\t        var comparator = options.comparator || defaults.comparator;\n\t\n\t        var ngOptions = attr.ngOptions;\n\t        if(filter) ngOptions += ' | ' + filter + ':$viewValue';\n\t        if (comparator) ngOptions += ':' + comparator;\n\t        if(limit) ngOptions += ' | limitTo:' + limit;\n\t        var parsedOptions = $parseOptions(ngOptions);\n\t\n\t        // Initialize typeahead\n\t        var typeahead = $typeahead(element, controller, options);\n\t\n\t        // Watch options on demand\n\t        if(options.watchOptions) {\n\t          // Watch ngOptions values before filtering for changes, drop function calls\n\t          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n\t          scope.$watch(watchedOptions, function (newValue, oldValue) {\n\t            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n\t            parsedOptions.valuesFn(scope, controller).then(function (values) {\n\t              typeahead.update(values);\n\t              controller.$render();\n\t            });\n\t          }, true);\n\t        }\n\t\n\t        // Watch model for changes\n\t        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n\t          // console.warn('$watch', element.attr('ng-model'), newValue);\n\t          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n\t          parsedOptions.valuesFn(scope, controller)\n\t          .then(function(values) {\n\t            // Prevent input with no future prospect if selectMode is truthy\n\t            // @TODO test selectMode\n\t            if(options.selectMode && !values.length && newValue.length > 0) {\n\t              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n\t              return;\n\t            }\n\t            if(values.length > limit) values = values.slice(0, limit);\n\t            var isVisible = typeahead.$isVisible();\n\t            isVisible && typeahead.update(values);\n\t            // Do not re-queue an update if a correct value has been selected\n\t            if(values.length === 1 && values[0].value === newValue) return;\n\t            !isVisible && typeahead.update(values);\n\t            // Queue a new rendering that will leverage collection loading\n\t            controller.$render();\n\t          });\n\t        });\n\t\n\t        // modelValue -> $formatters -> viewValue\n\t        controller.$formatters.push(function(modelValue) {\n\t          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n\t          var displayValue = parsedOptions.displayValue(modelValue);\n\t          return displayValue === undefined ? '' : displayValue;\n\t        });\n\t\n\t        // Model rendering in view\n\t        controller.$render = function () {\n\t          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n\t          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\n\t          var index = typeahead.$getIndex(controller.$modelValue);\n\t          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n\t          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n\t          element.val(selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '').trim() : '');\n\t        };\n\t\n\t        // Garbage collection\n\t        scope.$on('$destroy', function() {\n\t          if (typeahead) typeahead.destroy();\n\t          options = null;\n\t          typeahead = null;\n\t        });\n\t\n\t      }\n\t    };\n\t\n\t  }]);\n\t\n\t})(window, document);\n\n\n/***/ },\n/* 30 */,\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _formControlsCommon = __webpack_require__(34);\n\t\n\tvar _formControlsCommon2 = _interopRequireDefault(_formControlsCommon);\n\t\n\tvar _formControlsCommonProperties = __webpack_require__(35);\n\t\n\tvar _formControlsCommonProperties2 = _interopRequireDefault(_formControlsCommonProperties);\n\t\n\tvar _formControlsDemos = __webpack_require__(36);\n\t\n\tvar _formControlsDemos2 = _interopRequireDefault(_formControlsDemos);\n\t\n\tvar _formControlsService = __webpack_require__(37);\n\t\n\tvar _formControlsService2 = _interopRequireDefault(_formControlsService);\n\t\n\tvar _formPolicy = __webpack_require__(49);\n\t\n\tvar _formPolicy2 = _interopRequireDefault(_formPolicy);\n\t\n\tvar _formSubmit = __webpack_require__(45);\n\t\n\tvar _formSubmit2 = _interopRequireDefault(_formSubmit);\n\t\n\tvar _formReset = __webpack_require__(43);\n\t\n\tvar _formReset2 = _interopRequireDefault(_formReset);\n\t\n\tvar _formInput = __webpack_require__(41);\n\t\n\tvar _formInput2 = _interopRequireDefault(_formInput);\n\t\n\tvar _formCheckbox = __webpack_require__(39);\n\t\n\tvar _formCheckbox2 = _interopRequireDefault(_formCheckbox);\n\t\n\tvar _formRadioButton = __webpack_require__(42);\n\t\n\tvar _formRadioButton2 = _interopRequireDefault(_formRadioButton);\n\t\n\tvar _formSelect = __webpack_require__(44);\n\t\n\tvar _formSelect2 = _interopRequireDefault(_formSelect);\n\t\n\tvar _formDate = __webpack_require__(40);\n\t\n\tvar _formDate2 = _interopRequireDefault(_formDate);\n\t\n\tvar _errorMessageContainer = __webpack_require__(38);\n\t\n\tvar _errorMessageContainer2 = _interopRequireDefault(_errorMessageContainer);\n\t\n\tvar _requiredMarker = __webpack_require__(46);\n\t\n\tvar _requiredMarker2 = _interopRequireDefault(_requiredMarker);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// import all of the documentation JS files\n\t// There should be a nicer way to do this, but this won't change very often...\n\t\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.docs.fixtures', [_formControlsCommon2.default, _formControlsCommonProperties2.default, _formControlsDemos2.default, _formControlsService2.default, _formPolicy2.default, _formReset2.default, _formSubmit2.default, _formInput2.default, _formCheckbox2.default, _formRadioButton2.default, _formSelect2.default, _formDate2.default, _errorMessageContainer2.default, _requiredMarker2.default]);\n\t\n\texports.default = mod.name;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _ngFormLib = __webpack_require__(18);\n\t\n\tvar _ngFormLib2 = _interopRequireDefault(_ngFormLib);\n\t\n\t__webpack_require__(29);\n\t\n\tvar _angularTranslate = __webpack_require__(5);\n\t\n\tvar _angularTranslate2 = _interopRequireDefault(_angularTranslate);\n\t\n\tvar _highlightPack = __webpack_require__(27);\n\t\n\tvar _highlightPack2 = _interopRequireDefault(_highlightPack);\n\t\n\tvar _PolicyBehaviourOnStateChange = __webpack_require__(47);\n\t\n\tvar _PolicyBehaviourOnStateChange2 = _interopRequireDefault(_PolicyBehaviourOnStateChange);\n\t\n\tvar _PolicyCheckForStateChanges = __webpack_require__(48);\n\t\n\tvar _PolicyCheckForStateChanges2 = _interopRequireDefault(_PolicyCheckForStateChanges);\n\t\n\tvar _PolicyStateDefinitions = __webpack_require__(50);\n\t\n\tvar _PolicyStateDefinitions2 = _interopRequireDefault(_PolicyStateDefinitions);\n\t\n\tvar _docFixtures = __webpack_require__(31);\n\t\n\tvar _docFixtures2 = _interopRequireDefault(_docFixtures);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// Import specific policies for the documentation website\n\t// No export, currently\n\t\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.docs', ['mgcrea.ngStrap', _ngFormLib2.default, _PolicyBehaviourOnStateChange2.default, _PolicyCheckForStateChanges2.default, _PolicyStateDefinitions2.default, _angularTranslate2.default,\n\t\n\t// require ALL of the docs /demo components\n\t_docFixtures2.default]);\n\t\n\t// import all of the documentation JS files\n\t\n\t\n\texports.default = mod.name;\n\t\n\t// Needed to bind to HTML and compile it when it is loaded\n\t\n\tmod.directive('bindCompile', ['$compile', function ($compile) {\n\t  return {\n\t    restrict: 'A',\n\t    replace: true,\n\t    link: function link(scope, element, attrs) {\n\t      scope.$watch(attrs.bindCompile, function (html) {\n\t        element[0].innerHTML = html;\n\t        $compile(element.contents())(scope);\n\t      });\n\t    }\n\t  };\n\t}]);\n\t\n\tmod.config(['$locationProvider', function ($locationProvider) {\n\t  // configure html5 to get links working on jsfiddle\n\t  $locationProvider.html5Mode(false);\n\t}]).config(['$anchorScrollProvider', function ($anchorScrollProvider) {\n\t  $anchorScrollProvider.disableAutoScrolling();\n\t}]).config(['$translateProvider', function ($translateProvider) {\n\t  var translations = __webpack_require__(78);\n\t  $translateProvider.translations('en', translations);\n\t  $translateProvider.preferredLanguage('enAU');\n\t  $translateProvider.useSanitizeValueStrategy(null);\n\t}])\n\t// Set the field-error-focus-scroll-position, to allow for the website's fixed header\n\t.config(['formPolicyServiceProvider', function (formPolicyServiceProvider) {\n\t  formPolicyServiceProvider.defaults.fieldFocusScrollOffset = 80;\n\t}]);\n\t\n\tmod.controller('MainController', ['$http', function ($http) {\n\t  var vm = this; // view-model\n\t\n\t  // Fetch the documentation config and store it on the rootScope (for laughs :)\n\t  var fileName = __webpack_require__(56);\n\t  $http.get(fileName).then(function (result) {\n\t    vm.DOC_CONFIG = result.data;\n\t    vm.REPO_HOST = result.data.repository.host;\n\t    vm.REPO = vm.REPO_HOST + result.data.repository.branch;\n\t    vm.VERSION = result.data.version;\n\t  });\n\t}]);\n\t\n\tmod.directive('docsComponent', [function () {\n\t  return {\n\t    restrict: 'A', // IE8 support\n\t    controller: 'MainController',\n\t    controllerAs: 'mainCtrl',\n\t    template: __webpack_require__(58)\n\t  };\n\t}]);\n\t\n\tmod.directive('docsNavbar', [function () {\n\t  __webpack_require__(55); // If the file is called *.html, it gets wrapped inside a JS module. This gives us just the HTML\n\t  return {\n\t    restrict: 'A', // IE8 support\n\t    template: __webpack_require__(62)\n\t  };\n\t}]);\n\t\n\tmod.directive('docsHeader', [function () {\n\t  return {\n\t    restrict: 'A', // IE8 support\n\t    template: __webpack_require__(61)\n\t  };\n\t}]);\n\t\n\tmod.directive('docsFooter', [function () {\n\t  return {\n\t    restrict: 'A', // IE8 support\n\t    template: __webpack_require__(59)\n\t  };\n\t}]);\n\t\n\tmod.directive('docsAffixedSidenav', [function () {\n\t  return {\n\t    restrict: 'A', // IE8 support\n\t    template: __webpack_require__(57)\n\t  };\n\t}]);\n\t\n\tmod.directive('docsSidenav', [function () {\n\t  return {\n\t    restrict: 'A', // IE8 support\n\t    template: __webpack_require__(63)\n\t  };\n\t}]);\n\t\n\tmod.directive('docsGettingStarted', [function () {\n\t  return {\n\t    restrict: 'A', // IE8 support\n\t    template: __webpack_require__(60)\n\t  };\n\t}]);\n\t\n\t// These directives are purely needed for documentation purposes\n\tmod.directive('code', function () {\n\t  return { restrict: 'E', terminal: true };\n\t});\n\t\n\tmod.directive('appendSource', ['$compile', 'indent', function ($compile, indent) {\n\t  return {\n\t    compile: function compile(element, attr) {\n\t\n\t      // Directive options\n\t      var options = { placement: 'after' };\n\t      _angular2.default.forEach(['placement', 'hlClass'], function (key) {\n\t        if (_angular2.default.isDefined(attr[key])) {\n\t          options[key] = attr[key];\n\t        }\n\t      });\n\t\n\t      var hlElement = _angular2.default.element('<div class=\"highlight\" ng-non-bindable><pre><code class=\"html\" style=\"margin:0\"></code></pre></div>');\n\t      var codeElement = hlElement.children('pre').children('code');\n\t      var elementHtml = indent(element.html());\n\t      codeElement.text(elementHtml);\n\t      if (options.hlClass) {\n\t        codeElement.addClass(options.hlClass);\n\t      }\n\t      element[options.placement](hlElement);\n\t      _highlightPack2.default.highlightBlock(codeElement[0]);\n\t    }\n\t  };\n\t}]);\n\t\n\tmod.directive('highlightBlock', ['indent', function (indent) {\n\t  return {\n\t    compile: function compile(element) {\n\t      element.html(indent(element.html()));\n\t      return function postLink(scope, element) {\n\t        _highlightPack2.default.highlightBlock(element[0]);\n\t      };\n\t    }\n\t  };\n\t}]);\n\t\n\tmod.value('indent', function (text, spaces) {\n\t\n\t  if (!text) {\n\t    return text;\n\t  }\n\t  var lines = text.split(/\\r?\\n/);\n\t  var prefix = '      '.substr(0, spaces || 0);\n\t  var i;\n\t\n\t  // Remove any leading blank lines\n\t  while (lines.length && lines[0].match(/^\\s*$/)) {\n\t    lines.shift();\n\t  }\n\t  // Remove any trailing blank lines\n\t  while (lines.length && lines[lines.length - 1].match(/^\\s*$/)) {\n\t    lines.pop();\n\t  }\n\t  // Calculate proper indent\n\t  var minIndent = 999;\n\t  for (i = 0; i < lines.length; i++) {\n\t    var line = lines[0];\n\t    var indent = line.match(/^\\s*/)[0];\n\t    if (indent !== line && indent.length < minIndent) {\n\t      minIndent = indent.length;\n\t    }\n\t  }\n\t\n\t  for (i = 0; i < lines.length; i++) {\n\t    lines[i] = prefix + lines[i].substring(minIndent).replace(/=\"\"/g, '');\n\t  }\n\t  lines.push('');\n\t  return lines.join('\\n');\n\t});\n\t\n\t// Anchor directive\n\t// Add anchor-like behaviour to any element, and take advantage of smooth scrolling\n\tmod.directive('ahref', ['$location', '$document', 'scrollContainerAPI', 'duScrollDuration', function ($location, $document, scrollContainerAPI, duScrollDuration) {\n\t  return {\n\t    restrict: 'A',\n\t    link: function link(scope, element, attrs) {\n\t      element.on('click', function () {\n\t        // The anchor reference should be valid\n\t        var ahref = attrs.ahref;\n\t        if (!ahref || ahref.indexOf('#') === -1) {\n\t          return;\n\t        }\n\t        var elemId = ahref.replace(/.*(?=#[^\\s]+$)/, '').substring(1);\n\t\n\t        // Only add the scroll to the history if directed to\n\t        if (attrs.useHash) {\n\t          $location.hash(elemId); // Change the URL\n\t          scope.$apply();\n\t        }\n\t        var target = $document[0].getElementById(elemId);\n\t        if (!target || !target.getBoundingClientRect) {\n\t          return;\n\t        }\n\t\n\t        var offset = parseInt(attrs.scrollOffset || 0) + (attrs.scrollBottom === 'true' ? -target.offsetHeight : 0);\n\t        var duration = attrs.duration ? parseInt(attrs.duration, 10) : duScrollDuration;\n\t        var container = scrollContainerAPI.getContainer(scope);\n\t        container.scrollToElement(_angular2.default.element(target), isNaN(offset) ? 0 : offset, isNaN(duration) ? 0 : duration);\n\t      });\n\t    }\n\t  };\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tvar _docs = __webpack_require__(32);\n\t\n\tvar _docs2 = _interopRequireDefault(_docs);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs', [_docs2.default]);\n\t\n\texports.default = mod.name;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.common.docs.formControlsCommon', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formControlsCommonDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    template: __webpack_require__(64)\n\t  };\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.common.docs.formControlsCommonProperties', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formControlsCommonPropertiesDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    template: __webpack_require__(65)\n\t  };\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.common.docs.formControlsDemos', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formControlsDemosDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'FormControlsDemosController',\n\t    template: __webpack_require__(66)\n\t  };\n\t});\n\t\n\tmod.controller('FormControlsDemosController', function () {\n\t  var vm = this;\n\t\n\t  vm.titleData = [{ label: 'Dr' }, { label: 'Mr' }, { label: 'Ms' }];\n\t\n\t  vm.schoolData = [{ label: 'Primary' }, { label: 'Secondary' }, { label: 'Tertiary' }];\n\t\n\t  vm.formDemo4 = {\n\t    name: '',\n\t    education: [{\n\t      name: 'Melbourne High School',\n\t      type: vm.schoolData[1]\n\t    }, {\n\t      name: undefined,\n\t      type: undefined\n\t    }]\n\t  };\n\t\n\t  vm.addSchool = function () {\n\t    vm.formDemo4.education.push({ name: '', type: undefined });\n\t  };\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.common.docs.formControlsService', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formControlsServiceDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'FormControlServiceDemoCtrl',\n\t    template: __webpack_require__(67)\n\t  };\n\t});\n\t\n\tmod.controller('FormControlServiceDemoCtrl', function () {\n\t  // var vm = this;\n\t  //\n\t  // vm.titleData = [\n\t  //   {label: 'Dr'},\n\t  //   {label: 'Mr'},\n\t  //   {label: 'Ms'}\n\t  // ];\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.errorMessageContainer.docs.errorMessageContainer', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('errorMessageContainerDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'ErrorMessageContainerDemoController',\n\t    template: __webpack_require__(68)\n\t  };\n\t});\n\t\n\tmod.controller('ErrorMessageContainerDemoController', function () {\n\t  var vm = this;\n\t\n\t  vm.titleData = [{ label: 'Dr' }, { label: 'Mr' }, { label: 'Ms' }];\n\t\n\t  vm.toggleTextError = function () {\n\t    vm.myTextError = vm.myTextError ? '' : 'My text error. ';\n\t  };\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.formCheckbox.docs.formCheckbox', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formCheckboxDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'FormCheckboxDemoController',\n\t    template: __webpack_require__(69)\n\t  };\n\t});\n\t\n\tmod.controller('FormCheckboxDemoController', function () {\n\t  var vm = this;\n\t\n\t  vm.titleData = [{ label: 'Dr' }, { label: 'Mr' }, { label: 'Ms' }];\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.formDate.docs.formDate', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formDateDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    template: __webpack_require__(70)\n\t  };\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.formInput.docs.formInput', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formInputDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    template: __webpack_require__(71)\n\t  };\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.formRadioButton.docs.formRadioButton', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formRadioButtonDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'FormRadioButtonDemoController',\n\t    template: __webpack_require__(72)\n\t  };\n\t});\n\t\n\tmod.controller('FormRadioButtonDemoController', function () {\n\t  var vm = this;\n\t\n\t  vm.titleData = [{ label: 'Amazing Spiderman, The' }, { label: 'Batman' }, { label: 'Catwoman' }];\n\t\n\t  vm.data = {\n\t    radioVal2: 2 // Initial value of second radio button\n\t  };\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.formReset.docs.formReset', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formResetDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'FormResetDemoController',\n\t    template: __webpack_require__(73)\n\t  };\n\t});\n\t\n\tmod.controller('FormResetDemoController', function () {\n\t  var vm = this;\n\t\n\t  vm.titleData = [{ label: 'Dr' }, { label: 'Mr' }, { label: 'Ms' }];\n\t\n\t  // Demonstrate the reset directive with non-empty data models\n\t  vm.data = {\n\t    name: 'Not-empty-initially',\n\t    title: vm.titleData[2]\n\t  };\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.formSelect.docs.formSelect', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formSelectDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'FormSelectDemoController',\n\t    template: __webpack_require__(74)\n\t  };\n\t});\n\t\n\tmod.controller('FormSelectDemoController', function () {\n\t  var vm = this;\n\t\n\t  vm.titleData = [{ label: 'Dr' }, { label: 'Mr' }, { label: 'Ms' }];\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.formSubmit.docs.formSubmit', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formSubmitDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'FormSubmitDemoController',\n\t    template: __webpack_require__(75)\n\t  };\n\t});\n\t\n\tmod.controller('FormSubmitDemoController', function () {\n\t  var vm = this;\n\t\n\t  vm.callWhenValid = function () {\n\t    window.alert('Form is valid');\n\t  };\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.controls.requiredMarker.docs.requiredMarker', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('requiredMarkerDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'RequiredMarkerDemoController',\n\t    template: __webpack_require__(76)\n\t  };\n\t});\n\t\n\tmod.controller('RequiredMarkerDemoController', function () {\n\t  var vm = this;\n\t\n\t  vm.titleData = [{ label: 'Dr' }, { label: 'Mr' }, { label: 'Ms' }];\n\t});\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\t__webpack_require__(26);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// The form policy intentionally has no hard dependencies.\n\t// If there are form-policy values that exist when the service is being constructed, it will use them.\n\t// Otherwise it will use no-op policy functions.\n\tvar mod = _angular2.default.module('ngFormLib.policy.behaviourOnStateChange', ['duScroll']);\n\t\n\texports.default = mod.name;\n\t\n\t// Helper functions\n\t\n\tvar timeoutPromise, scrollPromise;\n\t\n\tfunction setFocusOnField($document, $timeout, duration, element, offset) {\n\t  // If no offsetHeight then assume it's invisible and let the next error field take the scroll position\n\t  if (element[0].offsetHeight) {\n\t    //console.log('Error focus set to: ' + domElement.id);\n\t    $timeout.cancel(timeoutPromise);\n\t    $timeout.cancel(scrollPromise); // This doesn't seem to make a difference on a Mac - user-generated scrolling does not get cancelled\n\t    timeoutPromise = $timeout(function () {\n\t      element[0].focus();\n\t    }, duration);\n\t    scrollPromise = $document.scrollToElement(element, offset, duration); // scrollToElement() comes from the angular-scroll directive // No offset\n\t    return true;\n\t  }\n\t  return false; // Indicate that we did NOT set the focus\n\t}\n\t\n\t/**\n\t * Returns a function that can be called when an error is showing FOR THIS FIELD. The function is dynamically created\n\t *  based on the form policy.\n\t *\n\t *  The dynamic function sets the focus if the form policy allows it to\n\t *  The input parameters are:\n\t *    - DOMElement of the current form-field control that could get focus\n\t *    - whether an error is showing on the form-field\n\t *    - whether the form was just attempted to be submitted\n\t *\n\t *  The returned function is stored against the form controller as _applyFormFocusPolicy(...)\n\t *  _applyFormFocusPolicy() should be called by the field-error-controller directive whenever the field state changes,\n\t *   and when a form-submit event occurs.\n\t */\n\tmod.service('formPolicyBehaviourOnStateChangeLibrary', ['$document', '$timeout', 'duScrollDuration', function ($document, $timeout, duScrollDuration) {\n\t\n\t  // Policy implementation functions\n\t  function behaviourOnErrorFocusFirstField(formController) {\n\t    // We want to pretend that there is a single controller for the form, for the purpose of managing the focus.\n\t    // Otherwise, the main form sets the focus, then the subform (ng-form) also sets the focus\n\t    var focusController = formController._parentController || formController;\n\t\n\t    return {\n\t      // This function is called by the fieldErrorController when the fieldState changes and when the form is submitted\n\t      applyBehaviour: function applyBehaviour(fieldElem, fieldState, formSubmitAttempted) {\n\t        // Set the focus to the field if there is an error showing and a form-submit has been attempted\n\t        if (fieldState === 'error' && formSubmitAttempted) {\n\t          // ...and if the focusErrorElement is blank...\n\t          //if (!focusController._focusErrorElement && setFocusOnField($document, $timeout, duScrollDuration, fieldElem, formController._policy.fieldFocusScrollOffset)) {\n\t          //  focusController._focusErrorElement = fieldElem;\n\t          //}\n\t\n\t          // Make sure element is the first field with an error based on DOM order\n\t          var firstElement = $document[0][focusController.$name].querySelectorAll('.ng-invalid')[0];\n\t          var isFirstElement = firstElement ? firstElement.id === fieldElem[0].id : false;\n\t\n\t          // ...and if the focusErrorElement is blank...\n\t          if (!focusController._focusErrorElement && isFirstElement && setFocusOnField($document, $timeout, duScrollDuration, fieldElem, formController._policy.fieldFocusScrollOffset)) {\n\t            focusController._focusErrorElement = fieldElem;\n\t          }\n\t        }\n\t      },\n\t      resetBehaviour: function resetBehaviour() {\n\t        focusController._focusErrorElement = null;\n\t      }\n\t    };\n\t  }\n\t\n\t  return {\n\t    onSubmitFocusFirstFieldIfError: behaviourOnErrorFocusFirstField\n\t  };\n\t}]);\n\t\n\tmod.factory('formPolicyBehaviourOnStateChange', ['formPolicyBehaviourOnStateChangeLibrary', function (formPolicyBehaviourOnStateChangeLibrary) {\n\t  return formPolicyBehaviourOnStateChangeLibrary.onSubmitFocusFirstFieldIfError;\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLib.policy.checkForStateChanges', []);\n\t\n\texports.default = mod.name;\n\t\n\t// Policy implementation functions\n\t\n\tfunction checkForStateChangesOnBlurUntilSubmitThenOnChange(scope, element, name, stateDefinitions, ngModelController) {\n\t  var errorWatch;\n\t\n\t  scope.$on('event:FormSubmitAttempted', function () {\n\t    (errorWatch || _angular2.default.noop)(); // Remove the error watcher, which may-or-may-not be present\n\t    errorWatch = watchForErrorChanges(scope, stateDefinitions, ngModelController);\n\t    //console.log('heard formSubmitAttempted');\n\t  });\n\t\n\t  // Listen for the form reset event and cancel the submit-watcher\n\t  scope.$on('event:FormReset', function () {\n\t    (errorWatch || _angular2.default.noop)(); // Remove the error watcher, which may-or-may-not be present\n\t    //console.log('heard formReset');\n\t  });\n\t\n\t  watchForBlurEvent(scope, element, name, stateDefinitions, ngModelController);\n\t}\n\t\n\tfunction checkForStateChangesOnChange(scope, element, name, stateDefinitions, ngModelController) {\n\t  // Watch the error condition for changes, and flag the field as inErrorShowing when the errorCondition is true\n\t  watchForErrorChanges(scope, stateDefinitions, ngModelController);\n\t}\n\t\n\tfunction checkForStateChangesOnBlur(scope, element, name, stateDefinitions, ngModelController) {\n\t  watchForBlurEvent(scope, element, name, stateDefinitions, ngModelController);\n\t}\n\t\n\t// Helper methods\n\tfunction createWatch(scope, ngModelController, stateName, stateCondition) {\n\t  scope.$watch(stateCondition, function (value) {\n\t    if (value === true) {\n\t      ngModelController.fieldState = stateName; // THIS IS THE KEY FLAG\n\t      //console.log('A: ' + stateCondition + ' = ' + value);\n\t    }\n\t  });\n\t}\n\t\n\tfunction watchForErrorChanges(scope, stateDefinitions, ngModelController) {\n\t  // Set up a watch for each state definition... expensive?\n\t  for (var stateName in stateDefinitions) {\n\t    if (stateDefinitions.hasOwnProperty(stateName)) {\n\t      createWatch(scope, ngModelController, stateName, stateDefinitions[stateName]);\n\t    }\n\t  }\n\t}\n\t\n\tfunction evaluateFieldStates(scope, stateDefinitions, ngModelController) {\n\t  for (var prop in stateDefinitions) {\n\t    if (scope.$eval(stateDefinitions[prop]) === true) {\n\t      ngModelController.fieldState = prop;\n\t      //console.log('B: ' + stateDefinitions[prop] + ' = ' + prop);\n\t      break;\n\t    }\n\t  }\n\t}\n\t\n\tfunction watchForBlurEvent(scope, element, fieldName, stateDefinitions, ngModelController) {\n\t  // Determine the initial field state. First state to evaluate to TRUE wins\n\t  evaluateFieldStates(scope, stateDefinitions, ngModelController);\n\t\n\t  element.bind('blur', function ngShowWatchAction() {\n\t    evaluateFieldStates(scope, stateDefinitions, ngModelController);\n\t    scope.$apply(); // We are in a jQueryLite handler and have changed a scope property - fire the watchers!\n\t  });\n\t}\n\t\n\t// Define the different display trigger implementations available\n\tmod.constant('formPolicyCheckForStateChangesLibrary', function () {\n\t  return {\n\t    onChange: checkForStateChangesOnChange,\n\t    onBlur: checkForStateChangesOnBlur,\n\t    onBlurUntilSubmitThenOnChange: checkForStateChangesOnBlurUntilSubmitThenOnChange\n\t  };\n\t}());\n\t\n\t// This 'service' is the default implementation of the check-for-errors policy\n\tmod.factory('formPolicyCheckForStateChanges', ['formPolicyCheckForStateChangesLibrary', function (formPolicyCheckForStateChangesLibrary) {\n\t  return formPolicyCheckForStateChangesLibrary.onBlurUntilSubmitThenOnChange;\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar mod = _angular2.default.module('ngFormLibDocs.policy.docs.formPolicy', []);\n\t\n\texports.default = mod.name;\n\t\n\t\n\tmod.directive('formPolicyDocs', function () {\n\t  return {\n\t    restrict: 'A',\n\t    controller: 'FormPolicyDemoCtrl',\n\t    template: __webpack_require__(77)\n\t  };\n\t});\n\t\n\tmod.controller('FormPolicyDemoCtrl', ['formPolicyCheckForStateChangesLibrary', function (formPolicyCheckForStateChangesLibrary) {\n\t  var vm = this;\n\t\n\t  vm.titleData = [{ label: 'Dr' }, { label: 'Mr' }, { label: 'Ms' }];\n\t\n\t  vm.myCustomPolicy = {\n\t    checkForStateChanges: formPolicyCheckForStateChangesLibrary.onChange\n\t  };\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _angular = __webpack_require__(1);\n\t\n\tvar _angular2 = _interopRequireDefault(_angular);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// Define the different display trigger implementations available\n\tvar mod = _angular2.default.module('ngFormLib.policy.stateDefinitions', []);\n\t\n\texports.default = mod.name;\n\t\n\t// Error Conditions\n\t\n\tfunction errorOnSubmit(formName, fieldName) {\n\t  return formName + '._formSubmitAttempted && ' + fieldName + '.$invalid';\n\t}\n\t\n\tfunction errorOnDirty(formName, fieldName) {\n\t  return fieldName + '.$dirty && ' + fieldName + '.$invalid';\n\t}\n\t\n\tfunction errorImmediately(formName, fieldName) {\n\t  return fieldName + '.$invalid';\n\t}\n\t\n\tfunction errorOnSubmitAndDirty(formName, fieldName) {\n\t  return formName + '._formSubmitAttempted && ' + fieldName + '.$dirty && ' + fieldName + '.$invalid';\n\t}\n\t\n\tfunction errorOnSubmitOrDirty(formName, fieldName) {\n\t  return '(' + formName + '._formSubmitAttempted || ' + fieldName + '.$dirty) && ' + fieldName + '.$invalid';\n\t}\n\t\n\tmod.value('formPolicyErrorDefinitionLibrary', function () {\n\t  return {\n\t    onSubmit: errorOnSubmit,\n\t    onDirty: errorOnDirty,\n\t    immediately: errorImmediately,\n\t    onSubmitAndDirty: errorOnSubmitAndDirty,\n\t    onSubmitOrDirty: errorOnSubmitOrDirty\n\t  };\n\t}());\n\t\n\t// Success Definitions\n\tfunction successOnSubmit(formName, fieldName) {\n\t  return formName + '._formSubmitAttempted && ' + fieldName + '.$valid';\n\t}\n\t\n\tfunction successOnDirty(formName, fieldName) {\n\t  return fieldName + '.$dirty && ' + fieldName + '.$valid';\n\t}\n\t\n\tfunction successImmediately(formName, fieldName) {\n\t  return fieldName + '.$valid';\n\t}\n\t\n\tfunction successOnSubmitAndDirty(formName, fieldName) {\n\t  return formName + '._formSubmitAttempted && ' + fieldName + '.$dirty && ' + fieldName + '.$valid';\n\t}\n\t\n\tfunction successOnSubmitOrDirty(formName, fieldName) {\n\t  return '(' + formName + '._formSubmitAttempted || ' + fieldName + '.$dirty) && ' + fieldName + '.$valid';\n\t}\n\t\n\tmod.value('formPolicySuccessDefinitionLibrary', function () {\n\t  return {\n\t    onSubmit: successOnSubmit,\n\t    onDirty: successOnDirty,\n\t    immediately: successImmediately,\n\t    onSubmitAndDirty: successOnSubmitAndDirty,\n\t    onSubmitOrDirty: successOnSubmitOrDirty\n\t  };\n\t}());\n\t\n\t// This 'service' is the default implementation of the check-for-errors policy\n\tmod.factory('formPolicyStateDefinitions', ['formPolicyErrorDefinitionLibrary', 'formPolicySuccessDefinitionLibrary', function (formPolicyErrorDefinitionLibrary, formPolicySuccessDefinitionLibrary) {\n\t\n\t  // The FieldErrorController will ask for the stateDefinitions, passing the formName and fieldName as parameters\n\t  return function (formName, fieldName) {\n\t    // Return an object with the stateName(key) and the stateDefinition string(value)\n\t    return {\n\t      'error': formPolicyErrorDefinitionLibrary.onSubmitOrDirty(formName, fieldName),\n\t      'success': formPolicySuccessDefinitionLibrary.onSubmitOrDirty(formName, fieldName)\n\t    };\n\t  };\n\t}]);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 51 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 52 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 54 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/assets/aside.html\";\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/assets/config/docsConfig.json\";\n\n/***/ },\n/* 57 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-sidebar hidden-print\\\" role=\\\"complementary\\\" data-offset-top=\\\"-100\\\" bs-affix bs-scrollspy-list docs-sidenav></div>\\n\";\n\n/***/ },\n/* 58 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div docs-navbar></div>\\n<div docs-header></div>\\n\\n<div role=\\\"content\\\">\\n  <div class=\\\"container\\\">\\n    <main role=\\\"main\\\" class=\\\"main\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-2 hidden-sm hidden-xs\\\">\\n          <div docs-affixed-sidenav></div>\\n        </div>\\n        <div class=\\\"col-md-10\\\">\\n          <div docs-getting-started></div>\\n          <div id=\\\"directives\\\">\\n            <div ng-repeat=\\\"menuContent in mainCtrl.DOC_CONFIG.sitemap\\\" bind-compile=\\\"menuContent.template\\\"></div>\\n          </div>\\n        </div>\\n      </div>\\n    </main>\\n  </div>\\n</div>\\n\\n<div docs-footer></div>\\n\";\n\n/***/ },\n/* 59 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<footer class=\\\"bs-footer\\\">\\n  <div class=\\\"container\\\">\\n    <p class=\\\"pull-right\\\"><a href=\\\"#\\\">Back to top</a></p>\\n    <hr/>\\n    <p>Documentation based upon <a href=\\\"http://http://mgcrea.github.io/angular-strap\\\" target=\\\"_blank\\\">AngularStrap</a> created by <a href=\\\"//plus.google.com/+OlivierLouvignes/posts?rel=author\\\" target=\\\"_blank\\\">Olivier Louvignes</a>.</p>\\n    <p>Using <a href=\\\"http://twitter.github.com/bootstrap\\\" target=\\\"_blank\\\">Twitter Bootstrap</a> and the <a href=\\\"css/docs.css\\\" target=\\\"_blank\\\">Bootstrap's docs styles</a> designed and built by <a href=\\\"http://twitter.com/mdo\\\" target=\\\"_blank\\\">@mdo</a> and <a href=\\\"http://twitter.com/fat\\\" target=\\\"_blank\\\">@fat</a>.</p>\\n    <p>Code licensed under <a href=\\\"{{mainCtrl.REPO}}LICENSE.md\\\" target=\\\"_blank\\\">The MIT License</a>, documentation under <a href=\\\"http://creativecommons.org/licenses/by/3.0/\\\">CC BY 3.0</a>.</p>\\n    <ul class=\\\"footer-links\\\">\\n      <li><a href=\\\"{{mainCtrl.REPO_HOST}}issues?state=open\\\">Issues</a>\\n      </li>\\n      <li class=\\\"muted\\\">·</li>\\n      <li><a href=\\\"{{mainCtrl.REPO_HOST}}/wiki\\\">Roadmap and changelog</a>\\n      </li>\\n      \\n        \\n      \\n    </ul>\\n  </div>\\n</footer>\\n\";\n\n/***/ },\n/* 60 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"gettingStarted\\\">Getting started <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}readme.md\\\" target=\\\"_blank\\\">readme.md</a>\\n    </h1>\\n    <code>ngFormLib</code>\\n  </div>\\n\\n  <div class=\\\"callout callout-info\\\">\\n    <h4 id=\\\"project-history\\\">About the project</h4>\\n    <p>Angular Form Library is a set of Angular components that allow you to configure how form validation works across your entire site,\\n      plus a set of accessibility-aware input controls that are easy to integrate into your AngularJS 1.2+ application.</p>\\n    <p>Designed with Bootstrap CSS styles and markup in mind, Angular Form Library can be easily customised to work with your existing\\n      CSS and form markup.</p>\\n  </div>\\n\\n  <h2 id=\\\"project-quickstart\\\">Quick Start</h2>\\n  <p>Install and manage Angular Form Library with <a href=\\\"http://bower.io\\\">Bower</a>.\\n    \\n    \\n  </p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"bash\\\" highlight-block>\\n        $ npm install angular-form-lib --save\\n      </code>\\n    </pre>\\n  </div>\\n\\n  <p>Load the required JavaScript libraries (Bootstrap's JavaScript files are not needed).</p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"html\\\" highlight-block>\\n        &lt;script src=\\\"//ajax.googleapis.com/ajax/libs/angularjs/1.3.9/angular.min.js\\\"&gt;&lt;/script&gt;\\n      </code>\\n    </pre>\\n  </div>\\n  <p>Inject the <code>ngFormLib</code>module into your application.</p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"javascript\\\" highlight-block>\\n        angular.module('myApp', ['ngFormLib']);\\n      </code>\\n    </pre>\\n  </div>\\n\\n  <p>Typically you would load both the module and the default policies into your application:</p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"javascript\\\" highlight-block>\\n        angular.module('myApp', [\\n          'ngFormLib',\\n          'duScroll',   // Scrolling behaviour for when the state changes to an error and we wish to focus the field\\n          'ngFormLib.policy.behaviourOnStateChange',\\n          'ngFormLib.policy.checkForStateChanges',\\n          'ngFormLib.policy.stateDefinitions'\\n        ]);\\n      </code>\\n    </pre>\\n  </div>\\n\\n  \\n    \\n    \\n    \\n      \\n      \\n    \\n    \\n  \\n\\n  <div class=\\\"callout callout-info\\\">\\n    <h4>Custom builds</h4>\\n    <p>Angular Form Library provides independently built modules that can be loaded separately:</p>\\n    <div class=\\\"highlight\\\">\\n      <pre>\\n        <code class=\\\"javascript\\\" highlight-block>\\n          angular.module('myApp', [ 'ngFormLib.policy', 'ngFormLib.controls.formInput']);\\n        </code>\\n      </pre>\\n    </div>\\n  </div>\\n\\n  <h2 id=\\\"project-contribute\\\">Contribute</h2>\\n  <p>Build and work on Angular Form Library with <a href=\\\"http://gruntjs.com\\\">Grunt</a>.</p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"bash\\\" highlight-block>\\n        // Serve and watch docs, ideal to develop\\n        $ grunt dev\\n        // Continuous integration\\n        $ grunt test\\n        // Build Angular Form Library\\n        $ grunt build\\n      </code>\\n    </pre>\\n  </div>\\n\\n\\n</div>\\n\";\n\n/***/ },\n/* 61 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-header\\\" id=\\\"content\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"col-md-9\\\">\\n      <h1>Angular Form Library</h1>\\n      <p>AngularJS 1.2+ directives for controlling form behaviour using policies with accessible form controls.</p>\\n    </div>\\n    <div class=\\\"bs-docs-social col-md-3\\\">\\n      <ul>\\n        <li class=\\\"github-btn\\\">\\n          <iframe src=\\\"//ghbtns.com/github-btn.html?user=odecee&repo=angular-form-lib&type=watch&count=true\\\" allowtransparency=\\\"true\\\" frameborder=\\\"0\\\" scrolling=\\\"0\\\" width=\\\"100\\\" height=\\\"20\\\"></iframe>\\n        </li>\\n        <li class=\\\"github-btn\\\">\\n          <iframe src=\\\"//ghbtns.com/github-btn.html?user=odecee&repo=angular-form-lib&type=fork&count=true\\\" allowtransparency=\\\"true\\\" frameborder=\\\"0\\\" scrolling=\\\"0\\\" width=\\\"100\\\" height=\\\"20\\\"></iframe>\\n        </li>\\n        <li class=\\\"github-btn\\\">\\n          <iframe src=\\\"//ghbtns.com/github-btn.html?user=odecee&type=follow&count=true\\\" allowtransparency=\\\"true\\\" frameborder=\\\"0\\\" scrolling=\\\"0\\\" width=\\\"160\\\" height=\\\"20\\\"></iframe>\\n        </li>\\n        <li class=\\\"twitter-btn\\\">\\n          <a href=\\\"//twitter.com/share\\\" class=\\\"twitter-share-button\\\" data-url=\\\"http://odecee.github.io/angular-form-lib\\\" data-text=\\\"Angular Form Library - AngularJS 1.2+ directives for controlling form behaviour using policies with accessible form controls.\\\" data-related=\\\"u_glow\\\"></a>\\n        </li>\\n        <li>\\n          <div class=\\\"g-plusone\\\" data-size=\\\"medium\\\" data-href=\\\"http://odecee.github.io/angular-form-lib\\\"></div>\\n        </li>\\n      </ul>\\n    </div>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 62 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<header class=\\\"navbar navbar-inverse navbar-fixed-top bs-docs-nav\\\" role=\\\"banner\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <button class=\\\"navbar-toggle\\\" type=\\\"button\\\" data-template=\\\"assets/aside.html\\\" data-animation=\\\"am-fade-and-slide-left\\\" data-placement=\\\"left\\\" title=\\\"Menu\\\" data-container=\\\"body\\\" bs-aside>\\n        <span class=\\\"sr-only\\\">Toggle navigation</span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n      </button>\\n      <a href=\\\"./\\\" class=\\\"navbar-brand\\\">Angular Form Library</a>\\n    </div>\\n    <nav class=\\\"collapse navbar-collapse bs-navbar-collapse\\\" role=\\\"navigation\\\">\\n      <ul class=\\\"nav navbar-nav\\\">\\n        <li>\\n          <a ahref=\\\"#gettingStarted\\\" use-hash=\\\"true\\\" scroll-offset=\\\"50\\\">Top</a>\\n        </li>\\n        \\n        \\n      </ul>\\n      <ul class=\\\"nav navbar-nav navbar-right\\\">\\n        \\n        <li>\\n          <a class=\\\"github-badge\\\" href=\\\"//travis-ci.org/odecee/angular-form-lib\\\" target=\\\"_blank\\\">\\n            \\n          </a>\\n        </li>\\n        <li>\\n          <a class=\\\"github-badge\\\" href=\\\"//codeclimate.com/github/odecee/angular-form-lib\\\" target=\\\"_blank\\\">\\n            \\n          </a>\\n        </li>\\n        <li>\\n          <a href=\\\"{{mainCtrl.REPO_HOST}}\\\" target=\\\"_blank\\\">\\n            <i class=\\\"fa fa-github\\\"></i>&nbsp;GitHub\\n          </a>\\n        </li>\\n        \\n        <li>\\n          <a href=\\\"/{{mainCtrl.REPO_HOST}}releases\\\" target=\\\"_blank\\\">\\n            <i class=\\\"fa fa-download\\\"></i>&nbsp;v<span ng-bind=\\\"mainCtrl.VERSION\\\"></span>\\n          </a>\\n        </li>\\n      </ul>\\n    </nav>\\n  </div>\\n</header>\\n\";\n\n/***/ },\n/* 63 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<ul class=\\\"nav bs-sidenav\\\">\\n  <li bs-scrollspy data-target=\\\"#gettingStarted\\\">\\n    <a ahref=\\\"#gettingStarted\\\" use-hash=\\\"true\\\" scroll-offset=\\\"50\\\">Getting started</a>\\n  </li>\\n\\n  <hr style=\\\"margin:2px 0\\\">\\n\\n  <li ng-repeat=\\\"menuItem in mainCtrl.DOC_CONFIG.sitemap\\\" bs-scrollspy data-target=\\\"{{menuItem.href}}\\\" data-offset=\\\"50\\\">\\n    <a ahref=\\\"{{menuItem.href}}\\\" use-hash=\\\"true\\\" scroll-offset=\\\"50\\\">{{menuItem.title}}</a>\\n    <ul class=\\\"nav\\\">\\n      <li ng-repeat=\\\"subMenuItem in menuItem.subSection\\\" bs-scrollspy data-target=\\\"{{subMenuItem.href}}\\\" data-offset=\\\"50\\\"><a ahref=\\\"{{subMenuItem.href}}\\\" use-hash=\\\"true\\\" scroll-offset=\\\"50\\\">{{subMenuItem.title}}</a></li>\\n    </ul>\\n    <hr ng-if=\\\"menuItem.separateAfter\\\" style=\\\"margin:2px 0\\\">\\n  </li>\\n</ul>\\n\";\n\n/***/ },\n/* 64 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formControls\\\">Form Controls <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/common/\\\" target=\\\"_blank\\\">Form Controls Common</a>\\n    </h1>\\n    <code>ngFormLib.controls.common</code>\\n  </div>\\n\\n  <p>The Form Controls Common module provides common functions used by the form controls, and allows default values for the form controls to be changed from a central place.</p>\\n\\n  <h2 id=\\\"formControlsCommonOptions\\\">Common Control Options</h2>\\n\\n  <p>The following options are available for <code>form-checkbox</code>, <code>form-input</code>, <code>form-radio-button</code> and <code>form-select</code>:</p>\\n\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 65 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<tr>\\n  <td>uid</td>\\n  <td>string</td>\\n  <td>generated</td>\\n  <td>The control's unique identifier, which is used in the <code>id=\\\"...\\\"</code> attribute on the control and to link the label to the form field element.\\n    When the form field is inside a repeater, use variable as in <code>uid=\\\"...{{$index}}\\\"</code>, so that the control\\n    has a page-unique id, which is required to make the control fully accessible.\\n    <strong>If the <code>uid</code> is not specified, one will be generated by the formControlService.</strong>\\n  </td>\\n</tr>\\n<tr>\\n  <td>name</td>\\n  <td>string</td>\\n  <td>generated</td>\\n  <td>The name of the element, which is used to make form-validation work correctly.\\n    Only use an {{interpolationExpression}} inside this attribute when using <code>form-radio</code> buttons inside\\n    <code>ng-form</code> inside <code>ng-repeat</code> (<a ahref=\\\"formDemo4\\\">see example</a>).\\n    <strong>If the <code>uid</code> is not specified, one will be generated by the formControlService.</strong>\\n    <p><strong class=\\\"text-danger\\\"><code>form-radio</code> controls that are inside a radio-button-group MUST specify this attribute explicitly for the grouping-behaviour to work!</strong></p>\\n  </td>\\n</tr>\\n\\n<tr>\\n  <td>required</td>\\n  <td>expression</td>\\n  <td>false</td>\\n  <td>An expression that determines the value of <code>ng-required</code>, <code>aria-required</code> and the required indicator on the <code>&lt;label&gt;</code></td>\\n</tr>\\n<tr>\\n  <td>hide-required-indicator</td>\\n  <td>expression</td>\\n  <td>false</td>\\n  <td>An expression that determines whether to show or hide the required indicator</td>\\n</tr>\\n<tr>\\n  <td>label-class</td>\\n  <td>CSS class list</td>\\n  <td></td>\\n  <td>Optional list of CSS classes to apply to the <code>label</code> element</td>\\n</tr>\\n<tr>\\n  <td>label-suffix</td>\\n  <td>string</td>\\n  <td></td>\\n  <td>Optional text to append to a label, but is not displayed when an error message uses the <code>fieldLabel</code> variable.\\n    This property is useful to convey formatting information about the field inside the field label, without that information\\n    appearing in any error messages.\\n  </td>\\n</tr>\\n\\n<tr>\\n  <td>hide-label</td>\\n  <td>expression</td>\\n  <td>false</td>\\n  <td>An expression that determines whether to show or hide the label.</td>\\n</tr>\\n<tr>\\n  <td>field-errors</td>\\n  <td>object</td>\\n  <td></td>\\n  <td>A key-value pair object linking an error to a message. Error messages can be language-resource-keys.</td>\\n</tr>\\n<tr>\\n  <td>text-errors</td>\\n  <td>array</td>\\n  <td></td>\\n  <td>An array of scope-properties to watch for \\\"truthiness\\\". E.g. For `text-errors=\\\"['scopeProp']\\\"`, the text-value of `scope.scopeProp` will be\\n    displayed when the value is \\\"truthy\\\" (typically a non empty string). This property is useful for handling error messages returned from calling APIs.</td>\\n</tr>\\n<tr>\\n  <td>ff-ng-model</td>\\n  <td>expression</td>\\n  <td></td>\\n  <td><strong>Required</strong> - the AngularJS <code>ngModel</code> directive, which is applied to the <code>select</code> element.</td>\\n</tr>\\n<tr>\\n  <td>ff-*</td>\\n  <td>*</td>\\n  <td></td>\\n  <td>Additional attributes/directives that are copied onto the <strong>input/select element</strong> can be specified using by prefixing them with <code>ff-</code>. For example <code>ff-size=\\\"3\\\"</code>\\n    would be compiled to <code>size=\\\"3\\\"</code> on the <code>input</code>/<code>select</code> element.</td>\\n</tr>\\n<tr>\\n  <td>template</td>\\n  <td>URL</td>\\n  <td>See <a ahref=\\\"#formControlsService\\\">Form Controls Service options</a></td>\\n  <td>The HTML template to use for the control. The default value can be overridden on the element, or globally by setting the default value in the <a href=\\\"#formControlsService\\\">formControlsService</a></td>\\n</tr>\\n\";\n\n/***/ },\n/* 66 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormControlsDemosController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formDemos\\\">Demos</h1>\\n  </div>\\n\\n  <h2 id=\\\"formDemo1\\\">Standard form</h2>\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    <form name=\\\"formDemo1\\\" class=\\\"form\\\" novalidate form-submit=\\\"\\\">\\n      <fieldset>\\n        \\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"control-label\\\" for=\\\"formDemo1_fldTitle\\\">Title</label>\\n          <div class=\\\"control-row\\\">\\n            <select id=\\\"formDemo1_fldTitle\\\" name=\\\"formDemo1_fldTitle\\\" ng-model=\\\"ctrl.formDemo1.title\\\" ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" class=\\\"form-control\\\" ng-required=\\\"true\\\" field-error-controller></select>\\n          </div>\\n          <div error-container field-name=\\\"formDemo1_fldTitle\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n        </div>\\n\\n        \\n        <div form-input uid=\\\"formDemo1_fldName\\\" name=\\\"formDemo1_fldName\\\" label=\\\"Name\\\" label-suffix=\\\"(40 chars)\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formDemo1.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'FIELD_ERROR.TEMPLATE.REQUIRED', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n        <div form-checkbox uid=\\\"formDemo1_fld3\\\" name=\\\"formDemo1_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo1.fld1_3\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n        <div form-input uid=\\\"formDemo1_fld4\\\" label=\\\"Income\\\" required=\\\"true\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" input-suffix=\\\"per month\\\" ff-ng-model=\\\"ctrl.formDemo1.fld4\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n        <fieldset form-group>\\n          <div ng-repeat=\\\"item in ctrl.titleData\\\">\\n            <div form-radio-button uid=\\\"formDemo1_fld{{$index}}\\\" name=\\\"formDemo1_group1\\\" ff-ng-model=\\\"ctrl.formDemo1.group1\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\">{{item.label}}</div>\\n          </div>\\n          <div error-container field-name=\\\"formDemo1_group1\\\" field-errors=\\\"{required: 'Please select one of the above options'}\\\"></div>\\n        </fieldset>\\n\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.formDemo1\\\">Reset</button>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"formDemo2\\\">Horizontal Form</h2>\\n\\n  <p>This form takes advantage of the default control-templates' HTML structure to render the controls inside a form with <code>class=\\\"form-horizontal\\\"</code>\\n    as expected within Bootstrap. See the <a href=\\\"/css/sampleFormStyle.css\\\" target=\\\"_blank\\\">sample style sheet</a> to see how to do this.</p>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n    <form name=\\\"formDemo2\\\" class=\\\"form form-horizontal\\\" novalidate form-submit=\\\"\\\">\\n      <fieldset>\\n\\n        <div form-input uid=\\\"formDemo2_fld1\\\" name=\\\"formDemo2_fld1\\\" label=\\\"Nick Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formDemo2.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n        <div form-select uid=\\\"formDemo2_fld2\\\" name=\\\"formDemo2_fld2\\\" label=\\\"Common field\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo2.fld2\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n        <div form-checkbox uid=\\\"formDemo2_fld3\\\" name=\\\"formDemo2_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo2.fld2_3\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n        <div form-input uid=\\\"formDemo2_fld4\\\" label=\\\"Income\\\" required=\\\"true\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" input-suffix=\\\"per month\\\" ff-ng-model=\\\"ctrl.formDemo2.fld4\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n        <fieldset form-group>\\n          <div ng-repeat=\\\"item in ctrl.titleData\\\">\\n            <div form-radio-button uid=\\\"formDemo2_fld{{$index}}\\\" name=\\\"formDemo2_group1\\\" ff-ng-model=\\\"ctrl.formDemo2.group1\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\" hide-required-indicator=\\\"true\\\">{{item.label}}</div>\\n          </div>\\n          <div error-container field-name=\\\"formDemo2_group1\\\" field-errors=\\\"{required: 'Please select one of the above options'}\\\"></div>\\n        </fieldset>\\n\\n        <div class=\\\"button-row\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n          <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.formDemo2\\\">Reset</button>\\n        </div>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"formDemo3\\\">Inline Form</h2>\\n  <p>This form takes advantage of the default control-templates' HTML structure to render the controls inside a form with <code>class=\\\"form-inline\\\"</code>\\n    as expected within Bootstrap. See the <a href=\\\"/css/sampleFormStyle.css\\\" target=\\\"_blank\\\">sample style sheet</a> to see how to do this.</p>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n    <form name=\\\"formDemo3\\\" class=\\\"form form-inline\\\" novalidate form-submit=\\\"\\\">\\n      <fieldset>\\n\\n        <div form-input uid=\\\"formDemo3_fld1\\\" name=\\\"formDemo3_fld1\\\" label=\\\"Nick Name\\\" hide-label=\\\"true\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formDemo3.fld1\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" ff-placeholder=\\\"Enter Nick Name\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n        <div form-input uid=\\\"formDemo3_fld4\\\" label=\\\"Income\\\" hide-label=\\\"true\\\" required=\\\"true\\\" ff-style=\\\"width:40px\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" ff-ng-model=\\\"ctrl.formDemo3.fld4\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n        <div form-select uid=\\\"formDemo3_fld2\\\" name=\\\"formDemo3_fld2\\\" label=\\\"Common field\\\" hide-label=\\\"true\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo3.fld2\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" placeholder=\\\"Enter Title\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n        <div form-checkbox uid=\\\"formDemo3_fld3\\\" name=\\\"formDemo3_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo3.fld3\\\" hide-required-indicator=\\\"true\\\" field-errors=\\\"{required: 'You must agree'}\\\">I agree</div>\\n\\n        <fieldset form-group>\\n          <span ng-repeat=\\\"item in ctrl.titleData\\\">\\n            <div form-radio-button uid=\\\"formDemo3_fld{{$index}}\\\" name=\\\"formDemo3_group1\\\" ff-ng-model=\\\"ctrl.formDemo3.group1\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\" hide-required-indicator=\\\"true\\\">{{item.label}}</div>\\n          </span>\\n          <div error-container field-name=\\\"formDemo3_group1\\\" field-errors=\\\"{required: 'Please select one of the above options'}\\\"></div>\\n        </fieldset>\\n\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.formDemo3\\\">Reset</button>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"formDemo4\\\">Form with repeating sections</h2>\\n\\n  <p>This is probably as complex as it gets - a horizontal-form with a repeating inline-form.</p>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n    <style>[name=formDemo4] .form-inline .form-group{margin-right:0}[name=formDemo4] .form-inline .control-label{display:none}[name=formDemo4] .form-inline .control-row{width:auto;padding:0;margin-left:15px}[name=formDemo4] .form-inline [form-group]{margin-left:0;width:auto;float:none}[name=formDemo4] .form-inline .btn{margin-bottom:15px}</style>\\n    <form name=\\\"formDemo4\\\" class=\\\"form form-horizontal\\\" novalidate form-submit=\\\"\\\">\\n      <fieldset>\\n\\n        <div form-input uid=\\\"formDemo4_fld1\\\" name=\\\"formDemo4_fld1\\\" label=\\\"Last Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formDemo4.name\\\" ff-maxlength=\\\"40\\\" field-errors=\\\"{required: 'Last name is required'}\\\"></div>\\n\\n        <div form-select uid=\\\"formDemo4_fld2\\\" name=\\\"formDemo4_fld2\\\" label=\\\"Type\\\" required=\\\"true\\\" placeholder=\\\"Select Title\\\" ff-ng-model=\\\"ctrl.formDemo4.title\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"control-label\\\">Education History</label>\\n\\n          <div class=\\\"control-row\\\">\\n            <div ng-repeat=\\\"school in ctrl.formDemo4.education\\\" class=\\\"form form-inline\\\" ng-init=\\\"schoolIndex = $index\\\">\\n              <div ng-form=\\\"formDemo4_subform\\\">\\n                <div form-input uid=\\\"formDemo4_subform{{$index}}_fld1\\\" name=\\\"formDemo4_subform_fld1\\\" label=\\\"School\\\" hide-label=\\\"true\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-placeholder=\\\"School Name\\\" ff-ng-model=\\\"school.name\\\" ff-maxlength=\\\"30\\\" ff-style=\\\"width: 100px\\\" field-errors=\\\"{required: 'School name is required'}\\\"></div>\\n\\n                <div form-input uid=\\\"formDemo4_subform{{$index}}_fld4\\\" label=\\\"Income\\\" hide-label=\\\"true\\\" required=\\\"true\\\" ff-style=\\\"width:40px\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" ff-ng-model=\\\"school.income\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n                <div form-select uid=\\\"formDemo4_subform{{$index}}_fld2\\\" name=\\\"formDemo4_subform_fld2\\\" label=\\\"Type\\\" hide-label=\\\"true\\\" required=\\\"true\\\" placeholder=\\\"School Type\\\" ff-ng-model=\\\"school.type\\\" ff-ng-options=\\\"item.label for item in ctrl.schoolData track by item.label\\\" field-errors=\\\"{required: 'Type is required'}\\\"></div>\\n\\n                <div form-checkbox uid=\\\"formDemo4_subform{{$index}}_fld3\\\" name=\\\"formDemo4_subform_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"school.isCoEd\\\" field-errors=\\\"{required: 'Uniforms are required'}\\\">Uniform</div>\\n\\n\\n                <fieldset form-group>\\n                  <span ng-repeat=\\\"item in ctrl.titleData\\\">\\n                    <div form-radio-button uid=\\\"formDemo4_subform{{schoolIndex}}_fld4_{{$index}}\\\" name=\\\"formDemo4_subform_group{{schoolIndex}}\\\" ff-ng-model=\\\"school.title\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\" hide-required-indicator=\\\"true\\\">{{item.label}}</div>\\n                  </span>\\n                  <div error-container field-name=\\\"formDemo4_subform_group{{schoolIndex}}\\\" field-errors=\\\"{required: 'Please select an option'}\\\"></div>\\n                </fieldset>\\n\\n                <button type=\\\"button\\\" class=\\\"btn btn-success\\\" ng-click=\\\"ctrl.addSchool()\\\" ng-if=\\\"$last\\\">+</button>\\n\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n\\n\\n        <div class=\\\"button-row\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n          <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.formDemo4\\\">Reset</button>\\n        </div>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n</div>\\n\";\n\n/***/ },\n/* 67 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormControlServiceDemoCtrl as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formControlsService\\\">Form Controls Service <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/common/FormControlService.js\\\" target=\\\"_blank\\\">FormControlService.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.common.formControlService</code>\\n  </div>\\n\\n  <p>The Form Control Service service provides common functions used by the form controls, and allows default values for the form controls to be changed from a central place.</p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>The Form Control Service requires the <a href=\\\"#requiredMarker\\\">RequiredMarker module</a> and the <a href=\\\"{{mainCtrl.REPO}}src/common\\\" target=\\\"_blank\\\">ngFormLib.common.utility</a> module to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formControlsServiceOptions\\\">Options</h2>\\n\\n  <p>Options can be configured like so:</p>\\n  <div class=\\\"highlight\\\">\\n    <pre><code class=\\\"js\\\" highlight-block>angular.module('myApp', ['ngFormLib'])\\n  .config(['FormControlServiceProvider', function(FormControlServiceProvider) {\\n      FormControlServiceProvider.defaults.select.template = 'path/to/my/template.html'\\n  }])</code></pre>\\n  </div>\\n\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>idPrefix</td>\\n          <td>String</td>\\n          <td>fpFld</td>\\n          <td>The prefix string for generated form-control id values. Generated <code>id</code> values are used\\n          when the form-control does not have it's own <code>cid</code> attribute with a non-empty value</td>\\n        </tr>\\n        <tr>\\n          <td>formCheckbox.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/formCheckbox/ template/FormCheckboxTemplate.html</td>\\n          <td>Template for the <a ahref=\\\"#formCheckbox\\\">Form Checkbox</a> control</td>\\n        </tr>\\n        <tr>\\n          <td>formDate.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/formDate/ template/FormDateTemplate.html</td>\\n          <td>Template for the <a ahref=\\\"#formDate\\\">Form Date</a> control</td>\\n        </tr>\\n        <tr>\\n          <td>formInput.template</td>\\n          <td>String</td>\\n          <td>&lt;div class=\\\"form-group\\\"&gt;&lt;label class=\\\"control-label\\\"&gt;&lt;/label&gt;&lt;div class=\\\"control-row\\\"&gt;&lt;input #type# class=\\\"form-control\\\"&gt;&lt;span ng-transclude&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</td>\\n          <td>Template for the <a ahref=\\\"#formInput\\\">Form Input</a> control. <br>\\n          <strong>Note:</strong> The <code>#type#</code> string is replaced with the input's type (text|tel|number|...) prior to the template\\n          being compiled. This is due to the <code>type</code> attribute being read-only on an <code>input</code> element (see <a href=\\\"http://stackoverflow.com/questions/8378563/why-cant-i-change-the-type-of-an-input-element-to-submit\\\" target=\\\"_blank\\\">here</a>)</td>\\n        </tr>\\n        <tr>\\n          <td>formRadioButton.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/formRadioButton/ template/FormRadioButtonTemplate.html</td>\\n          <td>Template for the <a ahref=\\\"#formRadioButton\\\">Form RadioButton</a> control</td>\\n        </tr>\\n        <tr>\\n          <td>formSelect.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/formSelect/ template/FormSelectTemplate.html</td>\\n          <td>Template for the <a ahref=\\\"#formSelect\\\">Form Select</a> control</td>\\n        </tr>\\n        <tr>\\n          <td>requiredMarker.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/requiredMarker/ template/RequiredMarker.html</td>\\n          <td>Template for the <a ahref=\\\"#requiredMarker\\\">Required Marker</a> control</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 68 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"ErrorMessageContainerDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"errorMessageContainer\\\">Error Message Container <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/errorMessageContainer/ErrorMessageContainer.js\\\" target=\\\"_blank\\\">ErrorMessageContainer.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.errorMessageContainer</code>\\n  </div>\\n\\n  <p>The Error Message Container is a directive which shows & hides error messages based on the parent-form's policy and the corresponding input-field's state.\\n    It links the error message(s) to the field using ARIA attributes. This increases the accessibility of form-elements quite a bit.</p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Error Message Controller requires the <code>pascalprecht.translate</code> module (to perform translation of error messages). See <a href=\\\"http://angular-translate.github.io/\\\">Angular Translate</a>.</p>\\n  </div>\\n\\n  <p>Error messages typically have a consistent grammer.\\n    <a href=\\\"http://angular-translate.github.io/\\\">Angular Translate</a> makes it really easy to provide consistent error\\n    syntax for the error messages across your application, with the bonus of providing multi-language support as well.\\n    However, you can still use this directive without configuring Angular Translate - the error message strings will be rendered as-is.\\n  </p>\\n\\n  <h2 id=\\\"errorMessageContainerExamples\\\">Examples</h2>\\n  <p><code>error-message-container</code> was designed to be used by the form controls in this library. However, it is possible to use\\n  this directive without using the form controls. A good use case is when dealing with a collection of <code>form-radio-button</code> elements where there is no initial selection, but a selection is required</p>\\n  <p>Use <code>error-message-container</code> to show an error message when a validation error occurs.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    <form name=\\\"errMsgDemo\\\" class=\\\"form\\\" novalidate>\\n      <fieldset>\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"control-label\\\" for=\\\"errMsgDemo_fldTitle\\\">Title</label>\\n          <div class=\\\"control-row\\\">\\n            <select id=\\\"errMsgDemo_fldTitle\\\" name=\\\"errMsgDemo_fldTitle\\\" ng-model=\\\"ctrl.errMsgDemo.title\\\" ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" class=\\\"form-control\\\" ng-required=\\\"true\\\" field-error-controller></select>\\n          </div>\\n          <div error-container field-name=\\\"errMsgDemo_fldTitle\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"control-label\\\" for=\\\"errMsgDemo_fldName\\\">Name</label>\\n          <div class=\\\"control-row\\\">\\n            <input type=\\\"text\\\" id=\\\"errMsgDemo_fldName\\\" name=\\\"errMsgDemo_fldName\\\" ng-model=\\\"ctrl.errMsgDemo.name\\\" class=\\\"form-control\\\" ng-required=\\\"true\\\" field-error-controller>\\n          </div>\\n          <div error-container field-name=\\\"errMsgDemo_fldName\\\" field-label=\\\"custom error label\\\" field-errors=\\\"{required: 'FIELD_ERROR.TEMPLATE.REQUIRED'}\\\" text-errors=\\\"['ctrl.myTextError']\\\"></div>\\n        </div>\\n      </fieldset>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" form-submit=\\\"\\\">Submit</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.errMsgDemo\\\">Reset</button>\\n      <div tabindex=\\\"0\\\" class=\\\"btn\\\" ng-click=\\\"ctrl.toggleTextError()\\\">Toggle text error</div>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"errorMessageContainerUsage\\\">Usage</h2>\\n  <p>Add the <code>error-message-container</code> directive to any element, or use one of the form controls (above) which uses <code>error-message-container</code> already.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>field-name</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>The reference to a form-control. The must match the <code>name</code> attribute of the form-control. This property allows the directive to watch the form control and show errors for that form control.</td>\\n        </tr>\\n        <tr>\\n          <td>field-label</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>The label to display when a translated-error message contains <code>{{fieldLabel}}</code>. Relies on the use of the translation service to specify error messages as translation IDs.</td>\\n        </tr>\\n        <tr>\\n          <td>field-errors</td>\\n          <td>object</td>\\n          <td></td>\\n          <td>A key-value pair object linking an error to a message. Error messages can be language-resource-keys.</td>\\n        </tr>\\n        <tr>\\n          <td>text-errors</td>\\n          <td>array</td>\\n          <td></td>\\n          <td>An array of scope-properties to watch for \\\"truthiness\\\". E.g. For <code>text-errors=\\\"['scopeProp']\\\"</code>, the text-value of <code>scope.scopeProp</code> will be\\n            displayed when the value is \\\"truthy\\\" (typically a non empty string). This property is useful for handling error messages returned from calling APIs.</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 69 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormCheckboxDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formCheckbox\\\">Form Checkbox <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formCheckbox/FormCheckbox.js\\\" target=\\\"_blank\\\">FormCheckbox.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formCheckbox</code>\\n  </div>\\n\\n  <p>The Form Checkbox directive acts like a macro in that it expands into a <code>&lt;label&gt;</code>,<code>&lt;input type=\\\"checkbox\\\"&gt;</code> and some auxillary HTML elements, but does change the <code>$scope</code> of those elements.</p>\\n\\n  <p>It works this way because the elements are inter-related. For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>&lt;label&gt;</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>FormCheckbox requires the <a ahref=\\\"#formControlsService\\\">form controls service module</a>, the <a ahref=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a ahref=\\\"#errorMessageContainer\\\">error message container module</a> and the <a href=\\\"{{mainCtrl.REPO}}src/controls/formCheckbox/template/FormCheckboxTemplate.html\\\" target=\\\"_blank\\\">FormCheckboxTemplate.html</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formCheckboxExamples\\\">Examples</h2>\\n  <p>Use <code>form-checkbox</code> to create a complete HTML structure containing a <code>label</code> and <code>input type=\\\"checkbox\\\"</code> element that reacts to the error state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formCheckbox1\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      <div form-checkbox uid=\\\"formCheckbox1_fld1\\\" name=\\\"formCheckbox1_fld1\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.fld1\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n      <div form-checkbox uid=\\\"formCheckbox1_fld2\\\" name=\\\"formCheckbox1_fld2\\\" ff-ng-model=\\\"ctrl.data.fld2\\\" ff-ng-true-value=\\\"'dog'\\\" ff-ng-false-value=\\\"'cat'\\\">Optional Checkbox with value: {{ctrl.data.fld2}}</div>\\n\\n      <div form-checkbox uid=\\\"formCheckbox1_fld3\\\" name=\\\"formCheckbox1_fld3\\\" class=\\\"image-checkbox\\\" ff-ng-model=\\\"ctrl.data.fld3\\\">Styled accessible checkbox</div>\\n\\n      <div form-checkbox uid=\\\"formCheckbox1_fld4\\\" name=\\\"formCheckbox1_fld4\\\" class=\\\"image-checkbox\\\" ff-ng-disabled=\\\"ctrl.data.fld3\\\" ff-ng-model=\\\"ctrl.data.fld4\\\">Occassionally disabled checkbox</div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formCheckboxUsage\\\">Usage</h2>\\n  <p>Add the <code>form-check</code> directive to an element, and supply a label as the content of the element (see example above).</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>ff-ng-true-value</td>\\n          <td>expression</td>\\n          <td></td>\\n          <td>The value to use in the model-value when the checkbox is checked.</td>\\n        </tr>\\n        <tr>\\n          <td>ff-ng-false-value</td>\\n          <td>expression</td>\\n          <td></td>\\n          <td>The value to use in the model-value when the checkbox is not checked.</td>\\n        </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 70 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formDate\\\">Form Date <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formDate/formDate.js\\\" target=\\\"_blank\\\">FormDate.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formDate</code>\\n  </div>\\n\\n  <p>The Form Date directive acts like a macro in that it expands into a <code>label</code><code>input</code> and some auxillary HTML elements, but does change the <code>$scope</code> of those elements.</p>\\n\\n  <p>It works this way because the elements are inter-related. For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>label</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Form Date requires the <a href=\\\"#formControlsService\\\">form controls service module</a>, the <a href=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a href=\\\"#errorMessageContainer\\\">error message container module</a> and the <a href=\\\"{{mainCtrl.REPO}}src/controls/formDate/template/FormDateInputTemplate.html\\\" target=\\\"_blank\\\">FormDateInputTemplate.html</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formDateExamples\\\">Examples</h2>\\n  <p>Use <code>form-date</code> to create a complete HTML structure containing a <code>label</code> and <code>input</code> element that reacts to the state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formDate1\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      <div form-date uid=\\\"formDate1_fld1\\\" label=\\\"Text type field\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput1.fld1\\\" field-hint=\\\"{{'OTHER.HINT' | translate}}\\\" field-errors=\\\"{required: 'Title is required'}\\\" placeholder=\\\"Placeholder text\\\"></div>\\n\\n      <div form-date uid=\\\"formInput1_fld2\\\" name=\\\"formInput1_fld2\\\" label=\\\"Date type field\\\" required=\\\"false\\\" input-type=\\\"date\\\" ff-ng-model=\\\"ctrl.formInput1.fld2\\\"></div>\\n\\n      <div form-input uid=\\\"formInput1_fld3\\\" name=\\\"formInput1_fld3\\\" label=\\\"Income\\\" required=\\\"true\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" input-suffix=\\\"per month\\\" ff-ng-model=\\\"ctrl.formInput1.fld3\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n      \\n      <div form-input label=\\\"Generated id field\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput1.fld4\\\" placeholder=\\\"This field has a generated name and id\\\" field-errors=\\\"{required: 'FIELD_ERROR.TEMPLATE.REQUIRED'}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formDateUsage\\\">Usage</h2>\\n  <p>Add the <code>form-date</code> directive to an element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>field-hint</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Text that is related to the field but is not the field's label. Often used to provide additional information about the field. This string can be a language-resource-key.</td>\\n        </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 71 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formInput\\\">Form Input <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formInput/FormInput.js\\\" target=\\\"_blank\\\">FormInput.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formInput</code>\\n  </div>\\n\\n  <p>The Form Input directive acts like a macro in that it expands into a <code>&lt;label&gt;</code><code>&lt;input&gt;</code> and some auxillary HTML elements, but does change the <code>$scope</code> of those elements.</p>\\n\\n  <p>It works this way because the elements are inter-related. For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>&lt;label&gt;</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Form Input requires the <a href=\\\"#formControlsService\\\">form controls service module</a>, the <a href=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a href=\\\"#errorMessageContainer\\\">error message container module</a> to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formInputExamples\\\">Examples</h2>\\n  <p>Use <code>form-input</code> to create a complete HTML structure containing a <code>label</code> and <code>select</code> element that reacts to the error state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formInput1\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      <div form-input uid=\\\"formInput1_fld1\\\" name=\\\"formInput1_fld1\\\" label=\\\"Text type field\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput1.fld1\\\" field-hint=\\\"{{'OTHER.HINT' | translate}}\\\" field-errors=\\\"{required: 'Title is required'}\\\" placeholder=\\\"Placeholder text\\\"></div>\\n\\n      <div form-input uid=\\\"formInput1_fld2\\\" name=\\\"formInput1_fld2\\\" label=\\\"Date type field\\\" required=\\\"false\\\" input-type=\\\"date\\\" ff-ng-model=\\\"ctrl.formInput1.fld2\\\"></div>\\n\\n      <div form-input uid=\\\"formInput1_fld3\\\" name=\\\"formInput1_fld3\\\" label=\\\"Income\\\" required=\\\"true\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" input-suffix=\\\"per month\\\" ff-ng-model=\\\"ctrl.formInput1.fld3\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n      \\n      <div form-input label=\\\"Generated id field\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput1.fld4\\\" placeholder=\\\"This field has a generated name and id\\\" field-errors=\\\"{required: 'FIELD_ERROR.TEMPLATE.REQUIRED'}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formInputUsage\\\">Usage</h2>\\n  <p>Add the <code>form-input</code> directive to an element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>field-hint</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Text that is related to the field but is not the field's label. Often used to provide additional information about the field.</td>\\n        </tr>\\n        <tr>\\n          <td>input-prefix</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Creates a Bootstrap <a href=\\\"http://getbootstrap.com/components/#input-groups\\\" target=\\\"_blank\\\">input group</a> around the input\\n            element and displays the <strong>input-prefix</strong> string inside a <code>&lt;span class=\\\"input-group-addon\\\"&gt;&lt;/span&gt;</code> element, which appears <strong>before</strong> the <code>input</code> element.\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>input-suffix</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Creates a Bootstrap <a href=\\\"http://getbootstrap.com/components/#input-groups\\\" target=\\\"_blank\\\">input group</a> around the input\\n            element and displays the <strong>input-suffix</strong> string inside a <code>&lt;span class=\\\"input-group-addon\\\"&gt;&lt;/span&gt;</code> element, which appears <strong>after</strong> the <code>input</code> element.\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>placeholder</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Placeholder text that appears inside the input element when there is no existing value. Alias for <code>ff-placeholder</code>.</td>\\n        </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 72 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormRadioButtonDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formRadioButton\\\">Form RadioButton <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formRadioButton/FormRadioButton.js\\\" target=\\\"_blank\\\">FormRadioButton.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formRadioButton</code>\\n  </div>\\n\\n  <p>Form RadioButton is a directive that is a wrapper for a <code>label</code>,<code>input type=\\\"radio\\\"</code> and some auxillary HTML elements, designed to work within Bootstrap form-structures.</p>\\n\\n  <p>It works this way because the <code>label</code>,<code>input type=\\\"radio\\\"</code> and error-display elements are inter-related.\\n    For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>&lt;label&gt;</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Form RadioButton requires the <a ahref=\\\"#formControlsService\\\">form controls service module</a>, the <a ahref=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a ahref=\\\"#errorMessageContainer\\\">error message container module</a> and the\\n      <a href=\\\"{{mainCtrl.REPO}}src/controls/formRadioButton/template/formRadioButtonTemplate.html\\\" target=\\\"_blank\\\">FormRadioButtonTemplate.html</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formRadioButtonExamples\\\">Examples</h2>\\n  <p>Use <code>form-radio-button</code> to create a complete HTML structure containing a <code>label</code> and <code>input type=\\\"radio\\\"</code> element that reacts to the state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formRadio1\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      \\n      <fieldset form-group>\\n        <div ng-repeat=\\\"item in ctrl.titleData\\\">\\n          <div form-radio-button uid=\\\"formRadio1_fld{{$index}}\\\" name=\\\"formRadio1_group1\\\" ff-ng-model=\\\"ctrl.data.radioVal1\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\" hide-required-indicator>{{item.label}}</div>\\n        </div>\\n        <div error-container field-name=\\\"formRadio1_group1\\\" field-errors=\\\"{required: 'Please select one of the above options'}\\\"></div>\\n      </fieldset>\\n\\n      <p>Selected value: {{ctrl.data1.radioVal1}}</p>\\n\\n      \\n      <fieldset form-group>\\n        <div ng-repeat=\\\"item in ctrl.titleData\\\">\\n          <div form-radio-button uid=\\\"formRadio1_fld2{{$index}}\\\" name=\\\"formRadio1_group2\\\" ff-ng-model=\\\"ctrl.data.radioVal2\\\" ff-ng-value=\\\"$index\\\">{{item.label}}</div>\\n        </div>\\n      </fieldset>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.data\\\">Reset</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formRadioButtonUsage\\\">Usage</h2>\\n  <p>Add the <code>form-radio-button</code> directive to an element, and supply a label as the content of the element (see example above).</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <td>ff-ng-value</td>\\n        <td>expression</td>\\n        <td></td>\\n        <td>The value to use in the model-value when the radio-button is selected.</td>\\n      </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 73 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormResetDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formReset\\\">Form Reset <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formReset/FormReset.js\\\" target=\\\"_blank\\\">FormReset.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formReset</code>\\n  </div>\\n\\n  <p>Form Reset is a directive which resets each form-field to it's initial state, by copying the initial state of the form's data-model.<br/>\\n    This requires every form controls' <code>ng-model</code> expression to refer to a common scope-object.\\n  </p>\\n\\n  <h2 id=\\\"formResetExamples\\\">Examples</h2>\\n  <p>Add <code>form-reset</code> directive to any <code>button</code> element inside a form.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    <form name=\\\"formReset\\\" class=\\\"form\\\" novalidate form-submit=\\\"ctrl.callWhenValid()\\\">\\n\\n      <div form-input uid=\\\"formReset_fldName\\\" name=\\\"formReset_fldName\\\" label=\\\"Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.data.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <div form-input uid=\\\"formReset_fldNickName\\\" name=\\\"formReset_fldNickName\\\" label=\\\"Nick Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.data.nickName\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Nick name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <div form-select uid=\\\"formReset_fldTitle\\\" name=\\\"formReset_fldTitle\\\" label=\\\"Title with default value\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.title\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n      <div form-select uid=\\\"formReset_fldTitle2\\\" name=\\\"formReset_fldTitle2\\\" label=\\\"Title with no default value\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.title2\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n      <div form-select uid=\\\"formReset_fldTitle3\\\" name=\\\"formReset_fldTitle3\\\" label=\\\"Title with placeholder\\\" required=\\\"true\\\" placeholder=\\\"Select title\\\" ff-ng-model=\\\"ctrl.data.title3\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.data\\\">Reset</button>\\n    </form>\\n\\n  </div>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>ngOptions <strong>must</strong> use 'track by'</h4>\\n    <p>Due to the way <code>form-reset</code> works (copying the data-object used by the controls, then changing the data-object back to the original value),\\n    <code>select</code> elements which use <code>ng-options</code> <strong>MUST</strong> use the <code>ng-options=\\\"... track by ...\\\"</code> variant\\n    of the syntax, if the <code>select</code> element has an initial value. See the example above.</p>\\n  </div>\\n\\n  <h2 id=\\\"formResetUsage\\\">Usage</h2>\\n  <p>Add the <code>form-reset</code> directive to a <code>button</code> element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <td>form-reset</td>\\n        <td>expression</td>\\n        <td></td>\\n        <td><strong>Required </strong>This expression should represent the parent scope-model-object that the form controls bind to.\\n          For example, a Customer Profile form should have a set of form controls that bind to 'myObject.&lt;name|age|birthDate|...&gt;'.\\n          In this example, use <code>form-reset=\\\"myObject\\\"</code>.</td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n\\n</div>\\n\";\n\n/***/ },\n/* 74 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormSelectDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formSelect\\\">Form Select <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}/src/modules/ngFormLib/controls/formSelect/FormSelect.js\\\" target=\\\"_blank\\\">FormSelect.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formSelect</code>\\n  </div>\\n\\n  <p>The Form Select directive acts like a macro in that it expands into a <code>&lt;label&gt;</code><code>&lt;select&gt;</code> and some auxillary HTML elements, but does change the <code>$scope</code> of those elements.</p>\\n\\n  <p>It works this way because the elements are inter-related. For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>&lt;label&gt;</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>FormSelect requires the <a href=\\\"#formControlsService\\\">form controls service module</a>, the <a href=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a href=\\\"#errorMessageContainer\\\">error message container module</a> and the <a href=\\\"{{mainCtrl.REPO}}/src/controls/formSelect/template/FormSelectTemplate.html\\\" target=\\\"_blank\\\">FormSelectTemplate.html</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formSelectExamples\\\">Examples</h2>\\n  <p>Use <code>form-select</code> to create a complete HTML structure containing a <code>label</code> and <code>select</code> element that reacts to the error state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formFormSelect\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      <div form-select uid=\\\"formFormSelect_fldDemo1\\\" name=\\\"formFormSelect_fldDemo1\\\" label=\\\"Common field\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.demo1\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n      <div form-select uid=\\\"formFormSelect_fldDemo2\\\" name=\\\"formFormSelect_fldDemo2\\\" label=\\\"Field with placeholder\\\" required=\\\"false\\\" ff-ng-model=\\\"ctrl.data.demo2\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" placeholder=\\\"{{'OTHER.PLACEHOLDER' | translate}}\\\"></div>\\n\\n      <div form-select uid=\\\"formFormSelect_fldDemo3\\\" name=\\\"formFormSelect_fldDemo3\\\" label=\\\"{{'FIELD.TITLE' | translate}}\\\" required=\\\"false\\\" ff-ng-model=\\\"ctrl.data.demo3\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-hint=\\\"{{'OTHER.HINT' | translate}}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.data\\\">Reset</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formSelectUsage\\\">Usage</h2>\\n  <p>Add the <code>form-select</code> directive to an element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>field-hint</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Text that is related to the field but is not the field's label. Often used to provide additional information about the field. This string can be a language-resource-key.</td>\\n        </tr>\\n        <tr>\\n          <td>placeholder</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Text to display when there is no initial value.</td>\\n        </tr>\\n        <tr>\\n          <td>ff-ng-options</td>\\n          <td>expression</td>\\n          <td></td>\\n          <td><strong>Required</strong> - the AngularJS <code>ngOptions</code> directive, which is applied to the <code>select</code> element.\\n          Note that the 'track by' syntax is required in this expression for the control to work correctly with the <code>form-reset</code> directive.</td>\\n        </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 75 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormSubmitDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formSubmit\\\">Form Submit <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formSubmit/FormSubmit.js\\\" target=\\\"_blank\\\">FormSubmit.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formSubmit</code>\\n  </div>\\n\\n  <p>Form Submit is a directive which can contain an expression to execute <strong>when the form is valid</strong>.<br/>\\n    This directive is useful when you need to execute a function on the <code>$scope</code> once the form data has been successfully validated.\\n    The function would typically do some minor data-transformation on (a copy of) the form's data before sending the data to a service for further processing.\\n  </p>\\n\\n  <h2 id=\\\"formSubmitExamples\\\">Examples</h2>\\n  <p>Add <code>form-submit</code> directive to any form element <strong>or</strong> to any button inside a form.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formSubmit\\\" class=\\\"form\\\" novalidate form-submit=\\\"ctrl.callWhenValid()\\\">\\n      \\n      <div form-input uid=\\\"formSubmit_fldName\\\" name=\\\"formSubmit_fldName\\\" label=\\\"Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.data.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <input type=\\\"submit\\\" class=\\\"btn\\\" value=\\\"Input type=submit\\\">\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\">Non-submit button</button>\\n    </form>\\n\\n    <hr>\\n\\n    \\n    <form name=\\\"formSubmit2\\\" class=\\\"form\\\" novalidate>\\n      \\n      <div form-input uid=\\\"formSubmit2_fldNickName\\\" name=\\\"formSubmit2_fldNickName\\\" label=\\\"Nick Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.data.nickName\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <input type=\\\"submit\\\" class=\\\"btn\\\" value=\\\"Input type=submit\\\">\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" form-submit=\\\"ctrl.callWhenValid()\\\">Submit button with directive</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-submit=\\\"ctrl.callWhenValid()\\\">Non-submit button with directive</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formSubmitUsage\\\">Usage</h2>\\n  <p>Add the <code>form-submit</code> directive to a <code>form</code> or <code>button</code> element, with a value that is a scope-expression.</p>\\n\\n</div>\\n\";\n\n/***/ },\n/* 76 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"RequiredMarkerDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"requiredMarker\\\">Required Marker <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/requiredMarker/RequiredMarker.js\\\" target=\\\"_blank\\\">RequiredMarker.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.requiredMarker</code>\\n  </div>\\n\\n  <p>Required Marker is a small directive which emits HTML which can be styled to display a symbol/content to indicate that a form-field is required.\\n    The default template makes the marker accessible by hiding the element from a screen reader and reading out 'required' instead.</p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Required Marker requires the <a href=\\\"#formControlsService\\\">form controls service module</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"requiredMarkerExamples\\\">Examples</h2>\\n  <p>Use <code>required-marker</code> to add an indicator inside a <code>label</code> element.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formRequiredMarker\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"formRequiredMarker_fldTitle\\\">My field<span required-marker></span></label>\\n        <div class=\\\"control-row\\\">\\n          <select uid=\\\"formRequiredMarker_fldTitle\\\" name=\\\"formRequiredMarker_fldTitle\\\" ng-model=\\\"ctrl.data.title\\\" ng-options=\\\"item.label for item in ctrl.titleData\\\" class=\\\"form-control\\\" ng-required=\\\"true\\\" field-error-controller></select>\\n        </div>\\n        <div error-container field-name=\\\"formRequiredMarker_fldTitle\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n      </div>\\n\\n\\n      \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"formRequiredMarker_fldTitle2\\\">Optionally required field</label><span required-marker hide=\\\"ctrl.data.title.label === 'Mr'\\\"></span>\\n        <div class=\\\"control-row\\\">\\n          <select uid=\\\"formRequiredMarker_fldTitle2\\\" name=\\\"formRequiredMarker_fldTitle2\\\" ng-model=\\\"ctrl.data.title2\\\" ng-options=\\\"item.label for item in ctrl.titleData\\\" class=\\\"form-control\\\" ng-required=\\\"ctrl.data.title.label !== 'Mr'\\\" field-error-controller></select>\\n        </div>\\n        <div error-container field-name=\\\"formRequiredMarker_fldTitle2\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n      </div>\\n\\n\\n      \\n      <div form-input uid=\\\"formRequiredMarker_fldName\\\" name=\\\"formRequiredMarker_fldName\\\" label=\\\"Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput.demo1\\\" field-errors=\\\"{required: 'Name is required'}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"requiredMarkerUsage\\\">Usage</h2>\\n  <p>Add the <code>required-marker</code> directive to an element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <td>hide</td>\\n        <td>expression</td>\\n        <td>false</td>\\n        <td>A scope-expression which causes the required marker to appear (false) or disappear (true)</td>\\n      </tr>\\n      <tr>\\n        <td>template</td>\\n        <td>URL</td>\\n        <td>ngFormLib/controls/requiredMarker/template/RequiredMarkerTemplate.html</td>\\n        <td>The HTML template to use for the control. The default value can be overridden on the element, or globally by setting the default value in the <a href=\\\"#formControlsService\\\">formControlsService</a></td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n/***/ },\n/* 77 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormPolicyDemoCtrl as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formPolicy\\\">Form Policy <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/policy/FormPolicy.js\\\" target=\\\"_blank\\\">FormPolicy.js</a>\\n    </h1>\\n    <code>ngFormLib.policy</code>\\n  </div>\\n\\n  <p>Form Policy is a service which is used in conjunction with decorated <code>form</code> and <code>ng-form</code> directives to\\n  apply validation behaviours to any form.<br/><strong><code>ngFormLib.policy</code> is a required module for all other Form Policy directives.</strong>\\n\\n  </p><p>This service exposes the following configurable policies:</p>\\n  <ul>\\n    <li><strong>field state definition</strong> (policies which define what state a component should be in for the component to be consider in an error-state, a success-state, or some-other-state which you can define</li>\\n    <li><strong>when to check for field-state changes</strong> - which user-or-application events should cause the component-state to be checked to see if it has changed state (according to the definition in the above policy)</li>\\n    <li><strong>what to do when a state-change occurs</strong> - such as setting the focus to the first field that has an error, when the field is in an error-state</li>\\n  </ul>\\n\\n  <p>Additionally, the decorated <code>form</code> and <code>ng-form</code> directives work with the <a href=\\\"#formControlService\\\">Form Controls Service</a>\\n  to allow the correct form element templates to be loaded based on the presence (or not) of the <code>form-horizontal</code> CSS class on the <code>form</code> element.</p>\\n\\n  <h2 id=\\\"formPolicyExamples\\\">Examples</h2>\\n  <p>Apply the default form policy to a form.</p>\\n\\n  <h3>Live demo</h3>\\n  <pre class=\\\"bs-example-scope\\\">  // Load policy and policy libraries FIRST. The policy libraries define a default policy for each policy-type\\n  angular.module('myApp', ['ngFormLib',\\n    'ngFormLib.policy.behaviourOnStateChange',\\n    'ngFormLib.policy.checkForStateChanges',\\n    'ngFormLib.policy.stateDefinitions']\\n  );</pre>\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    <form name=\\\"formPolicy\\\" class=\\\"form\\\" novalidate form-submit=\\\"\\\">\\n      \\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"control-label\\\" for=\\\"formPolicy_fldTitle\\\">Title</label>\\n        <div class=\\\"control-row\\\">\\n          <select id=\\\"formPolicy_fldTitle\\\" name=\\\"formPolicy_fldTitle\\\" ng-model=\\\"ctrl.employee.title\\\" ng-options=\\\"item.label for item in ctrl.titleData\\\" class=\\\"form-control\\\" ng-required=\\\"false\\\" field-error-controller></select>\\n        </div>\\n        <div error-container field-name=\\\"formPolicy_fldTitle\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n      </div>\\n\\n      \\n      <div form-input uid=\\\"formPolicy_fldName\\\" name=\\\"formPolicy_fldName\\\" label=\\\"Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.employee.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <div form-checkbox uid=\\\"formPolicy_fld3\\\" name=\\\"formPolicy_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.employee.fld1_3\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" form-reset=\\\"ctrl.employee\\\">Reset</button>\\n    </form>\\n\\n    <hr/>\\n\\n    <form name=\\\"formPolicy2\\\" class=\\\"form\\\" novalidate form-submit=\\\"\\\" form-policy=\\\"ctrl.myCustomPolicy\\\">\\n      <fieldset>\\n        <legend>Custom Form Policy</legend>\\n\\n        <p>This form takes advantage of the default control-templates' HTML structure to render the controls inside a form with <code>class=\\\"form-horizontal\\\"</code>\\n        as expected within Bootstrap. See the <a href=\\\"/css/sampleFormStyle.css\\\" target=\\\"_blank\\\">sample style sheet</a> to see how to do this.</p>\\n\\n        <div form-input uid=\\\"formPolicy2_fld1\\\" name=\\\"formPolicy2_fld1\\\" label=\\\"Nick Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.fldFPCustPolicy.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n        <div form-select uid=\\\"formPolicy2_fld2\\\" name=\\\"formPolicy2_fld2\\\" label=\\\"Common field\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.demo1\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n        <div form-checkbox uid=\\\"formPolicy2_fld3\\\" name=\\\"formPolicy2_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.fld2_3\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"formPolicyUsage\\\">Usage</h2>\\n  <p>Load the <code>ngFormLib</code>module and (normally) the standard form policy libraries.</p>\\n  <div class=\\\"highlight\\\">\\n    <pre><code class=\\\"js\\\" highlight-block>\\n      angular.module('myApp', ['ngFormLib',\\n        'ngFormLib.policy.behaviourOnStateChange',\\n        'ngFormLib.policy.checkForStateChanges',\\n        'ngFormLib.policy.stateDefinitions'\\n      ]);\\n    </code></pre>\\n  </div>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Heads up!</h4>\\n    <p>For the form policy to work as above, the following configuration must exist:</p>\\n    <ul>\\n      <li>the <code>form</code> must have a non-empty <code>name</code> attribute</li>\\n      <li>the <code>form-submit</code> directive <strong>must</strong> exist on the <code>form</code> element, or on a <code>button</code> element inside the form</li>\\n      <li>each form field must have a non-empty <code>name</code> and <code>ng-model</code> attribute</li>\\n      <li>each form field must use the <code>field-error-controller</code> directive for errors to appear when using the <code>error-container</code> directive</li>\\n    </ul>\\n  </div>\\n\\n  <h3>Options</h3>\\n\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <td>formSubmitAttemptedClass</td>\\n        <td>string</td>\\n        <td>'form-submit-attempted'</td>\\n        <td>a CSS class-name that is applied to the <code>form</code> element when an attempt to submit the form is made (via the <code>formSubmit</code> directive)</td>\\n      </tr>\\n      <tr>\\n        <td>fieldErrorClass</td>\\n        <td>string</td>\\n        <td>'has-error'</td>\\n        <td>a CSS class-name that is applied to the field's form-group when an error is showing</td>\\n      </tr>\\n      <tr>\\n        <td>fieldSuccessClass</td>\\n        <td>string</td>\\n        <td>'has-success'</td>\\n        <td>a CSS class-name that is applied to the field's form-group when the field has been successfully validated</td>\\n      </tr>\\n      <tr>\\n        <td>behaviourOnStateChange</td>\\n        <td>function</td>\\n        <td>noop</td>\\n        <td>The behaviour-on-state-change policy function. This function returns an object with two methods on it: <code>applyBehaviour()</code> which is called when an the field's state changes,\\n          and <code>resetBehaviour()</code> function which is called when the form is reset and when the form is submitted again. Function signature:\\n\\n          <pre class=\\\"bs-example-code\\\"><code class=\\\"javascript\\\" highlight-block>function myBehaviourOnStateChange(formController) {\\n  return {\\n    applyBehaviour: function (fieldElem, fieldState, formSubmitAttempted) {...},\\n    resetBehaviour: function() {...}\\n  };\\n}</code></pre>\\n          where:\\n          <ul>\\n            <li><code>formController</code> is the <code>form</code> controller, which has a reference to the form state and policy,</li>\\n            <li><code>fieldElem</code> is a jqLite element,</li>\\n            <li><code>fieldState</code> is a boolean indicating whether an error for this field is showing or not,</li>\\n            <li><code>formSubmitAttempted</code> is a boolean indicating whether the user ahs attempted to submit the form</li>\\n          </ul>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td>checkForStateChanges</td>\\n        <td>function</td>\\n        <td>noop</td>\\n        <td>The check-for-state-changes policy function. This function is responsible for determining <strong>when</strong> to evaluate whether a field has changed state (into an error state or into a success state).\\n          Function signature:\\n\\n          <pre class=\\\"bs-example-code\\\"><code class=\\\"javascript\\\" highlight-block>function myCheckForStateChangesFunc(scope, element, name, errorCondition, ngModelController) {...}</code></pre>\\n          where <ul>\\n            <li><code>scope</code> is the Angular $scope for the element</li>\\n            <li><code>element</code> is a jqLite field element</li>\\n            <li><code>name</code> is the string-name of the field</li>\\n            <li><code>errorCondition</code> is an Angular expression that can be $watch()ed</li>\\n            <li><code>ngModelController</code> is the ngModelController of the field, which contains the <code>fieldState</code> property</li>\\n          </ul>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td>errorCondition</td>\\n        <td>function</td>\\n        <td>noop</td>\\n        <td>The error condition policy function. This function returns a string-expression is used to determine <strong>if</strong> a field should show an error.\\n          Function signature:\\n\\n          <pre class=\\\"bs-example-code\\\"><code class=\\\"javascript\\\" highlight-block>function myErrorCondition(formName, fieldName) {\\n  ...;\\n  return '...';\\n}</code></pre>\\n          where <ul>\\n            <li><code>formName</code> is the string-name of the form that the field is situated inside of</li>\\n            <li><code>fieldName</code> is strong-name of the field</li>\\n          </ul>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n\\n  <h2 id=\\\"formPolicyConfig\\\">Configuration</h2>\\n  <p>Form policies can be defined in 3 ways: application-wide, per-form, or a combination of the two (application-wide with per-form overrides).</p>\\n\\n  <div class=\\\"callout callout-info\\\">\\n    <h4>Application-wide configuration</h4>\\n\\n    <p>You can override the default policies by replacing the policy-factory value for each policy:</p>\\n    <div class=\\\"highlight\\\">\\n      <pre class=\\\"bs-example-code\\\">\\n        <code class=\\\"javascript\\\" highlight-block>\\n          angular.module('myApp', ['ngFormLib',\\n            'ngFormLib.policy.behaviourOnStateChange',\\n            'ngFormLib.policy.checkForStateChanges',\\n            'ngFormLib.policy.stateDefinitions'\\n          ])\\n          // Replace the 'formPolicyBehaviourOnStateChange' policy with a new implementation\\n          .factory('formPolicyBehaviourOnStateChange', ['formPolicyBehaviourOnStateChangeLibrary', function(policyLib) {\\n            return policyLib.onSubmitFocusFirstField;\\n          }])\\n          // Replace the 'formPolicycheckForStateChanges' policy with a new implementation\\n          .factory('formPolicycheckForStateChanges', ['formPolicycheckForStateChangesLibrary', function(policyLib) {\\n            return policyLib.onChange;\\n          }]);\\n          // Replace the 'formPolicyStateDefinitions' policy with a new implementation\\n          .factory('formPolicyStateDefinitions', ['formPolicyStateDefinitionLibrary', function(policyLib) {\\n\\n            return function(formName, fieldName) {\\n              // Return an object with the stateName(key) and the stateDefinition string(value)\\n              return {\\n                'error': policyLib.immediately(formName, fieldName)\\n              };\\n            };\\n\\n          }]);\\n        </code>\\n      </pre>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"callout callout-info\\\">\\n    <h4>Per-Form configuration</h4>\\n\\n    <p>You can override the application-wide (default) policies by specifying a policy-object on the form via a <code>form-policy</code> attribute:</p>\\n    <div class=\\\"highlight\\\">\\n      <pre class=\\\"bs-example-code\\\"><code class=\\\"html\\\" highlight-block>\\n        &lt;div ng-controller=\\\"myController as ctrl\\\"&gt;\\n          &lt;form form-policy=\\\"myPolicy\\\"&gt;...&lt;/form&gt;\\n        &lt;/div&gt;\\n      </code></pre>\\n    </div>\\n    <div class=\\\"highlight\\\">\\n      <pre class=\\\"bs-example-code\\\"><code class=\\\"javascript\\\" highlight-block>\\nmodule.controller('myController', function() {\\n  var vm = this;\\n\\n  function wonderChecker(scope, element, name, errorCondition, ngModelController) {\\n      //...\\n  }\\n\\n  // This will overwrite only the checkForStateChanges policy\\n  vm.myPolicy = {\\n    checkForStateChanges: wonderChecker,\\n  };\\n}\\n        </code>\\n      </pre>\\n    </div>\\n  </div>\\n\\n</div>\\n\";\n\n/***/ },\n/* 78 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"FIELD_ERROR\": {\n\t\t\t\"TEMPLATE\": {\n\t\t\t\t\"REQUIRED\": \"Please enter {{pronoun}} {{fieldLabel}}.\"\n\t\t\t},\n\t\t\t\"NAME_REQUIRED\": \"@:ERROR.TEMPLATE.REQUIRED\",\n\t\t\t\"TITLE_REQUIRED\": \"@:ERROR.TEMPLATE.REQUIRED\"\n\t\t},\n\t\t\"FIELD\": {\n\t\t\t\"TITLE\": \"Title (from translation file)\"\n\t\t},\n\t\t\"OTHER\": {\n\t\t\t\"HINT\": \"This is a hint from the translation file\",\n\t\t\t\"PLACEHOLDER\": \"Select an item from the translation file\"\n\t\t}\n\t};\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** js/docs.8d85ed5f.js\n **/","import angular from 'angular';\nimport ngTranslate from 'angular-translate';\n\nconst mod = angular.module('ngFormLib.controls.errorMessageContainer', [ngTranslate]);\n\nexport default mod.name;\n\n\n//angular.module('ngFormLib.controls.errorMessageContainer', ['pascalprecht.translate'])\n\n/**\n * This directive is really a FIELD error message container - it is designed to work with fields exclusively\n */\nmod.directive('errorContainer', ['$compile', '$filter', function($compile, $filter) {\n\n  function translateError(errorMessage, fieldLabel) {\n    var firstLetterIsAVowel = fieldLabel ? ('aeiou'.indexOf(fieldLabel[0].toLowerCase()) !== -1) : undefined;\n    return $filter('translate')(errorMessage, {pronoun: firstLetterIsAVowel ? 'an' : 'a', fieldLabel: fieldLabel});\n  }\n\n  function ErrorController(element) {\n    var errors = [],\n      ariaElement = element;\n\n    return {\n      addError: function(errorType, errorMessage, fieldLabel) {\n        errors[errorType] = translateError(errorMessage, fieldLabel);\n      },\n\n      removeError: function(errorType) {\n        delete errors[errorType];\n      },\n\n      refreshErrorText: function() {\n        var str = '', i = 0;\n        for (var type in errors) {\n          if (errors.hasOwnProperty(type)) {\n            str += 'Error ' + (++i) + ', ' + errors[type] + ',';\n          }\n        }\n\n        if (i === 1) {\n          str = '. There is 1 error for this field. ' + str;\n        } else if (i > 1) {\n          str = '. There are ' + i + ' errors for this field. ' + str;\n        }\n        ariaElement.text(str);\n      }\n    };\n  }\n\n  function generateErrorTag(errorType, errorText, fieldLabel) {\n    return '<div class=\"text-error ec2-' + errorType + '\"><span class=\"text-error-wrap\">' + translateError(errorText, fieldLabel) + '</span></div>';\n  }\n\n  /**\n   * Handle the field-based error messages\n   */\n  function toggleErrorVisibilityOnError(controller, formController, scope, element, watchExpr, errorType, errorText, fieldLabel) {\n    //console.log('watchExpr = ' + watchExpr);\n    formController._scope.$watch(watchExpr, function(newValue) {\n      if (newValue) {\n        // The error text could contain an interpolation string, so we need to compile it\n        var val = $compile(generateErrorTag(errorType, errorText, fieldLabel))(scope);\n        element.append(val);\n        controller.addError(errorType, errorText, fieldLabel);\n      } else {\n        removeErrorMessage(controller, formController, element, errorType);\n      }\n      controller.refreshErrorText();\n    });\n  }\n\n  /**\n   * Handle text errors. Text errors are associated with a scope, rather than with a field.\n   * This means we can clear them from the scope when the field-they-are-associated-with is changed.\n   */\n  function toggleErrorVisibilityForTextError(errorController, formController, fieldController, scope, element, watchExpr, fieldLabel) {\n    //console.log('Watching error: ' + watchExpr);\n\n    formController._scope.$watch(watchExpr, function(newValue) {\n      // Update the validity of the field's \"watchExpr\" error-key to match the value of the errorText\n      fieldController.$setValidity(watchExpr, !newValue);\n\n      // Remove the old error message for this same errorType first, in cases where the error message is changing.\n      removeErrorMessage(errorController, formController, element, watchExpr);\n\n      if (newValue) {\n        // No need to compile the error message as we already have its value\n        element.append(generateErrorTag(watchExpr, newValue, fieldLabel));\n        errorController.addError(watchExpr, newValue, fieldLabel);\n\n        // Turn the border red by sending a 'form-submit-attempted' event\n        formController.setSubmitted(true);\n      }\n      errorController.refreshErrorText();\n    });\n\n    // When the field changes, clear the errorText value\n    fieldController.$viewChangeListeners.push(function() {\n      if (scope.$eval(watchExpr)) {\n        scope.$eval(watchExpr + ' = null');\n      }\n    });\n  }\n\n\n  function removeErrorMessage(controller, formController, element, errorType) {\n    // find the div with our special class, then remove it\n    var divs = element.find('div');\n    for (var len = divs.length, i = len - 1; i > -1; i--) {\n      if (divs.eq(i).hasClass('ec2-' + errorType)) {\n        divs.eq(i).remove();\n      }\n    }\n    controller.removeError(errorType);\n  }\n\n  return {\n    restrict: 'AE',\n    require: ['^form'], // Require the formController controller somewhere in the parent hierarchy (mandatory for field-errors)\n    template: '<div class=\"container-error\"></div>',\n    replace: true,\n    link: function(scope, element, attr, controllers) {\n\n      var fieldName = attr.fieldName,\n        fieldLabel = attr.fieldLabel || '',\n        formController = controllers[0],\n        formName = formController.$name,\n        formField = formName + '.' + fieldName,\n        fieldErrors = scope.$eval(attr.fieldErrors || []),  // You can escape interpolation brackets inside strings by doing  \\{\\{   - wow!\n        textErrors = scope.$eval(attr.textErrors || []);\n\n      element.attr('id', formName + '-' + fieldName + '-errors');\n      element.append('<span class=\"sr-only\" aria-hidden=\"true\" id=\"' + formName + '-' + fieldName + '-errors-aria\"></span>');\n\n      var ariaElement = element.find('span'),\n        errorController = new ErrorController(ariaElement);   // new? Maybe make this the directive's controller instead\n\n      for (var error in fieldErrors) {\n        if (fieldErrors.hasOwnProperty(error)) {\n          var errorShowCondition = formField + '.fieldState === \"error\" && ' + formField + '.$error.' + error;\n          toggleErrorVisibilityOnError(errorController, formController, scope, element, errorShowCondition, error, fieldErrors[error], fieldLabel);\n        }\n      }\n\n      // Watch formController[fieldName] - it may not have loaded yet. When it loads, call the main function.\n      if (textErrors) {\n        //console.log('textErrors: ' + textErrors + ', fieldName = ' + fieldName);\n        var fieldWatcher = scope.$watch(function() {\n          return formController[fieldName];\n        }, function(newValue) {\n          if (newValue) {\n            fieldWatcher(); // Cancel the watcher\n\n            // Do the actual thing you planned to do...\n            for (var item in textErrors) {\n              if (textErrors.hasOwnProperty(item)) {\n                toggleErrorVisibilityForTextError(errorController, formController, formController[fieldName], scope, element, textErrors[item], fieldLabel);\n              }\n            }\n          }\n        });\n      }\n\n      element.removeAttr('error-container').removeAttr('field-name').removeAttr('field-errors').removeAttr('text-errors');\n    }\n  };\n}]);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/errorMessageContainer/ErrorMessageContainer.js\n **/","import angular from 'angular';\nimport FieldErrorController from './FieldErrorController';\nimport FormControlService from './FormControlService';\nimport RequiredMarker from '../requiredMarker/RequiredMarker';\n\nconst mod = angular.module('ngFormLib.controls.common', [\n  FieldErrorController,\n  FormControlService,\n  RequiredMarker\n]);\n\nexport default mod.name;\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/common/index.js\n **/","import angular from 'angular';\nimport Utility from '../../../common/Utility';\n\nconst mod = angular.module('ngFormLib.controls.common.formControlService', [Utility]);\n\nexport default mod.name;\n\n// Workaround for bug #1404\n// https://github.com/angular/angular.js/issues/1404\n// Source: http://plnkr.co/edit/hSMzWC?p=preview\n// Not so great for IE8, but necessary for using radio buttons inside of dynamic forms (ng-repeat)\nmod.config(['$provide', function($provide) {\n  $provide.decorator('ngModelDirective', ['$delegate', function($delegate) {\n    var ngModel = $delegate[0], controller = ngModel.controller;\n    ngModel.controller = ['$scope', '$element', '$attrs', '$injector', function(scope, element, attrs, $injector) {\n      var $interpolate = $injector.get('$interpolate');\n      attrs.$set('name', $interpolate(attrs.name || '')(scope));\n      $injector.invoke(controller, this, {\n        '$scope': scope,\n        '$element': element,\n        '$attrs': attrs\n      });\n    }];\n    return $delegate;\n  }]);\n  $provide.decorator('formDirective', ['$delegate', function($delegate) {\n    var form = $delegate[0], controller = form.controller;\n    form.controller = ['$scope', '$element', '$attrs', '$injector', function(scope, element, attrs, $injector) {\n      var $interpolate = $injector.get('$interpolate');\n      attrs.$set('name', $interpolate(attrs.name || attrs.ngForm || '')(scope));\n      $injector.invoke(controller, this, {\n        '$scope': scope,\n        '$element': element,\n        '$attrs': attrs\n      });\n    }];\n    return $delegate;\n  }]);\n}]);\n\n\n// Shared code for the accessible controls\nmod.provider('formControlService', function() {\n  var self = this,\n      counter = 0;    // Private variable\n\n  //\n  self.defaults = {\n    idPrefix: 'fpFld',\n    templates: {\n      formCheckbox: {\n        template:           require('file?name=/template/[name].[ext]!../formCheckbox/template/FormCheckboxTemplate.tpl.html')\n      },\n      formDate: {\n        template:           require('file?name=/template/[name].[ext]!../formDate/template/FormDateInputTemplate.tpl.html')\n      },\n      formInput: {\n        template:           require('file?name=/template/[name].[ext]!../formInput/template/FormInputTemplate.tpl.html')\n      },\n      formRadioButton: {\n        template:           require('file?name=/template/[name].[ext]!../formRadioButton/template/FormRadioButtonTemplate.tpl.html')\n      },\n      formSelect: {\n        template:           require('file?name=/template/[name].[ext]!../formSelect/template/FormSelectTemplate.tpl.html')\n      },\n      requiredMarker: {\n        template:           require('file?name=/template/[name].[ext]!../requiredMarker/template/RequiredMarkerTemplate.tpl.html')\n      }\n    }\n  };\n\n  this.$get = ['ngFormLibStringUtil', '$interpolate', function(StringUtil) {\n\n    var service = {\n      defaults: self.defaults,\n\n      buildDirective: function(params) {\n        var directive = {\n          restrict: 'AE',\n          replace: true,\n          transclude: true,\n          compile: function(tElement, tAttr) {\n\n            service.validateComponentStructure(params.controlName, tElement, params.expectedTemplateElements, tAttr, params.expectedAttributes);\n\n            // For items that are inside repeaters, if more than one element has the same id, the checkbox stops working.\n            // By using an attribute that is not called 'id', we can avoid this issue\n            var id = tAttr.uid || service.getUniqueFieldId(),\n              name = tAttr.name || id,// Doing this *will* break radio buttons, but they SHOULD provide a name anyway (for their own good)\n              inputElem = tElement.find(params.inputElementName || 'input'),\n              labelElem = tElement.find('label'),\n              required = service.getRequiredAttribute(tAttr.required);\n\n            service.decorateLabel(labelElem, required, id, tAttr.labelClass, tAttr.hideLabel, tAttr.hideRequiredIndicator, tAttr.labelSuffix);\n            inputElem = service.decorateInputField(inputElem, tElement, tAttr, id, name, required);\n\n            // Do component-specific config last\n            params.configFn(tElement, tAttr, id, name, inputElem, labelElem);\n\n            // Clean up special attributes (to make HTML look nicer)\n            tElement.removeAttr('uid').removeAttr('name').removeAttr('label').removeAttr('required').removeAttr('field-hint')\n              .removeAttr('input-type').removeAttr('hide-label').removeAttr('hideRequiredIndicator')\n              .removeAttr('label-class').removeAttr('field-errors').removeAttr('text-errors');\n          },\n          templateUrl: function(element, attr) {\n            // Check the element for a \"template\" attribute, which allows customisation-per-control. Otherwise, use the control-wide template.\n            return attr.template || service.getHTMLTemplate(element, params.controlName);\n          }\n        };\n\n        return directive;\n      },\n\n      getUniqueFieldId: function() {\n        return '' + self.defaults.idPrefix + counter++;\n      },\n\n      getHTMLTemplate: function(element, type) {\n        // Allow different templates to be applied for different form-styles (eg for horizontal forms, inline forms, \"normal\" forms).\n        // This is an advanced feature that most users will not need.\n        // E.g.: self.defaults.templates['select']['form-inline'] = 'path/to/your/custom/template.html'\n\n        // Check this element's parent-form-element-classes to see if they match. First match, wins.\n        var parentFormClasses = (element.inheritedData('formElementClasses') || '').split(' ');\n        var result = self.defaults.templates[type].template;  // The default template, if nothing else is specified.\n\n        for (var i = 0; i < parentFormClasses.length; i++) {\n          var template = self.defaults.templates[type][parentFormClasses[i]];\n          if (template) {\n            result = template;\n            break;\n          }\n        }\n\n        return result;\n      },\n\n      addToAttribute: function(element, attributeName, value) {\n        var existingVal = element.attr(attributeName);\n        element.attr(attributeName, ((existingVal) ? existingVal + ' ' : '') + value);\n      },\n\n\n      removeFromAttribute: function(element, attributeName, value) {\n        // Borrowed this statement from Angular.js\n        var newValue = StringUtil.trim(\n          (' ' + (element.attr(attributeName) || '') + ' ')\n          .replace(/[\\n\\t]/g, ' ')\n          .replace(' ' + StringUtil.trim(value) + ' ', ' ')\n        );\n\n        // Remove the attribute if it is empty\n        if (newValue === '') {\n          element.removeAttr(attributeName);\n        } else {\n          element.attr(attributeName, newValue);\n        }\n      },\n\n\n      getRequiredAttribute: function(required) {\n        // When we set required=\"true\" on a parent directive (like on-off-button), inputElem.attr('required', 'true')\n        // becomes <input required=\"required\" due to browser interference. So detect this case, and replace it with \"true\"\n        // In v1.3, required=\"true\" becomes required=\"\".\n        if (required === 'required' || required === '' || required === 'true') {\n          return 'true';\n        } else if (required === undefined) {\n          return 'false';\n        }\n        return required;\n      },\n\n\n      decorateLabel: function(labelElem, required, id, labelClass, hideLabelExpr, hideRequiredIndicator, labelSuffix) {\n        if (id) {\n          labelElem.attr('for', id);\n        }\n        if (labelClass) {\n          labelElem.addClass(labelClass);\n        }\n        if (hideLabelExpr) {\n          labelElem.attr('ng-class', '{\\'sr-only\\': ' + hideLabelExpr + '}');\n        }\n        if (!hideRequiredIndicator) {\n          labelElem.append('<span required-marker hide=\"!(' + required + ')\"></span>');\n        }\n        // Some labels have suffix text - text that helps with describing the label, but isn't really the label text.\n        // E.g. Amount ($AUD)\n        if (labelSuffix) {\n          labelElem.text(labelElem.text() + ' ' + labelSuffix);\n        }\n      },\n\n\n\n      decorateInputField: function(inputElem, hostElement, attr, id, name, required) {\n        if (attr.inputType) {\n          // inputElem.attr('type', attr.inputType); // THIS WILL NOT WORK ON IE8!\n          // Instead, we must replace the entire node with the only property which SHOULD exist on the template: 'class'\n          inputElem.replaceWith('<input type=\"' + attr.inputType + '\" class=\"' + inputElem.attr('class') + '\">');\n          inputElem = hostElement.find('input');\n        }\n\n        inputElem.attr('id', id);\n\n        // Allow the name to be interpolated\n        inputElem.attr('name', name);\n\n        // Apply all of the ff-* attributes to the input element. Use the original attribute names\n        // attr.$attr contains the snake-case names e.g. 'form-field' vs camel case 'formField'\n        for (var a in attr.$attr) {\n          if (a.indexOf('ff') === 0) {    // Don't search for 'ff-' as the '-' has been replaced with camel case now\n            var origAttrName = attr.$attr[a].substr(3);\n\n            if (origAttrName === 'class') {\n              inputElem.addClass(attr[a]);\n\n            // Special case for type property. It *must* be read-only. Therefore, don't write it to the element\n            // See http://stackoverflow.com/questions/8378563/why-cant-i-change-the-type-of-an-input-element-to-submit\n            } else if (origAttrName !== 'type') {\n              inputElem.attr(origAttrName, attr[a]);\n            }\n\n            // Remove all attributes off the host element\n            hostElement.removeAttr(attr.$attr[a]);\n          }\n        }\n\n        inputElem.attr('ng-required', required);\n        inputElem.attr('aria-required', '{{!!(' + required + ')}}');  // evaluates to true / false\n        return inputElem;\n      },\n\n\n      createErrorFeatures: function(parentElement, inputElement, name, fieldLabel, fieldErrors, textErrors) {\n        if (fieldErrors || textErrors) {\n          // Add an fieldErrorControllers attribute to the element, to hook-up the error features\n          inputElement.attr('field-error-controller', '');\n\n          var fieldLabelStr = (fieldLabel) ? ' field-label=\"' + fieldLabel + '\"' : '';\n          var errorContainerElem = angular.element('<div error-container field-name=\"' + name + '\"' + fieldLabelStr + '></div>');\n          if (fieldErrors) {\n            errorContainerElem.attr('field-errors', fieldErrors);\n          }\n          if (textErrors) {\n            errorContainerElem.attr('text-errors', textErrors);\n          }\n          parentElement.append(errorContainerElem);\n        }\n      },\n\n      createFieldHint: function(hostElement, inputElement, fieldHint, fieldHintId, fieldHintDisplay) {\n        var hintElement;\n\n        if (fieldHint) {\n          // If we have a field hint, add that as well\n          if (fieldHintDisplay) {\n            // If a field hint display rule exists, implement.\n            hintElement = angular.element('<p ng-if=\"' + fieldHintDisplay + '\" class=\"help-block\" id=\"' + fieldHintId + '\">' + fieldHint + '</p>');\n          } else {\n            hintElement = angular.element('<p class=\"help-block\" id=\"' + fieldHintId + '\">' + fieldHint + '</p>');\n          }\n          hostElement.append(hintElement);\n          inputElement.attr('aria-describedby', fieldHintId);\n        }\n      },\n\n      buildNgClassExpression: function(inputElem, targetElem) {\n        // If the inputElem has an ngModel and/or ngChecked attribute, create the ng-class attribute\n        //todo.. test checkbox implementation\n        var modelStr = inputElem.attr('ng-model'),\n            checkedStr = inputElem.attr('ng-checked'),\n            disabledStr = inputElem.attr('ng-disabled'),\n            value = inputElem.attr('value'),        // a string - used for Radio buttons\n            ngValue = inputElem.attr('ng-value'),   // an expression - used for Radio buttons\n            ngTrueValue = inputElem.attr('ng-true-value');\n\n        if (modelStr) {\n          if (ngValue || ngTrueValue) {\n            modelStr += ' === ' + (ngValue || ngTrueValue);\n          } else if (value) {\n            // The value is ALWAYS a string\n            modelStr += ' === \\'' + value + '\\'';\n          } else {\n            modelStr += ' === true';  // For checkboxes, in the absence of ng-true-value\n          }\n        }\n\n        if (modelStr && checkedStr) {\n          modelStr += ' || ' + checkedStr;\n        } else if (checkedStr) {\n          modelStr = checkedStr;\n        }\n\n        if (modelStr && disabledStr) {\n          targetElem.attr('ng-class', '{\\'checked\\': ' + modelStr + ', \\'disabled\\': ' + disabledStr + '}');\n        } else if (modelStr) {\n          targetElem.attr('ng-class', '{\\'checked\\': ' + modelStr + '}');\n        }\n      },\n\n      validateComponentStructure: function(componentName, element, requiredElements, attr, requiredAttributes) {\n        for (var i = 0; i < requiredElements.length; i++) {\n          if (!element.find(requiredElements[i])) {\n            throw new Error('The ' + componentName + ' component template requires a ' + requiredElements[i] + ' element.');\n          }\n        }\n\n        for (var j = 0; j < requiredAttributes.length; j++) {\n          if (!attr[requiredAttributes[j]]) {\n            throw new Error('The ' + componentName + ' component requires a ' + requiredAttributes[j] + ' attribute.');\n          }\n        }\n      }\n\n    };\n    return service;\n  }];\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/common/FormControlService.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLib.common.utility', []);\n\nexport default mod.name;\n\nmod.constant('ngFormLibDateUtil', {\n  convertDate: function(dateStr, newSep) {\n    // Converts a date between dd/mm/yyyy and yyyy-mm-dd\n    if (!dateStr || !newSep || !(newSep === '/' || newSep === '-')) {\n      return dateStr;\n    }\n\n    // Choose a separator string that is the 'opposite' of the desired separator\n    var oldSep = (newSep === '/') ? '-' : '/',\n      parts = dateStr.split(oldSep);\n\n    // if we get a dodgy date OR you tried to convert a date that was already in the correct format, return the input\n    if (isNaN(parts.join('')) || parts.length !== 3) {\n      return dateStr;\n    }\n\n    // Swap the year and day parts around\n    return parts[2] + newSep + parts[1] + newSep + parts[0];\n  },\n  formatDay: function(dayOrDate, month, year) {\n    var dd = dayOrDate, mm = month, yyyy = year;\n    if (dayOrDate.getUTCDay) {\n      dd = dayOrDate.getDate();\n      mm = dayOrDate.getMonth() + 1;//January is 0!`\n      yyyy = dayOrDate.getFullYear();\n    }\n    return ((dd < 10) ? '0' + dd : dd) + '/' + ((mm < 10) ? '0' + mm : mm) + '/' + yyyy;\n  },\n  dateAdd: function(dateStr, numDays) {\n    // Return a modified date in ISO format\n    var myDate = this.getDate(dateStr);\n    myDate.setDate(myDate.getDate() + numDays);\n\n    return this.formatDay(myDate);\n  },\n  getToday: function(optionalDate) {\n    return this.formatDay(optionalDate || new Date());\n  },\n  isISODate: function(dateStr) {\n    return (typeof dateStr === 'string' && dateStr.indexOf('-') > 0);\n  },\n  getDate: function(dateStr) {\n    if (!this.isISODate(dateStr)) {\n      dateStr = this.convertDate(dateStr, '-');\n    }\n    return new Date(dateStr);\n  },\n  monthsBetween: function(date1, date2) {\n    return date2.getMonth() - date1.getMonth() + (12 * (date2.getFullYear() - date1.getFullYear()));\n  }\n});\n\n\nmod.constant('ngFormLibStringUtil', (function() {\n  var trimRegExp = /^\\s+|\\s+$/g;\n\n  return {\n    trim: function(text) {\n      if (typeof text === 'string') {\n        return text.replace(trimRegExp, '');\n      }\n      return text;\n    }\n  };\n})());\n\n\nmod.constant('ngFormLibNumberUtil', (function() {\n  var isDigitsRegExp = /^\\d+$/;\n\n  return {\n    isDigits: function(text) {\n      return isDigitsRegExp.test(text);\n    }\n  };\n})());\n\n\nmod.constant('ngFormLibObjectUtil', {\n  getUniqueId: function() {\n    return ('' + (new Date()).getTime() + Math.random()).replace(/\\./, '');\n  },\n  toArray: function(obj) {\n    var arr = [];\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        arr[arr.length] = {key: i, value: obj[i]};\n      }\n    }\n    arr.sort(function compare(a, b) {\n      return a.key < b.key;\n    });\n    return arr;\n  }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/common/Utility.js\n **/","import angular from 'angular';\nimport FormControlService from './FormControlService';\n\nconst mod = angular.module('ngFormLib.controls.common.fieldErrorController', [\n  FormControlService\n]);\n\nexport default mod.name;\n\n/**\n * The Field Error Controller directive is designed to indicate to the browser when the field is in error\n *  and what the errors are. It applies the form-policy for showing errors\n *\n * It works in tandem with the form controller (and FormPolicy.js) to identify when a form-element has an error, and decorates\n *  the element accordingly.\n *\n * It also toggles the fieldController.fieldState flag, based on the form policy provided\n *\n */\n\n// INPUT:\n//  <input ... field-error-controller></input>\n\n// OUTPUT:\n//  <input ... aria-invalid=\"false/true\" aria-describedby=\"fieldId-errors\">\n\n\nmod.directive('fieldErrorController', ['formControlService', '$timeout', function(formControlService, $timeout) {\n\n  function updateAriaFeatures(fieldState, element, formName, fieldName) {\n    element.attr('aria-invalid', fieldState === 'error');\n    var errorElemId = formName + '-' + fieldName + '-errors-aria';\n\n    if (fieldState === 'error') {\n      // Use the errorContainer's special ARIA element as the source of the error text\n      formControlService.addToAttribute(element, 'aria-describedby', errorElemId);\n    } else {\n      formControlService.removeFromAttribute(element, 'aria-describedby', errorElemId);\n    }\n  }\n\n  function updateElementStyle(fieldState, element, formPolicy) {\n    element[(fieldState === 'error') ? 'addClass' : 'removeClass'](formPolicy.fieldErrorClass);\n    element[(fieldState === 'success') ? 'addClass' : 'removeClass'](formPolicy.fieldSuccessClass);\n  }\n\n  function setupCanShowErrorPropertyOnNgModelController(scope, formController, ngModelController, element, name) {\n    // Using the form policy, determine when to show errors for this field\n    var formPolicy = formController._policy,\n      formName = formController.$name,\n      fieldName = formName + '.' + name,\n      stateConditions = formPolicy.stateDefinitions(formName, fieldName);\n\n    formPolicy.checkForStateChanges(formController._scope, element, name, stateConditions, ngModelController, formController);\n  }\n\n\n  return {\n    restrict: 'AE',\n    require: ['?ngModel', '?^form', '?^formGroup'],  // Require the formController controller somewhere in the parent hierarchy\n    replace: true,\n    link: function(scope, element, attr, controllers) {\n      // Tried to use a template string, but the model was not binding properly. Using $compile() works :)\n      var ngModelController = controllers[0],\n        formController = controllers[1],\n        formGroupElement = (controllers[2] || {}).$element || element,// This looks for a parent directive called formGroup, which has a controller, which has an $element property\n        name = attr.name;\n\n\n      if (formController) {\n        var formName = formController.$name,\n          errorBehaviour = formController._applyFormBehaviourOnStateChangePolicy; // returns a function which encapsulates the form policy rules for the behaviour to apply when errors show\n\n        if (ngModelController) {\n          setupCanShowErrorPropertyOnNgModelController(scope, formController, ngModelController, element, name);\n        }\n\n        // When the error-showing flag changes, update the field style\n        formController._scope.$watch(formName + '.' + name + '.fieldState', function(fieldState) {\n          updateAriaFeatures(fieldState, element, formName, name);\n          updateElementStyle(fieldState, formGroupElement, formController._policy);\n\n          // Apply the error behaviour behaviour\n          errorBehaviour.applyBehaviour(element, fieldState, false);\n        });\n\n        // Listen to form-submit events, to determine what to focus on too\n        scope.$on('event:FormSubmitAttempted', function() {\n          // Make sure that the field-level watchers have a chance to fire first, so use a timeout\n          $timeout(function() {\n            errorBehaviour.applyBehaviour(element, ngModelController.fieldState, true);\n          }, 1);\n        });\n      }\n    }\n  };\n}]);\n\n\n// This directive\nmod.directive('formGroup', [function() {\n  return {\n    restrict: 'AC',\n    controller: ['$scope', '$element', function($scope, $element) {\n      this.$element = $element;\n    }]\n  };\n}]);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/common/FieldErrorController.js\n **/","import angular from 'angular';\nimport FormLibCommon from '../common/index';\nimport ErrorMessageContainer from '../errorMessageContainer/ErrorMessageContainer';\n\nconst mod = angular.module('ngFormLib.controls.formCheckbox', [FormLibCommon, ErrorMessageContainer]);\n\nexport default mod.name;\n\n\n// INPUT:\n//  <form-checkbox id=\"id\" name=\"name\" required=\"{{expression}}\"\n//      ff-class=\"span12\" ff-ng-model=\"application.contentType\" ff-value=\"software\" ff-aria-label=\"Software\"\n//        ff-ng-click=\"doSomething()\"\n//      field-errors=\"{required: 'Please select'}\"\n//      text-errors=\"['wrong value']\"\n//      >My label with <a href=\"http://www.google.com/\">HTML bits</a> in it</form-checkbox>\n\n// OUTPUT:\n\n\nmod.directive('formCheckbox', ['formControlService', function(formControlService) {\n\n  return formControlService.buildDirective({\n    controlName: 'formCheckbox',\n    expectedTemplateElements: ['input', 'label', 'div'],\n    expectedAttributes: [],\n    configFn: function(tElement, tAttr, id, name, inputElem) {\n      // Move the class attribute from the outer-DIV to the checkbox DIV (special case)\n      var checkboxDiv = tElement.find('div');\n      checkboxDiv.addClass(tElement.attr('class'));\n      tElement.removeAttr('class');\n\n      formControlService.createErrorFeatures(tElement, inputElem, name, '', tAttr.fieldErrors, tAttr.textErrors);\n      formControlService.buildNgClassExpression(inputElem, inputElem);  // Put the ng-class onto the input element itself, as this makes styling easier\n    }\n  });\n}]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formCheckbox/FormCheckbox.js\n **/","import angular from 'angular';\nimport FormLibCommon from '../common';\nimport ErrorMessageContainer from '../errorMessageContainer/ErrorMessageContainer';\n\nconst mod = angular.module('ngFormLib.controls.formDate', [FormLibCommon, ErrorMessageContainer]);\n\nexport default mod.name;\n\n\n// INPUT:\n//    <div form-date id=\"toDate\" name=\"toDate\" label=\"To date\" hide-label=\"true\" input-type=\"text\"\n//    ff-ng-model=\"acctCtrl.search.toDate\" ff-max-date=\"today\" ff-bs-show=\"acctCtrl.datePickers.datePickerTo\"\n//    ff-ng-blur=\"acctCtrl.toggleDatePicker('datePickerTo', true)\"\n//    ff-ng-focus=\"acctCtrl.toggleDatePicker('datePickerFrom', true)\"\n//    ff-class=\"form-control input-beta input-date\"\n//    field-errors=\"{date: 'ERROR.DATE_INVALID'}\" >\n//      <i class=\"calendar\" ng-click=\"acctCtrl.toggleDatePicker('datePickerTo')\"></i>\n//    </div>\n\n\nmod.directive('formDate', ['formControlService', function(formControlService) {\n\n  return formControlService.buildDirective({\n    controlName: 'formDate',\n    expectedTemplateElements: ['input', 'label'],\n    expectedAttributes: ['label'],\n    configFn: function(tElement, tAttr, id, name, inputElem, labelElem) {\n      labelElem.prepend(tAttr.label);\n\n      //formControlService.decorateInputGroup(tElement.find('div'), tAttr.inputGroupClass);\n      formControlService.createFieldHint(tElement, inputElem, tAttr.fieldHint, id + '-hint', tAttr.fieldHintDisplay);\n      formControlService.createErrorFeatures(inputElem.parent(), inputElem, name, tAttr.label, tAttr.fieldErrors, tAttr.textErrors);\n    }\n  });\n}]);\n\n\nmod.directive('formDateFormat', ['ngFormLibDateUtil', function(DateUtil) {\n  // All dates greater than AD 0 and less than AD 10000 in dd/mm/yyyy format\n  // RegEx behaves oddly if /g is uses in Regexp.test() situations\n  var dateRegEx = /^(((0[1-9]|[12][0-9]|3[01])([\\/])(0[13578]|10|12)([\\/])(\\d{4}))|(([0][1-9]|[12][0-9]|30)([\\/])(0[469]|11)([\\/])(\\d{4}))|((0[1-9]|1[0-9]|2[0-8])([\\/])(02)([\\/])(\\d{4}))|((29)(\\/)(02)([\\/])([02468][048]00))|((29)([\\/])(02)([\\/])([13579][26]00))|((29)([\\/])(02)([\\/])([0-9][0-9][0][48]))|((29)([\\/])(02)([\\/])([0-9][0-9][2468][048]))|((29)([\\/])(02)([\\/])([0-9][0-9][13579][26])))$/;\n\n  return {\n    require: 'ngModel',\n    priority: 150,    // Higher priority than ui-mask (100), so the postLink function runs last\n    link: function(scope, elem, attrs, ctrl) {\n\n\n      ctrl.$parsers.unshift(function(viewValue) {\n\n\n        // If viewValue is undefined or null, jump out\n        if (!viewValue) {\n          ctrl.$setValidity('date', true);\n          ctrl.$setValidity('minDate', true);  // Turn off the error if the date format isn't valid\n          ctrl.$setValidity('maxDate', true);  // Turn off the error if the date format isn't valid\n          return viewValue;\n        }\n\n        // If viewValue is a string of 8 digits, then convert it to dd/dd/dddd first\n        if (viewValue.length === 8 && !isNaN(viewValue * 1)) {\n          viewValue = viewValue.substr(0, 2) + '/' + viewValue.substr(2, 2) + '/' + viewValue.substr(4);\n        }\n\n        // Check that it is a valid date\n        var dateFormatValid = dateRegEx.test(viewValue) || typeof viewValue === 'undefined' || !viewValue;\n        ctrl.$setValidity('date', dateFormatValid);\n\n        //console.log('dateInput: ' + viewValue + ', ' + ctrl.$modelValue);\n\n        // If the date is valid\n        if (dateFormatValid && viewValue) {\n          var fieldDate = DateUtil.getDate(viewValue);\n          // and there is a min date, check if the value is greater than the min date\n          if (attrs.minDate) {\n            var minDate = DateUtil.getDate(attrs.minDate);\n            ctrl.$setValidity('minDate', fieldDate.getTime() >= minDate.getTime());\n          } else {\n            ctrl.$setValidity('minDate', true);\n          }\n          // and there is a max date, check if the value is less than the max date\n          if (attrs.maxDate) {\n            var maxDate;\n\n            if (attrs.maxDate === 'today') {\n              maxDate = DateUtil.getDate(DateUtil.getToday());\n            } else {\n              maxDate = DateUtil.getDate(attrs.maxDate);\n            }\n\n            ctrl.$setValidity('maxDate', fieldDate.getTime() <= maxDate.getTime());\n          } else {\n            ctrl.$setValidity('maxDate', true);\n          }\n        } else {\n          ctrl.$setValidity('minDate', true);  // Turn off the error if the date format isn't valid\n          ctrl.$setValidity('maxDate', true);  // Turn off the error if the date format isn't valid\n        }\n        return viewValue;\n      });\n\n      ctrl.$viewChangeListeners.push(function() {\n        // If there is a date-change attribute, execute it when the control is valid\n        if (attrs.dateChange && ctrl.$valid) {\n          scope.$eval(attrs.dateChange);\n        }\n      });\n    }\n  };\n}]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formDate/FormDate.js\n **/","import angular from 'angular';\nimport FormLibCommon from '../common';\nimport ErrorMessageContainer from '../errorMessageContainer/ErrorMessageContainer';\n\nconst mod = angular.module('ngFormLib.controls.formInput', [FormLibCommon, ErrorMessageContainer]);\n\nexport default mod.name;\n\n\n// INPUT:\n//  <form-input id=\"\" name=\"\" label=\"Last name\" required=\"{{expression}}\"\n//      ff-class=\"span12\" input-type=\"text|tel|email\" ff-ng-model=\"application.lastName\"\n//      ff-maxlength=\"40\" ff-ng-pattern=\"/^[a-zA-Z0-9 \\-.']+$/\"\n//      field-hint=\"This must be the last name of the person who originally applied for the service.\"\n//      field-errors=\"{required: 'Please enter a valid last name', pattern: 'Please enter a valid last name'}\"\n//      text-errors=\"['data.errors.']\"\n//      content-class=\"span3\"\n//      >My content</form-input>\n\n// OUTPUT:\n\n\nmod.directive('formInput', ['formControlService', function(formControlService) {\n\n  return formControlService.buildDirective({\n    controlName: 'formInput',\n    expectedTemplateElements: ['input', 'label'],\n    expectedAttributes: ['label', 'inputType'],\n    configFn: function(tElement, tAttr, id, name, inputElem, labelElem) {\n      labelElem.prepend(tAttr.label);\n      addPlaceholder(inputElem, tAttr.placeholder); // Do this to be API-compatible with the form-select control. ff-placeholder is still supported. Use one or the other.\n\n      // If the user wants to use 'input-addon-prefix' or 'input-addon-suffix', change the DOM\n      var hasInputGroup = addInputGroup(inputElem, tAttr.inputPrefix, tAttr.inputSuffix);\n      var parentElemForErrors = (hasInputGroup) ? inputElem.parent().parent() : inputElem.parent();\n\n      formControlService.createFieldHint(tElement, inputElem, tAttr.fieldHint, id + '-hint', tAttr.fieldHintDisplay);\n      formControlService.createErrorFeatures(parentElemForErrors, inputElem, name, tAttr.label, tAttr.fieldErrors, tAttr.textErrors);\n    }\n  });\n}]);\n\n\nfunction addPlaceholder(inputElem, placeholderText) {\n  if (placeholderText) {\n    inputElem.attr('placeholder', placeholderText);\n  }\n}\n\n\nfunction addInputGroup(inputElem, inputGroupPrefix, inputGroupSuffix) {\n  if (inputGroupPrefix || inputGroupSuffix) {\n    inputElem.wrap('<div class=\"input-group\">');//inputElem.parent(); // This should be the 'control-row' element//wrap('<div class=\"input-group\">');\n    var wrapper = inputElem.parent();\n\n    if (inputGroupPrefix) {\n      wrapper.prepend('<span class=\"input-group-addon\">' + inputGroupPrefix + '</span>');\n    }\n    if (inputGroupSuffix) {\n      wrapper.append('<span class=\"input-group-addon\">' + inputGroupSuffix + '</span>');\n    }\n    return true;\n  }\n  return false;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formInput/FormInput.js\n **/","import angular from 'angular';\nimport FormLibCommon from '../common';\nimport ErrorMessageContainer from '../errorMessageContainer/ErrorMessageContainer';\n\nconst mod = angular.module('ngFormLib.controls.formRadioButton', [FormLibCommon, ErrorMessageContainer]);\n\nexport default mod.name;\n\n\n// INPUT:\n//  <form-radio-button uid=\"fld\" name=\"name\" aria-label=\"Book Type\" label-class=\"btn btn-toggle\"\n//    ff-class=\"someCSS\" ff-ng-model=\"application.bookType\" ff-value=\"Fiction\" ng-click=\"loadFiction()\" class=\"span6\">\n//     <icon class=\"icon-fiction\"></icon>Fiction\n//  </form-radio-button>\n\n// OUTPUT:\n\n\nmod.directive('formRadioButton', ['formControlService', function(formControlService) {\n\n  return formControlService.buildDirective({\n    controlName: 'formRadioButton',\n    expectedTemplateElements: ['input', 'label', 'div'],\n    expectedAttributes: [], // The template should NOT have a form-group element inside it, as this has to be specified externally (due to the group-nature of radio buttons)\n    configFn: function(tElement, tAttr, id, name, inputElem) {\n      // Move the class attribute from the outer-DIV to the radio-button DIV (special case)\n      var rbDiv = tElement.find('div');\n      rbDiv.addClass(tElement.attr('class'));\n      tElement.removeAttr('class');\n\n      formControlService.createErrorFeatures(tElement, inputElem, name, '', tAttr.fieldErrors, tAttr.textErrors);\n      formControlService.buildNgClassExpression(inputElem, inputElem);  // Put the ng-class onto the input element itself, as this makes styling easier\n    }\n  });\n\n}]);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formRadioButton/FormRadioButton.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLib.controls.formReset', []);\n\nexport default mod.name;\n\n\nmod.directive('formReset', ['$parse', function($parse) {\n\n  function resetFieldState(controlMap) {\n    // Loops through the controlMap and reset's each field's state\n    for (var item in controlMap) {\n      if (controlMap.hasOwnProperty(item)) {\n        var controlList = controlMap[item];\n        for (var j = 0, jLen = controlList.length; j < jLen; j++) {\n          var control = controlList[j].controller;\n          control.fieldState = '';\n        }\n      }\n    }\n  }\n\n\n  return {\n    restrict: 'A',\n    require: '^form',\n    link: function(scope, element, attr, controller) {\n      var ngModelGet = $parse(attr.formReset),\n          ngModelSet = ngModelGet.assign;\n\n      if (!ngModelSet) {\n        throw Error('formReset requires an assignable scope-expression. \"' + attr.formReset + '\" is un-assignable.');\n      }\n\n      // Get a copy of the data as soon as the directive is created, which is after the scope/controller has been initialised (safe)\n      var originalData = angular.copy(ngModelGet(scope));\n\n      element.on('click', function() {\n        if (typeof controller.setSubmitted === 'function') {\n          controller.setSubmitted(false);\n        }\n        // Use a *copy* of the original data, as we don't want originalData to be modified by subsequent changes to the model by the form controls\n        ngModelSet(scope, angular.copy(originalData));\n        resetFieldState(controller._controls || {});\n        controller.$setPristine();\n\n        scope.$emit('event:FormReset');\n        scope.$digest();\n      });\n    }\n  };\n}]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formReset/FormReset.js\n **/","import angular from 'angular';\nimport FormLibCommon from '../common';\nimport ErrorMessageContainer from '../errorMessageContainer/ErrorMessageContainer';\n\nconst mod = angular.module('ngFormLib.controls.formSelect', [FormLibCommon, ErrorMessageContainer]);\n\nexport default mod.name;\n\n// INPUT:\n//  <form-select id=\"frm-size\" name=\"bookSize\" required=\"true\" label=\"Approximate size\"\n//    ff-class=\"span12\" ff-ng-model=\"model.size\" placeholder=\"Select a size bracket\"\n//    ff-ng-options=\"option.value as option.name for option in refData.bookSizes\"\n//    field-errors=\"{required: 'Please select a size bracket'}\"\n//    text-errors=\"['data.errors']\"></form-select>\n\n// OUTPUT:\n\n\n\nmod.directive('formSelect', ['formControlService', function(formControlService) {\n\n  function addPlaceholder(selectElem, placeholderText) {\n    if (placeholderText) {\n      selectElem.append('<option translate value=\"\">' + placeholderText + '</option>');\n    }\n  }\n\n  return formControlService.buildDirective({\n    controlName: 'formSelect',\n    inputElementName: 'select',\n    expectedTemplateElements: ['select', 'label'],\n    expectedAttributes: ['label'],\n    configFn: function(tElement, tAttr, id, name, inputElem, labelElem) {\n      labelElem.prepend(tAttr.label);\n      addPlaceholder(inputElem, tAttr.placeholder);  // Adds the extra option element to the start of the <option>\n\n      formControlService.createFieldHint(tElement, inputElem, tAttr.fieldHint, id + '-hint', tAttr.fieldHintDisplay);\n      formControlService.createErrorFeatures(inputElem.parent(), inputElem, name, tAttr.label, tAttr.fieldErrors, tAttr.textErrors);\n    }\n  });\n\n}]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formSelect/FormSelect.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLib.controls.formSubmit', []);\n\nexport default mod.name;\n\n\n/**\n *  formSubmit - Executes an expression when the form is valid (essentially a form.submit() handler).\n *\n *  It can be applied to either the form element or to a button.\n *\n */\nmod.directive('formSubmit', ['$parse', function($parse) {\n  return {\n    restrict: 'A',\n    require: ['^form'],   // Get the form controller\n    link: function(scope, element, attr, controller) {\n\n      var fn = $parse(attr.formSubmit) || angular.noop,\n        isForm = element[0].tagName === 'FORM',\n        formController = controller[0];\n\n      element.bind(isForm ? 'submit' : 'click', function(event) {\n\n        formController.setSubmitted(true);\n\n        scope.$apply(function() {\n          //scope.$emit('event:FormSubmitAttempted');\n\n          if (formController.$valid) {\n            if (fn(scope, {$event: event}) !== false) {\n              // Needed by the tracking tool as it clears the input data after a submission.\n              // Potentially, form field validation to be done here, but unnecessary at the moment.\n              // The reset behaviour can be over-ridden by returning false from the called function(maybe prevent default aswell?)\n              formController.setSubmitted(false);\n              formController.$setPristine();\n            }\n\n          } else {\n            event.preventDefault();\n          }\n        });\n      });\n    }\n  };\n}]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formSubmit/FormSubmit.js\n **/","import angular from 'angular';\nimport ErrorMessageContainer from './errorMessageContainer/ErrorMessageContainer';\nimport FormCheckbox from './formCheckbox/FormCheckbox';\nimport FormDate from './formDate/FormDate';\nimport FormInput from './formInput/FormInput';\nimport FormRadioButton from './formRadioButton/FormRadioButton';\nimport FormReset from './formReset/FormReset';\nimport FormSelect from './formSelect/FormSelect';\nimport FormSubmit from './formSubmit/FormSubmit';\n\n  // We need the utility module for the ngFormLibDateUtil.getDate() method for the formDateFormat directive, and ngFormLibStringUtil.trim() in controls.common\nconst mod = angular.module('ngFormLib.controls', [\n  ErrorMessageContainer,\n  FormCheckbox,\n  FormDate,\n  FormInput,\n  FormRadioButton,\n  FormReset,\n  FormSelect,\n  FormSubmit\n]);\n\nexport default mod.name;\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/index.js\n **/","import angular from 'angular';\nimport FormControlService from '../common/FormControlService';\n\nconst mod = angular.module('ngFormLib.controls.requiredMarker', [FormControlService]);\n\nexport default mod.name;\n\n\n// Add a simple \"required\" marker that is not read-out by screen readers (as the field should also have a required indicator)\n//\n// INPUT:\n//  <span required-marker></span>\n//  <span required-marker hide=\"isNotRequired\">Some Text</span>\n\n// OUTPUT:\n//  <span class=\"required\" aria-hidden=\"true\" ng-class=\"{\\'ng-hide\\': hide}\" ng-transclude=\"\"></span>\n//  <span class=\"required\" aria-hidden=\"true\" ng-class=\"{\\'ng-hide\\': hide}\" ng-transclude=\"\" hide=\"isNotRequired\">Some Text</span>\n\nmod.directive('requiredMarker', ['formControlService', function(formControlService) {\n\n  return {\n    restrict: 'AE',\n    replace: true,\n    transclude: true,\n    templateUrl: function(element, attr) {\n      return attr.template || formControlService.getHTMLTemplate(element, 'requiredMarker');\n    },\n    scope: {\n      hide: '='\n    }\n  };\n}]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/requiredMarker/RequiredMarker.js\n **/","import angular from 'angular';\nimport angularAnimate from 'angular-animate';\nimport FormPolicy from './policy/FormPolicy';\nimport FormControls from './controls';\n\nconst mod = angular.module('ngFormLib', [angularAnimate,\n  FormPolicy,\n//    Add the policies you want, or define your own:\n//    'ngFormLib.policy.checkForStateChanges',\n//    'ngFormLib.policy.displayError',\n//    'ngFormLib.policy.focusBehaviour',\n  FormControls\n]);\n\nexport default mod.name;\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/index.js\n **/","import angular from 'angular';\n\n// The form policy intentionally has no hard dependencies.\n// If there are form-policy values that exist when the service is being constructed, it will use them.\n// Otherwise it will use no-op policy functions.\nconst mod = angular.module('ngFormLib.policy', []);\n\nexport default mod.name;\n\n\n// This is a configurable service\n// It should contain the _default_ values for form policies\n\nmod.provider('formPolicyService', function() {\n  var self = this,\n    noop = angular.noop,\n    nullBehaviourOnStateChange = function() {\n      return {\n        applyBehaviour: noop,\n        resetBehaviour: noop\n      };\n    },\n    nullStateChanges = function() {\n      return {};\n    };\n\n  self.defaults = {\n    formSubmitAttemptedClass: 'form-submit-attempted',\n    fieldErrorClass: 'has-error',\n    fieldSuccessClass: 'has-success',\n    behaviourOnStateChange: null,    // Previously called focusBehavior\n    checkForStateChanges: null,\n    stateDefinitions: null,\n    fieldFocusScrollOffset: 0\n  };\n\n  this.$get = ['$injector', function($injector) {\n\n    function getService(name) {\n      try {\n        return $injector.get(name);\n      } catch (e) {\n        return null;    // Provider-not-found error, ignore and move on\n      }\n    }\n\n    // Policy precedence: this.defaults, policy-value-object, noop\n    self.defaults.behaviourOnStateChange = self.defaults.behaviourOnStateChange || getService('formPolicyBehaviourOnStateChange') || nullBehaviourOnStateChange;\n    self.defaults.checkForStateChanges = self.defaults.checkForStateChanges || getService('formPolicyCheckForStateChanges') || noop;\n    self.defaults.stateDefinitions = self.defaults.stateDefinitions || getService('formPolicyStateDefinitions') || nullStateChanges;\n\n    var policyService = {\n      getCurrentPolicy: function() {\n        return angular.copy(self.defaults);\n      }\n    };\n\n    return policyService;\n  }];\n});\n\n\nfunction formDirective(formPolicyService) {\n\n  return {\n    //priority: -1,\n    restrict: 'AE',\n    require: ['?form'], // Tells the directive to get the controller for the 'form' directive, which is the FormController controller\n    compile: function(tElement, tAttr) {\n\n      // Use element.data() to store a reference to this element for use by child.inheritedData()\n      // Will storing an element this way cause a memory leak? Or should I just store the data I currently need (attr.class)\n      // This has to happen during the compile step, as the children need access to the variable when they are compiled\n      //  ('class' is a reserved word to JavaScript, so we need to treat it as a string)\n      tElement.data('formElementClasses', tAttr['class']);  //jscs:ignore\n\n      return {\n        pre: function(scope, element, attr, controller) {\n          // We want to extend the FormController by adding a form policy\n          var formController = controller[0];\n          formController._policy = angular.extend(formPolicyService.getCurrentPolicy(), scope.$eval(attr.formPolicy));\n\n          // Add a reference to the <form> element's scope to the formController, to support showing errors for nested components\n          formController._scope = scope;\n\n          // Determine if we have a parent form controller. If we do, we want to use it for the focus behaviour\n          formController._parentController = element.parent().controller('form');\n\n          if (!formController._parentController) {\n            // We also want to add an element reference when a control is added\n            formController._controls = {};\n          }\n\n          // Generate the focus policy function for use by other directive\n          formController._applyFormBehaviourOnStateChangePolicy = formController._policy.behaviourOnStateChange(formController);\n\n          // Add/remove a class onto the form based on the value of the formSubmitted variable\n          formController.setSubmitted = function(value, tellNoOne) {\n            element[value ? 'addClass' : 'removeClass'](formController._policy.formSubmitAttemptedClass);\n            formController._formSubmitAttempted = value;\n            formController._applyFormBehaviourOnStateChangePolicy.resetBehaviour();\n\n            if (value && !tellNoOne) {\n              scope.$broadcast('event:FormSubmitAttempted');\n            }\n          };\n\n          // Flag to indicate whether the form has been submitted\n          formController._formSubmitAttempted = false;\n          formController._applyFormBehaviourOnStateChangePolicy.resetBehaviour();\n\n          // If this form is an ngForm (in that it has a parent 'form'), then we need to make sure that\n          // when the parent form is submitted or reset, the same thing happens to the child forms\n          if (formController._parentController) {\n            scope.$watch(function() { return formController._parentController._formSubmitAttempted; }, function(value) {\n              if (value !== undefined) {\n                //formController.setSubmitted(!!value, true);  // Don't send another notification, just update our own state\n                formController.setSubmitted(!!value);  // Don't send another notification, just update our own state\n              }\n            });\n          }\n        }\n      };\n    }\n  };\n}\nmod.directive('form', ['formPolicyService', formDirective]);\nmod.directive('ngForm', ['formPolicyService', formDirective]);\n\n\n// We want our formController to expose the list of controls that are registered with the form,\n// including controls inside sub-forms. That allows us to reset them directly. Relying simply on the fieldName\n// does not work when using sub-forms inside ng-repeaters.\n\nvar inputElements = ['input', 'select'];\n\nangular.forEach(inputElements, function(inputElem) {\n  mod.directive(inputElem, function() {\n\n    function hookupElementToNameToElementMap(formController, element, fieldName, fieldController) {\n      // Each element in the map is an array, because form elements *can have the same name*!\n      var map = formController._controls;\n      if (!map[fieldName]) {\n        map[fieldName] = [];\n      }\n      // Add the field to the end of the list of items with the same name\n      map[fieldName][map[fieldName].length] = {'element': element, 'controller': fieldController};\n\n\n      element.on('$destroy', function() {\n        // Delete just this element from the map of controls\n        var map = formController._controls[element.attr('name')];\n        var elementId = element.attr('id');\n        for (var i = 0; i < map.length; i++) {\n          if (map[i].element.attr('id') === elementId) {\n            map.splice(i, 1);\n            break;\n          }\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      require: ['?^form', '?ngModel'],\n      link: {\n        pre: function(scope, element, attr, controllers) {\n          if (!controllers[0]) {\n            return;\n          }\n\n          var rootFormController = controllers[0]._parentController || controllers[0],\n              fieldController = controllers[1],\n              name = attr.name;\n\n          if (rootFormController && rootFormController._controls) {\n            hookupElementToNameToElementMap(rootFormController, element, name, fieldController);\n          }\n        }\n      }\n    };\n  });\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/policy/FormPolicy.js\n **/","module.exports = __webpack_public_path__ + \"/template/FormCheckboxTemplate.tpl.html\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/file-loader?name=/template/[name].[ext]!./modules/ngFormLib/controls/formCheckbox/template/FormCheckboxTemplate.tpl.html\n ** module id = 20\n ** module chunks = 1 2\n **/","module.exports = __webpack_public_path__ + \"/template/FormDateInputTemplate.tpl.html\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/file-loader?name=/template/[name].[ext]!./modules/ngFormLib/controls/formDate/template/FormDateInputTemplate.tpl.html\n ** module id = 21\n ** module chunks = 1 2\n **/","module.exports = __webpack_public_path__ + \"/template/FormInputTemplate.tpl.html\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/file-loader?name=/template/[name].[ext]!./modules/ngFormLib/controls/formInput/template/FormInputTemplate.tpl.html\n ** module id = 22\n ** module chunks = 1 2\n **/","module.exports = __webpack_public_path__ + \"/template/FormRadioButtonTemplate.tpl.html\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/file-loader?name=/template/[name].[ext]!./modules/ngFormLib/controls/formRadioButton/template/FormRadioButtonTemplate.tpl.html\n ** module id = 23\n ** module chunks = 1 2\n **/","module.exports = __webpack_public_path__ + \"/template/FormSelectTemplate.tpl.html\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/file-loader?name=/template/[name].[ext]!./modules/ngFormLib/controls/formSelect/template/FormSelectTemplate.tpl.html\n ** module id = 24\n ** module chunks = 1 2\n **/","module.exports = __webpack_public_path__ + \"/template/RequiredMarkerTemplate.tpl.html\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/file-loader?name=/template/[name].[ext]!./modules/ngFormLib/controls/requiredMarker/template/RequiredMarkerTemplate.tpl.html\n ** module id = 25\n ** module chunks = 1 2\n **/","/**\n * angular-strap\n * @version v2.1.6 - 2015-01-11\n * @link http://mgcrea.github.io/angular-strap\n * @author Olivier Louvignes (olivier@mg-crea.com)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n(function(window, document, undefined) {\n'use strict';\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n// Source: affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function() {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto'\n    };\n\n    this.$get = [\"$window\", \"debounce\", \"dimensions\", function($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom',\n            setWidth = false,\n            initialAffixTop = 0,\n            initialOffsetTop = 0,\n            offsetTop = 0,\n            offsetBottom = 0,\n            affixed = null,\n            unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          }\n          else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function() {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function() {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function() {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function() {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if(affixed === affix) return;\n          affixed = affix;\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n          if(affix === 'top') {\n            unpin = null;\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            if(setWidth) {\n              element.css('width', '');\n            }\n            element.css('top', '');\n          } else if(affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            }\n            else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if(setWidth) {\n              element.css('width', '');\n            }\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n          } else { // affix === 'middle'\n            unpin = null;\n            if(setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            element.css('position', 'fixed');\n            element.css('top', initialAffixTop + 'px');\n          }\n\n        };\n\n        $affix.$onResize = function() {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function() {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          element.css('position', (options.offsetParent) ? '' : 'relative');\n\n          if(options.offsetTop) {\n            if(options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if(options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              }\n              else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            }\n            else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if(options.offsetBottom) {\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            }\n            else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          element.css('position', initialPosition);\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(unpin, position, elementHeight) {\n\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if(scrollTop <= offsetTop) {\n            return 'top';\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\n            return 'middle';\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          } else {\n            return 'middle';\n          }\n\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    }];\n\n  })\n\n  .directive('bsAffix', [\"$affix\", \"$window\", function($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, offsetTop: 'auto', target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function() {\n          affix && affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  }])\n\n  .directive('bsAffixTarget', function() {\n    return {\n      controller: [\"$element\", function($element) {\n        this.$element = $element;\n      }]\n    };\n  });\n\n// Source: alert.js\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      template: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = [\"$modal\", \"$timeout\", function($modal, $timeout) {\n\n      function AlertFactory(config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if(options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if(options.duration) {\n          $alert.show = function() {\n            show();\n            $timeout(function() {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    }];\n\n  })\n\n  .directive('bsAlert', [\"$window\", \"$sce\", \"$alert\", function($window, $sce, $alert) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  }]);\n\n// Source: aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      template: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = [\"$modal\", function($modal) {\n\n      function AsideFactory(config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    }];\n\n  })\n\n  .directive('bsAside', [\"$window\", \"$sce\", \"$aside\", function($window, $sce, $aside) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  }]);\n\n// Source: button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', [\"$button\", \"$$rAF\", function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function(modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n             return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  }])\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', [\"$button\", \"$$rAF\", function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value = constantValueRegExp.test(attr.value) ? scope.$eval(attr.value) : attr.value;\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  }]);\n\n// Source: collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = angular.copy(value);\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', [\"$window\", \"$animate\", \"$collapse\", function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  }])\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function() {\n          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', [\"$animate\", function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  }]);\n\n// Source: datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      template: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"$sce\", \"$dateFormatter\", \"datepickerViews\", \"$tooltip\", \"$timeout\", function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if(options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if(!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if(options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if(pristine === true && $picker.built) return;\n          if(pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if(evt.keyCode === 13) {\n            if(!scope.$mode) {\n              return $datepicker.hide(true);\n            } else {\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if(!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if(!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    }];\n\n  })\n\n  .directive('bsDatepicker', [\"$window\", \"$parse\", \"$q\", \"$dateFormatter\", \"$dateParser\", \"$datepicker\", function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!datepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n          if(options.dateType === 'string') {\n            return formatDate(parsedDate, options.modelDateFormat || options.dateFormat);\n          } else if(options.dateType === 'number') {\n            return controller.$dateValue.getTime();\n          } else if(options.dateType === 'unix') {\n            return controller.$dateValue.getTime() / 1000;\n          } else if(options.dateType === 'iso') {\n            return controller.$dateValue.toISOString();\n          } else {\n            return new Date(controller.$dateValue);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if(options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = date;\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  }])\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = [\"$dateFormatter\", \"$dateParser\", \"$sce\", function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n        var timezoneOffset = startDate.getTimezoneOffset() * 6e4;\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getDate() !== viewDate.date) {\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = new Date().toDateString();\n              // Handle daylight time switch\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if(!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    }];\n\n  });\n\n// Source: dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      placement: 'bottom-left',\n      template: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = [\"$window\", \"$rootScope\", \"$tooltip\", \"$timeout\", function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if(!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if(evt.keyCode === 38 && index > 0) index--;\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\n          else if(angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            options.keyboard && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if(!$dropdown.$isShown) return;\n          options.keyboard && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if(evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    }];\n\n  })\n\n  .directive('bsDropdown', [\"$window\", \"$sce\", \"$dropdown\", function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Support scope as an object\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\n          scope.content = newValue;\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!dropdown || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n          newValue === true ? dropdown.show() : dropdown.hide();\n        });\n\n        // Initialize dropdown\n        var dropdown = $dropdown(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (dropdown) dropdown.destroy();\n          options = null;\n          dropdown = null;\n        });\n\n      }\n    };\n\n  }]);\n\n// Source: date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', [\"$locale\", \"dateFilter\", function($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function() {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function(format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function(lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat(format) {\n      return /(h+)([:\\.])?(m+)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[3];\n    };\n\n    this.formatDate = function(date, format, lang){\n      return dateFilter(date, format);\n    };\n\n  }]);\n\n// Source: date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', [\"$localeProvider\", function($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n  ParseDate.prototype.getHours = function() { return this.hours; };\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n  ParseDate.prototype.fromDate = function(value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function() {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length, str=value.toString().toLowerCase();\n    for (var i=0; i<len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = [\"$locale\", \"dateFilter\", function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : proto.setFullYear\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format) {\n        // check for date format special names\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function(key, value) {\n        var date;\n\n        if(value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if(isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function(key, value) {\n        var time;\n\n        if(value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if(isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function(date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      // Private functions\n\n      function setMapForFormat(format) {\n        var keys = Object.keys(setFnMap), i;\n        var map = [], sortedMap = [];\n        // Map to setFn\n        var clonedFormat = format;\n        for(i = 0; i < keys.length; i++) {\n          if(format.split(keys[i]).length > 1) {\n            var index = clonedFormat.search(keys[i]);\n            format = format.split(keys[i]).join('');\n            if(setFnMap[keys[i]]) {\n              map[index] = setFnMap[keys[i]];\n            }\n          }\n        }\n        // Sort result map\n        angular.forEach(map, function(v) {\n          // conditional required since angular.forEach broke around v1.2.21\n          // related pr: https://github.com/angular/angular.js/pull/8525\n          if(v) sortedMap.push(v);\n        });\n        return sortedMap;\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function regExpForFormat(format) {\n        var keys = Object.keys(regExpMap), i;\n\n        var re = format;\n        // Abstract replaces to avoid collisions\n        for(i = 0; i < keys.length; i++) {\n          re = re.split(keys[i]).join('${' + i + '}');\n        }\n        // Replace abstracted values\n        for(i = 0; i < keys.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\n        }\n        format = escapeReservedSymbols(format);\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  }];\n\n}]);\n\n// Source: debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', [\"$timeout\", function($timeout) {\n  return function(func, wait, immediate) {\n    var timeout = null;\n    return function() {\n      var context = this,\n        args = arguments,\n        callNow = immediate && !timeout;\n      if(timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later() {\n        timeout = null;\n        if(!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if(callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n}])\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', [\"$timeout\", function($timeout) {\n  return function(func, wait, options) {\n    var timeout = null;\n    options || (options = {});\n    return function() {\n      var context = this,\n        args = arguments;\n      if(!timeout) {\n        if(options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later() {\n          timeout = null;\n          if(options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n}]);\n\n// Source: dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', [\"$document\", \"$window\", function($document, $window) {\n\n    var jqLite = angular.element;\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function(element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function(element, prop, extra) {\n      var value;\n      if (element.currentStyle) { //IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function(element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function(element) {\n\n      var offsetParentRect = {top: 0, left: 0},\n          offsetParentElement,\n          offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentElement\n        offsetParentElement = offsetParent(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentElement, 'html')) {\n          offsetParentRect = fn.offset(offsetParentElement);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    var offsetParent = function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    };\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function(element, outer) {\n      var value = element.offsetHeight;\n      if(outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function(element, outer) {\n      var value = element.offsetWidth;\n      if(outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  }]);\n\n// Source: parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = [\"$parse\", \"$q\", function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    }];\n\n  });\n\n// Source: raf.js\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\n\n.factory('$$rAF', [\"$window\", \"$timeout\", function($window, $timeout) {\n\n  var requestAnimationFrame = $window.requestAnimationFrame ||\n                              $window.webkitRequestAnimationFrame ||\n                              $window.mozRequestAnimationFrame;\n\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                             $window.webkitCancelAnimationFrame ||\n                             $window.mozCancelAnimationFrame ||\n                             $window.webkitCancelRequestAnimationFrame;\n\n  var rafSupported = !!requestAnimationFrame;\n  var raf = rafSupported ?\n    function(fn) {\n      var id = requestAnimationFrame(fn);\n      return function() {\n        cancelAnimationFrame(id);\n      };\n    } :\n    function(fn) {\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n      return function() {\n        $timeout.cancel(timer);\n      };\n    };\n\n  raf.supported = rafSupported;\n\n  return raf;\n\n}]);\n\n// .factory('$$animateReflow', function($$rAF, $document) {\n\n//   var bodyEl = $document[0].body;\n\n//   return function(fn) {\n//     //the returned function acts as the cancellation function\n//     return $$rAF(function() {\n//       //the line below will force the browser to perform a repaint\n//       //so that all the animated elements within the animation frame\n//       //will be properly updated and drawn on screen. This is\n//       //required to perform multi-class CSS based animations with\n//       //Firefox. DO NOT REMOVE THIS LINE.\n//       var a = bodyEl.offsetWidth + 1;\n//       fn();\n//     });\n//   };\n\n// });\n\n// Source: modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      template: 'modal/modal.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = [\"$window\", \"$rootScope\", \"$compile\", \"$q\", \"$templateCache\", \"$http\", \"$animate\", \"$timeout\", \"$sce\", \"dimensions\", function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var trim = String.prototype.trim;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n\n      function ModalFactory(config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        $modal.$promise = fetchTemplate(options.template);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n        if(!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function(key) {\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $modal.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Support contentTemplate option\n        if(options.contentTemplate) {\n          $modal.$promise = $modal.$promise.then(function(template) {\n            var templateEl = angular.element(template);\n            return fetchTemplate(options.contentTemplate)\n            .then(function(contentTemplate) {\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(contentTemplate);\n              // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n              if(!config.template) contentEl.next().remove();\n              return templateEl[0].outerHTML;\n            });\n          });\n        }\n\n        // Fetch, compile then initialize modal\n        var modalLinker, modalElement;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        $modal.$promise.then(function(template) {\n          if(angular.isObject(template)) template = template.data;\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\n          template = trim.apply(template);\n          modalLinker = $compile(template);\n          $modal.init();\n        });\n\n        $modal.init = function() {\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function() {\n\n          // Remove element\n          if(modalElement) {\n            modalElement.remove();\n            modalElement = null;\n          }\n          if(backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $modal.show = function() {\n          if($modal.$isShown) return;\n\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          var parent, after;\n          if(angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // Fetch a cloned element linked from template\n          modalElement = $modal.$element = modalLinker(scope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: animation\n          if(options.animation) {\n            if(options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if(options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n          // Support v1.3+ $animate\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\n          var promise = $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          if(promise && promise.then) promise.then(enterAnimateCallback);\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function() {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          if(options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n          if(options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function() {\n          if(!$modal.$isShown) return;\n\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          var promise = $animate.leave(modalElement, leaveAnimateCallback);\n          // Support v1.3+ $animate\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\n          if(promise && promise.then) promise.then(leaveAnimateCallback);\n\n          if(options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n          if(options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function() {\n\n          $modal.$isShown ? $modal.hide() : $modal.show();\n\n        };\n\n        $modal.focus = function() {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function(evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        // Private methods\n\n        function hideOnBackdropClick(evt) {\n          if(evt.target !== evt.currentTarget) return;\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\n        }\n\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $q.when($templateCache.get(template) || $http.get(template))\n        .then(function(res) {\n          if(angular.isObject(res)) {\n            $templateCache.put(template, res.data);\n            return res.data;\n          }\n          return res;\n        }));\n      }\n\n      return ModalFactory;\n\n    }];\n\n  })\n\n  .directive('bsModal', [\"$window\", \"$sce\", \"$modal\", function($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  }]);\n\n// Source: navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function() {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', [\"$window\", \"$location\", \"$navbar\", function($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function() {\n\n          return $location.path();\n\n        }, function(newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function(li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if(options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, ['i']);\n\n            if(regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  }]);\n\n// Source: popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      container: false,\n      target: false,\n      placement: 'right',\n      template: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = [\"$tooltip\", function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    }];\n\n  })\n\n  .directive('bsPopover', [\"$window\", \"$sce\", \"$popover\", function($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'customClass', 'autoClose', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  }]);\n\n// Source: select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      template: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"$tooltip\", \"$timeout\", function($window, $document, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        scope.$activeIndex = 0;\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function(index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function(matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function(index) {\n          if(options.multiple) {\n            scope.$activeIndex.sort();\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n            if(options.sort) scope.$activeIndex.sort();\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function(index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function() {\n            $select.activate(index);\n            if(options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function() {\n          if(controller.$modelValue && scope.$matches.length) {\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            }\n          } else if(scope.$activeIndex >= scope.$matches.length) {\n            scope.$activeIndex = options.multiple ? [] : 0;\n          }\n        };\n\n        $select.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function(index) {\n          if(options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          } else {\n            return scope.$activeIndex === index;\n          }\n        };\n\n        $select.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $select.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function(evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Select with enter\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function() {\n          _show();\n          if(options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function() {\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    }];\n\n  })\n\n  .directive('bsSelect', [\"$window\", \"$parse\", \"$q\", \"$select\", \"$parseOptions\", function($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'placeholder', 'multiple', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Add support for select markup\n        if(element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper ngOptions\n        var parsedOptions = $parseOptions(attr.ngOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        // Watch ngOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected, index;\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function(value) {\n              index = select.$getIndex(value);\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : options.placeholder) + defaults.caretHtml);\n        };\n\n        if(options.multiple){\n          controller.$isEmpty = function(value){\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  }]);\n\n// Source: tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // DEPRECATED: $viewChangeListeners, please use $activePaneChangeListeners\n      // Because we deprecated ngModel usage, we rename viewChangeListeners to \n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function(pane) {\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function(pane) {\n        var index = self.$panes.indexOf(pane);\n        var activeIndex = self.$panes.$active;\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to \n          // decrement the active pane index\n          activeIndex--;\n        }\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        self.$setActive(activeIndex);\n      };\n\n      self.$panes.$active = 0;\n      self.$setActive = $scope.$setActive = function(value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n    };\n\n    this.$get = function() {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', [\"$window\", \"$animate\", \"$tab\", \"$parse\", function($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function(element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // DEPRECATED: ngModel, please use bsActivePane\n        // 'ngModel' is deprecated bacause if interferes with form validation\n        // and status, so avoid using it here.\n        if(ngModelCtrl) {\n          console.warn('Usage of ngModel is deprecated, please use bsActivePane instead!');\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue * 1);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue * 1);\n          }, true);\n        }\n      }\n    };\n\n  }])\n\n  .directive('bsPane', [\"$window\", \"$animate\", \"$sce\", function($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function(newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Add animation class\n        if(bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function() {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          var active = bsTabsCtrl.$panes.$active;\n          $animate[index === active ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  }]);\n\n// Source: scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function() {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"dimensions\", \"debounce\", \"throttle\", function($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if(!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if(spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        var viewportHeight;\n        var scrollTop;\n\n        $scrollspy.init = function() {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if(scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function() {\n\n          // Check internal ref counter\n          this.$$count--;\n          if(this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function() {\n\n          // Not ready yet\n          if(!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if(activeTarget === sortedElements[i].target) continue;\n            if(scrollTop < sortedElements[i].offsetTop) continue;\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function() {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function(element) {\n          if(activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if(activeElement) {\n              activeElement.source.removeClass('active');\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function(target) {\n          return trackedElements.filter(function(obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function() {\n\n          angular.forEach(trackedElements, function(trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function(el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function(a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function(target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function(target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function(i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    }];\n\n  })\n\n  .directive('bsScrollspy', [\"$rootScope\", \"debounce\", \"dimensions\", \"$scrollspy\", function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function() {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  }])\n\n\n  .directive('bsScrollspyList', [\"$rootScope\", \"debounce\", \"dimensions\", \"$scrollspy\", function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  }]);\n\n// Source: timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      template: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = [\"$window\", \"$document\", \"$rootScope\", \"$sce\", \"$dateFormatter\", \"$tooltip\", \"$timeout\", function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        // View vars\n\n        var selectedIndex = 0;\n        var startDate = controller.$dateValue || new Date();\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\n            $timepicker.$build();\n          } else if(!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if(!angular.isDate(date)) date = new Date(date);\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if(options.autoclose && !keep) {\n            $timeout(function() { $timepicker.hide(true); });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [], hour;\n          for(i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({date: hour, label: formatDate(hour, hoursFormat), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\n          }\n          var minutes = [], minute;\n          for(i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({date: minute, label: formatDate(minute, minutesFormat), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\n          }\n\n          var rows = [];\n          for(i = 0; i < options.length; i++) {\n            rows.push([hours[i], minutes[i]]);\n          }\n          scope.rows = rows;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if(!$timepicker.$date) return false;\n          else if(index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if(index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if(index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4;\n          } else if(index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value,index);\n          } else {\n            $timepicker.$moveIndex(value,index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          }\n          else {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if(index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute);\n            angular.extend(viewDate, {hour: targetDate.getHours()});\n          } else if(index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep));\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if(evt.keyCode === 13) return $timepicker.hide(true);\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          if(selectedIndex === 0) {\n            if(evt.keyCode === 38) newDate.setHours(hours - parseInt(options.hourStep, 10));\n            else if(evt.keyCode === 40) newDate.setHours(hours + parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if(selectedIndex === 1) {\n            if(evt.keyCode === 38) newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));\n            else if(evt.keyCode === 40) newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + 1, hoursLength + 1 + minutesLength];\n          } else if(selectedIndex === 2) {\n            if(!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + 1 + minutesLength + 1, hoursLength + 1 + minutesLength + 3];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, end) {\n          if(element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if(element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if(angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if(!$timepicker.$isShown) return;\n          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    }];\n\n  })\n\n\n  .directive('bsTimepicker', [\"$window\", \"$parse\", \"$q\", \"$dateFormatter\", \"$dateParser\", \"$timepicker\", function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!timepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({format: options.timeFormat, lang: lang});\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(!isValid) {\n              return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n          if(options.timeType === 'string') {\n            return formatDate(parsedTime, options.modelTimeFormat || options.timeFormat);\n          } else if(options.timeType === 'number') {\n            return controller.$dateValue.getTime();\n          } else if(options.timeType === 'unix') {\n            return controller.$dateValue.getTime() / 1000;\n          } else if(options.timeType === 'iso') {\n            return controller.$dateValue.toISOString();\n          } else {\n            return new Date(controller.$dateValue);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if(options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = date;\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  }]);\n\n// Source: tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      template: 'tooltip/tooltip.tpl.html',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true\n    };\n\n    this.$get = [\"$window\", \"$rootScope\", \"$compile\", \"$q\", \"$templateCache\", \"$http\", \"$animate\", \"$sce\", \"dimensions\", \"$$rAF\", \"$timeout\", function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var nodeName = element[0].nodeName.toLowerCase();\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        $tooltip.$promise = fetchTemplate(options.template);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n        if(options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if(options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function(isEnabled) {\n          scope.$$postDigest(function() {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Support contentTemplate option\n        if(options.contentTemplate) {\n          $tooltip.$promise = $tooltip.$promise.then(function(template) {\n            var templateEl = angular.element(template);\n            return fetchTemplate(options.contentTemplate)\n            .then(function(contentTemplate) {\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]);\n              if(!contentEl.length) contentEl = findElement('[ng-bind=\"title\"]', templateEl[0]);\n              contentEl.removeAttr('ng-bind').html(contentTemplate);\n              return templateEl[0].outerHTML;\n            });\n          });\n        }\n\n        // Fetch, compile then initialize tooltip\n        var tipLinker, tipElement, tipTemplate, tipContainer, tipScope;\n        $tooltip.$promise.then(function(template) {\n          if(angular.isObject(template)) template = template.data;\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\n          template = trim.apply(template);\n          tipTemplate = template;\n          tipLinker = $compile(template);\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent, after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if(tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = tipLinker(tipScope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          // Support v1.3+ $animate\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\n          var promise = $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          if(promise && promise.then) promise.then(enterAnimateCallback);\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          $$rAF(function () {\n            $tooltip.$applyPlacement();\n\n            // Once placed, make the tooltip visible\n            if(tipElement) tipElement.css({visibility: 'visible'});\n          }); // var a = bodyEl.offsetWidth + 1; ?\n\n          // Bind events\n          if(options.keyboard) {\n            if(options.trigger !== 'focus') {\n              $tooltip.focus();\n            }\n            bindKeyboardEvents();\n          }\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.3+ $animate\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\n          var promise = $animate.leave(tipElement, leaveAnimateCallback);\n          if(promise && promise.then) promise.then(leaveAnimateCallback);\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function() {\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function(isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement,\n              autoToken = /\\s?auto?\\s?/i,\n              autoPlace  = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition(),\n              tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var container = options.container ? angular.element(document.querySelector(options.container)) : element.parent();\n            var containerPosition = getPosition(container);\n\n            // Determine if the vertical placement\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > containerPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < containerPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            // Determine the horizontal placement\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\n            // and flow in the opposite direction of their placement.\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\n                elementPosition.right + tipWidth > containerPosition.width) {\n\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\n                elementPosition.left - tipWidth < containerPosition.left) {\n\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacementCss(tipPosition.top, tipPosition.left);\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n\n          var elRect = el.getBoundingClientRect();\n          if (elRect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            elRect = angular.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n          }\n\n          var elPos;\n          if (options.container === 'body') {\n            elPos = dimensions.offset(el);\n          } else {\n            elPos = dimensions.position(el);\n          }\n\n          return angular.extend({}, elRect, elPos);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n            case 'top':\n              offset.top = position.top - actualHeight;\n              break;\n            case 'bottom':\n              offset.top = position.top + position.height;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacementCss(top, left) {\n          tipElement.css({ top: top + 'px', left: left + 'px' });\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if($tooltip.$isShown && tipElement !== null) {\n            if(options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if(options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if(tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $q.when($templateCache.get(template) || $http.get(template))\n        .then(function(res) {\n          if(angular.isObject(res)) {\n            $templateCache.put(template, res.data);\n            return res.data;\n          }\n          return res;\n        }));\n      }\n\n      return TooltipFactory;\n\n    }];\n\n  })\n\n  .directive('bsTooltip', [\"$window\", \"$location\", \"$sce\", \"$tooltip\", \"$$rAF\", function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function(newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          }\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Enabled binding support\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  }]);\n\n// Source: typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      template: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'filter',\n      limit: 6,\n      comparator: ''\n    };\n\n    this.$get = [\"$window\", \"$rootScope\", \"$tooltip\", \"$timeout\", function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function(){\n          scope.$matches = [];\n          scope.$activeIndex = 0;\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if(scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = 0;\n          }\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if(parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden\n          if($typeahead.$isVisible()) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if(evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $typeahead.$onKeyDown);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    }];\n\n  })\n\n  .directive('bsTypeahead', [\"$window\", \"$parse\", \"$q\", \"$typeahead\", \"$parseOptions\", function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'comparator', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Build proper ngOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var ngOptions = attr.ngOptions;\n        if(filter) ngOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) ngOptions += ':' + comparator;\n        if(limit) ngOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(ngOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if(options.watchOptions) {\n          // Watch ngOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watch(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          }, true);\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            // Prevent input with no future prospect if selectMode is truthy\n            // @TODO test selectMode\n            if(options.selectMode && !values.length && newValue.length > 0) {\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n              return;\n            }\n            if(values.length > limit) values = values.slice(0, limit);\n            var isVisible = typeahead.$isVisible();\n            isVisible && typeahead.update(values);\n            // Do not re-queue an update if a correct value has been selected\n            if(values.length === 1 && values[0].value === newValue) return;\n            !isVisible && typeahead.update(values);\n            // Queue a new rendering that will leverage collection loading\n            controller.$render();\n          });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n          return displayValue === undefined ? '' : displayValue;\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          element.val(selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '').trim() : '');\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  }]);\n\n})(window, document);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/angular-strap/dist/angular-strap.js\n ** module id = 29\n ** module chunks = 1\n **/","import angular from 'angular';\n\n// import all of the documentation JS files\n// There should be a nicer way to do this, but this won't change very often...\nimport formControlsCommonDocs from '../ngFormLib/controls/common/docs/formControlsCommon.docs';\nimport formControlsCommonPropertiesDocs from '../ngFormLib/controls/common/docs/formControlsCommonProperties.docs';\nimport formControlsDemosDocs from '../ngFormLib/controls/common/docs/formControlsDemos.docs';\nimport formControlsServiceDocs from '../ngFormLib/controls/common/docs/formControlsService.docs';\nimport formPolicyDocs from '../ngFormLib/policy/docs/formPolicy.docs';\nimport formSubmitDocs from '../ngFormLib/controls/formSubmit/docs/formSubmit.docs';\nimport formResetDocs from '../ngFormLib/controls/formReset/docs/formReset.docs';\nimport formInputDocs from '../ngFormLib/controls/formInput/docs/formInput.docs';\nimport formCheckboxDocs from '../ngFormLib/controls/formCheckbox/docs/formCheckbox.docs';\nimport formRadioButtonDocs from '../ngFormLib/controls/formRadioButton/docs/formRadioButton.docs';\nimport formSelectDocs from '../ngFormLib/controls/formSelect/docs/formSelect.docs';\nimport formDateDocs from '../ngFormLib/controls/formDate/docs/formDate.docs';\nimport errorMessageContainerDocs from '../ngFormLib/controls/errorMessageContainer/docs/errorMessageContainer.docs';\nimport requiredMarkerDocs from '../ngFormLib/controls/requiredMarker/docs/requiredMarker.docs';\n\n\nconst mod = angular.module('ngFormLibDocs.docs.fixtures', [\n  formControlsCommonDocs,\n  formControlsCommonPropertiesDocs,\n  formControlsDemosDocs,\n  formControlsServiceDocs,\n  formPolicyDocs,\n  formResetDocs,\n  formSubmitDocs,\n  formInputDocs,\n  formCheckboxDocs,\n  formRadioButtonDocs,\n  formSelectDocs,\n  formDateDocs,\n  errorMessageContainerDocs,\n  requiredMarkerDocs\n]);\n\nexport default mod.name;\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/docs/docFixtures.js\n **/","import angular from 'angular';\nimport ngFormLib from '../ngFormLib';\nimport 'angular-strap';   // No export, currently\nimport ngTranslate from 'angular-translate';\nimport highlightjs from 'highlightjs/highlight.pack.js';\n\n// Import specific policies for the documentation website\nimport defaultStateChangeBehaviour from '../ngFormLib/policy/behaviourOnStateChange/PolicyBehaviourOnStateChange';\nimport defaultStateChangeChecks from '../ngFormLib/policy/checkForStateChanges/PolicyCheckForStateChanges';\nimport defaultStateDefinitions from '../ngFormLib/policy/stateDefinitions/PolicyStateDefinitions';\n\n// import all of the documentation JS files\nimport docFixtures from './docFixtures';\n\n\nconst mod = angular.module('ngFormLibDocs.docs', [\n  'mgcrea.ngStrap',\n  ngFormLib,\n  defaultStateChangeBehaviour,\n  defaultStateChangeChecks,\n  defaultStateDefinitions,\n  ngTranslate,\n\n  // require ALL of the docs /demo components\n  docFixtures\n]);\n\nexport default mod.name;\n\n\n// Needed to bind to HTML and compile it when it is loaded\nmod.directive('bindCompile', ['$compile', function($compile) {\n  return {\n    restrict: 'A',\n    replace: true,\n    link: function (scope, element, attrs) {\n      scope.$watch(attrs.bindCompile, function(html) {\n        element[0].innerHTML = html;\n        $compile(element.contents())(scope);\n      });\n    }\n  };\n}]);\n\nmod.config(['$locationProvider', function($locationProvider) {\n    // configure html5 to get links working on jsfiddle\n    $locationProvider.html5Mode(false);\n  }])\n  .config(['$anchorScrollProvider', function($anchorScrollProvider) {\n    $anchorScrollProvider.disableAutoScrolling();\n  }])\n  .config(['$translateProvider', function($translateProvider) {\n    let translations = require('json!./assets/language/enAU.json');\n    $translateProvider.translations('en', translations);\n    $translateProvider.preferredLanguage('enAU');\n    $translateProvider.useSanitizeValueStrategy(null);\n  }])\n  // Set the field-error-focus-scroll-position, to allow for the website's fixed header\n  .config(['formPolicyServiceProvider', function(formPolicyServiceProvider) {\n    formPolicyServiceProvider.defaults.fieldFocusScrollOffset = 80;\n  }]);\n\n\nmod.controller('MainController', ['$http', function($http) {\n  var vm = this; // view-model\n\n  // Fetch the documentation config and store it on the rootScope (for laughs :)\n  let fileName = require('file?name=/assets/config/[name].[ext]!./assets/config/docsConfig.json');\n  $http.get(fileName).then(function(result) {\n    vm.DOC_CONFIG = result.data;\n    vm.REPO_HOST = result.data.repository.host;\n    vm.REPO = vm.REPO_HOST + result.data.repository.branch;\n    vm.VERSION = result.data.version;\n  });\n}]);\n\n\nmod.directive('docsComponent', [() => {\n  return {\n    restrict: 'A',    // IE8 support\n    controller: 'MainController',\n    controllerAs: 'mainCtrl',\n    template: require('./templates/docs-component.html')\n  };\n}]);\n\n\nmod.directive('docsNavbar', [() => {\n  require('file?name=/assets/aside.html!./templates/aside.inc');    // If the file is called *.html, it gets wrapped inside a JS module. This gives us just the HTML\n  return {\n    restrict: 'A',    // IE8 support\n    template: require('./templates/navbar.html')\n  };\n}]);\n\nmod.directive('docsHeader', [() => {\n  return {\n    restrict: 'A',    // IE8 support\n    template: require('./templates/header.html')\n  };\n}]);\n\nmod.directive('docsFooter', [() => {\n  return {\n    restrict: 'A',    // IE8 support\n    template: require('./templates/footer.html')\n  };\n}]);\n\nmod.directive('docsAffixedSidenav', [() => {\n  return {\n    restrict: 'A',    // IE8 support\n    template: require('./templates/affixed-sidenav.html')\n  };\n}]);\n\n\nmod.directive('docsSidenav', [() => {\n  return {\n    restrict: 'A',    // IE8 support\n    template: require('./templates/sidenav.html')\n  };\n}]);\n\nmod.directive('docsGettingStarted', [() => {\n  return {\n    restrict: 'A',    // IE8 support\n    template: require('./templates/getting-started.html')\n  };\n}]);\n\n\n// These directives are purely needed for documentation purposes\nmod.directive('code', function() {\n  return {restrict: 'E', terminal: true};\n});\n\n\nmod.directive('appendSource', ['$compile', 'indent', function($compile, indent) {\n  return {\n    compile: function(element, attr) {\n\n      // Directive options\n      var options = {placement: 'after'};\n      angular.forEach(['placement', 'hlClass'], function(key) {\n        if (angular.isDefined(attr[key])) {\n          options[key] = attr[key];\n        }\n      });\n\n      var hlElement = angular.element('<div class=\"highlight\" ng-non-bindable><pre><code class=\"html\" style=\"margin:0\"></code></pre></div>');\n      var codeElement = hlElement.children('pre').children('code');\n      var elementHtml = indent(element.html());\n      codeElement.text(elementHtml);\n      if (options.hlClass) {\n        codeElement.addClass(options.hlClass);\n      }\n      element[options.placement](hlElement);\n      highlightjs.highlightBlock(codeElement[0]);\n    }\n  };\n}]);\n\n\nmod.directive('highlightBlock', ['indent', function(indent) {\n  return {\n    compile: function(element) {\n      element.html(indent(element.html()));\n      return function postLink(scope, element) {\n        highlightjs.highlightBlock(element[0]);\n      };\n    }\n  };\n}]);\n\n\nmod.value('indent', function(text, spaces) {\n\n  if (!text) {\n    return text;\n  }\n  var lines = text.split(/\\r?\\n/);\n  var prefix = '      '.substr(0, spaces || 0);\n  var i;\n\n  // Remove any leading blank lines\n  while (lines.length && lines[0].match(/^\\s*$/)) {\n    lines.shift();\n  }\n  // Remove any trailing blank lines\n  while (lines.length && lines[lines.length - 1].match(/^\\s*$/)) {\n    lines.pop();\n  }\n  // Calculate proper indent\n  var minIndent = 999;\n  for (i = 0; i < lines.length; i++) {\n    var line = lines[0];\n    var indent = line.match(/^\\s*/)[0];\n    if (indent !== line && indent.length < minIndent) {\n      minIndent = indent.length;\n    }\n  }\n\n  for (i = 0; i < lines.length; i++) {\n    lines[i] = prefix + lines[i].substring(minIndent).replace(/=\"\"/g, '');\n  }\n  lines.push('');\n  return lines.join('\\n');\n});\n\n\n// Anchor directive\n// Add anchor-like behaviour to any element, and take advantage of smooth scrolling\nmod.directive('ahref', ['$location', '$document', 'scrollContainerAPI', 'duScrollDuration',\n  function($location, $document, scrollContainerAPI, duScrollDuration) {\n    return {\n      restrict: 'A',\n      link: function(scope, element, attrs) {\n        element.on('click', function() {\n          // The anchor reference should be valid\n          var ahref = attrs.ahref;\n          if (!ahref || ahref.indexOf('#') === -1) {\n            return;\n          }\n          var elemId = ahref.replace(/.*(?=#[^\\s]+$)/, '').substring(1);\n\n          // Only add the scroll to the history if directed to\n          if (attrs.useHash) {\n            $location.hash(elemId);  // Change the URL\n            scope.$apply();\n          }\n          var target = $document[0].getElementById(elemId);\n          if (!target || !target.getBoundingClientRect) {\n            return;\n          }\n\n          var offset = parseInt(attrs.scrollOffset || 0) + (attrs.scrollBottom === 'true' ? -target.offsetHeight : 0);\n          var duration = attrs.duration ? parseInt(attrs.duration, 10) : duScrollDuration;\n          var container = scrollContainerAPI.getContainer(scope);\n          container.scrollToElement(angular.element(target), isNaN(offset) ? 0 : offset, isNaN(duration) ? 0 : duration);\n        });\n      }\n    };\n  }\n]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/docs/docs.js\n **/","import angular from 'angular';\nimport docs from './docs';\n\nconst mod = angular.module('ngFormLibDocs', [docs]);\n\nexport default mod.name;\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/docs/index.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.common.docs.formControlsCommon', []);\n\nexport default mod.name;\n\nmod.directive('formControlsCommonDocs', function() {\n  return {\n    restrict: 'A',\n    template: require('./formControlsCommon.docs.html')\n  }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/common/docs/formControlsCommon.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.common.docs.formControlsCommonProperties', []);\n\nexport default mod.name;\n\nmod.directive('formControlsCommonPropertiesDocs', function() {\n  return {\n    restrict: 'A',\n    template: require('./formControlsCommonProperties.docs.html')\n  }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/common/docs/formControlsCommonProperties.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.common.docs.formControlsDemos', []);\n\nexport default mod.name;\n\nmod.directive('formControlsDemosDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'FormControlsDemosController',\n    template: require('./formControlsDemos.docs.html')\n  }\n});\n\nmod.controller('FormControlsDemosController', function() {\n  var vm = this;\n\n  vm.titleData = [\n    {label: 'Dr'},\n    {label: 'Mr'},\n    {label: 'Ms'}\n  ];\n\n  vm.schoolData = [\n    {label: 'Primary'},\n    {label: 'Secondary'},\n    {label: 'Tertiary'}\n  ];\n\n  vm.formDemo4 = {\n    name: '',\n    education: [\n      {\n        name: 'Melbourne High School',\n        type: vm.schoolData[1]\n      },\n      {\n        name: undefined,\n        type: undefined\n      }\n    ]\n  };\n\n  vm.addSchool = function() {\n    vm.formDemo4.education.push({name: '', type: undefined});\n  };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/common/docs/formControlsDemos.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.common.docs.formControlsService', []);\n\nexport default mod.name;\n\nmod.directive('formControlsServiceDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'FormControlServiceDemoCtrl',\n    template: require('./formControlsService.docs.html')\n  }\n});\n\nmod.controller('FormControlServiceDemoCtrl', function() {\n  // var vm = this;\n  //\n  // vm.titleData = [\n  //   {label: 'Dr'},\n  //   {label: 'Mr'},\n  //   {label: 'Ms'}\n  // ];\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/common/docs/formControlsService.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.errorMessageContainer.docs.errorMessageContainer', []);\n\nexport default mod.name;\n\nmod.directive('errorMessageContainerDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'ErrorMessageContainerDemoController',\n    template: require('./errorMessageContainer.docs.html')\n  }\n});\n\nmod.controller('ErrorMessageContainerDemoController', function() {\n  var vm = this;\n\n  vm.titleData = [\n    {label: 'Dr'},\n    {label: 'Mr'},\n    {label: 'Ms'}\n  ];\n\n  vm.toggleTextError = function() {\n    vm.myTextError = (vm.myTextError) ? '' : 'My text error. ';\n  };\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/errorMessageContainer/docs/errorMessageContainer.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.formCheckbox.docs.formCheckbox', []);\n\nexport default mod.name;\n\nmod.directive('formCheckboxDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'FormCheckboxDemoController',\n    template: require('./formCheckbox.docs.html')\n  }\n});\n\nmod.controller('FormCheckboxDemoController', function() {\n  var vm = this;\n\n  vm.titleData = [\n    {label: 'Dr'},\n    {label: 'Mr'},\n    {label: 'Ms'}\n  ];\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formCheckbox/docs/formCheckbox.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.formDate.docs.formDate', []);\n\nexport default mod.name;\n\nmod.directive('formDateDocs', function() {\n  return {\n    restrict: 'A',\n    template: require('./formDate.docs.html')\n  }\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formDate/docs/formDate.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.formInput.docs.formInput', []);\n\nexport default mod.name;\n\nmod.directive('formInputDocs', function() {\n  return {\n    restrict: 'A',\n    template: require('./formInput.docs.html')\n  }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formInput/docs/formInput.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.formRadioButton.docs.formRadioButton', []);\n\nexport default mod.name;\n\nmod.directive('formRadioButtonDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'FormRadioButtonDemoController',\n    template: require('./formRadioButton.docs.html')\n  }\n});\n\n\nmod.controller('FormRadioButtonDemoController', function() {\n  var vm = this;\n\n  vm.titleData = [\n    {label: 'Amazing Spiderman, The'},\n    {label: 'Batman'},\n    {label: 'Catwoman'}\n  ];\n\n  vm.data = {\n    radioVal2: 2   // Initial value of second radio button\n  };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formRadioButton/docs/formRadioButton.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.formReset.docs.formReset', []);\n\nexport default mod.name;\n\nmod.directive('formResetDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'FormResetDemoController',\n    template: require('./formReset.docs.html')\n  }\n});\n\nmod.controller('FormResetDemoController', function() {\n  var vm = this;\n\n  vm.titleData = [\n    {label: 'Dr'},\n    {label: 'Mr'},\n    {label: 'Ms'}\n  ];\n\n  // Demonstrate the reset directive with non-empty data models\n  vm.data = {\n    name: 'Not-empty-initially',\n    title: vm.titleData[2]\n  };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formReset/docs/formReset.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.formSelect.docs.formSelect', []);\n\nexport default mod.name;\n\nmod.directive('formSelectDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'FormSelectDemoController',\n    template: require('./formSelect.docs.html')\n  }\n});\n\nmod.controller('FormSelectDemoController', function() {\n  var vm = this;\n\n  vm.titleData = [\n    {label: 'Dr'},\n    {label: 'Mr'},\n    {label: 'Ms'}\n  ];\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formSelect/docs/formSelect.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.formSubmit.docs.formSubmit', []);\n\nexport default mod.name;\n\nmod.directive('formSubmitDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'FormSubmitDemoController',\n    template: require('./formSubmit.docs.html')\n  }\n});\n\nmod.controller('FormSubmitDemoController', function() {\n  var vm = this;\n\n  vm.callWhenValid = function() {\n    window.alert('Form is valid');\n  };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/formSubmit/docs/formSubmit.docs.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.controls.requiredMarker.docs.requiredMarker', []);\n\nexport default mod.name;\n\nmod.directive('requiredMarkerDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'RequiredMarkerDemoController',\n    template: require('./requiredMarker.docs.html')\n  }\n});\n\nmod.controller('RequiredMarkerDemoController', function() {\n  var vm = this;\n\n  vm.titleData = [\n    {label: 'Dr'},\n    {label: 'Mr'},\n    {label: 'Ms'}\n  ];\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/controls/requiredMarker/docs/requiredMarker.docs.js\n **/","import angular from 'angular';\nimport 'angular-scroll';\n\n// The form policy intentionally has no hard dependencies.\n// If there are form-policy values that exist when the service is being constructed, it will use them.\n// Otherwise it will use no-op policy functions.\nconst mod = angular.module('ngFormLib.policy.behaviourOnStateChange', ['duScroll']);\n\nexport default mod.name;\n\n\n// Helper functions\nvar timeoutPromise, scrollPromise;\n\nfunction setFocusOnField($document, $timeout, duration, element, offset) {\n  // If no offsetHeight then assume it's invisible and let the next error field take the scroll position\n  if (element[0].offsetHeight) {\n    //console.log('Error focus set to: ' + domElement.id);\n    $timeout.cancel(timeoutPromise);\n    $timeout.cancel(scrollPromise);   // This doesn't seem to make a difference on a Mac - user-generated scrolling does not get cancelled\n    timeoutPromise = $timeout(function() { element[0].focus();}, duration);\n    scrollPromise = $document.scrollToElement(element, offset, duration);  // scrollToElement() comes from the angular-scroll directive // No offset\n    return true;\n  }\n  return false; // Indicate that we did NOT set the focus\n}\n\n\n\n/**\n * Returns a function that can be called when an error is showing FOR THIS FIELD. The function is dynamically created\n *  based on the form policy.\n *\n *  The dynamic function sets the focus if the form policy allows it to\n *  The input parameters are:\n *    - DOMElement of the current form-field control that could get focus\n *    - whether an error is showing on the form-field\n *    - whether the form was just attempted to be submitted\n *\n *  The returned function is stored against the form controller as _applyFormFocusPolicy(...)\n *  _applyFormFocusPolicy() should be called by the field-error-controller directive whenever the field state changes,\n *   and when a form-submit event occurs.\n */\nmod.service('formPolicyBehaviourOnStateChangeLibrary', ['$document', '$timeout', 'duScrollDuration',\n  function($document, $timeout, duScrollDuration) {\n\n    // Policy implementation functions\n    function behaviourOnErrorFocusFirstField(formController) {\n      // We want to pretend that there is a single controller for the form, for the purpose of managing the focus.\n      // Otherwise, the main form sets the focus, then the subform (ng-form) also sets the focus\n      var focusController = formController._parentController || formController;\n\n      return {\n        // This function is called by the fieldErrorController when the fieldState changes and when the form is submitted\n        applyBehaviour: function(fieldElem, fieldState, formSubmitAttempted) {\n          // Set the focus to the field if there is an error showing and a form-submit has been attempted\n          if (fieldState === 'error' && formSubmitAttempted) {\n            // ...and if the focusErrorElement is blank...\n            //if (!focusController._focusErrorElement && setFocusOnField($document, $timeout, duScrollDuration, fieldElem, formController._policy.fieldFocusScrollOffset)) {\n            //  focusController._focusErrorElement = fieldElem;\n            //}\n\n            // Make sure element is the first field with an error based on DOM order\n            var firstElement = $document[0][focusController.$name].querySelectorAll('.ng-invalid')[0];\n            var isFirstElement = firstElement ? (firstElement.id === fieldElem[0].id) : false;\n\n            // ...and if the focusErrorElement is blank...\n            if (!focusController._focusErrorElement && isFirstElement && setFocusOnField($document, $timeout, duScrollDuration, fieldElem, formController._policy.fieldFocusScrollOffset)) {\n              focusController._focusErrorElement = fieldElem;\n            }\n          }\n        },\n        resetBehaviour: function() {\n          focusController._focusErrorElement = null;\n        }\n      };\n    }\n\n    return {\n      onSubmitFocusFirstFieldIfError: behaviourOnErrorFocusFirstField\n    };\n  }\n]);\n\nmod.factory('formPolicyBehaviourOnStateChange', ['formPolicyBehaviourOnStateChangeLibrary', function(formPolicyBehaviourOnStateChangeLibrary) {\n  return formPolicyBehaviourOnStateChangeLibrary.onSubmitFocusFirstFieldIfError;\n}]);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/policy/behaviourOnStateChange/PolicyBehaviourOnStateChange.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLib.policy.checkForStateChanges', []);\n\nexport default mod.name;\n\n\n// Policy implementation functions\nfunction checkForStateChangesOnBlurUntilSubmitThenOnChange(scope, element, name, stateDefinitions, ngModelController) {\n  var errorWatch;\n\n  scope.$on('event:FormSubmitAttempted', function() {\n    (errorWatch || angular.noop)(); // Remove the error watcher, which may-or-may-not be present\n    errorWatch = watchForErrorChanges(scope, stateDefinitions, ngModelController);\n    //console.log('heard formSubmitAttempted');\n  });\n\n\n  // Listen for the form reset event and cancel the submit-watcher\n  scope.$on('event:FormReset', function() {\n    (errorWatch || angular.noop)(); // Remove the error watcher, which may-or-may-not be present\n    //console.log('heard formReset');\n  });\n\n  watchForBlurEvent(scope, element, name, stateDefinitions, ngModelController);\n}\n\n\nfunction checkForStateChangesOnChange(scope, element, name, stateDefinitions, ngModelController) {\n  // Watch the error condition for changes, and flag the field as inErrorShowing when the errorCondition is true\n  watchForErrorChanges(scope, stateDefinitions, ngModelController);\n}\n\nfunction checkForStateChangesOnBlur(scope, element, name, stateDefinitions, ngModelController) {\n  watchForBlurEvent(scope, element, name, stateDefinitions, ngModelController);\n}\n\n\n// Helper methods\nfunction createWatch(scope, ngModelController, stateName, stateCondition) {\n  scope.$watch(stateCondition, function(value) {\n    if (value === true) {\n      ngModelController.fieldState = stateName;       // THIS IS THE KEY FLAG\n      //console.log('A: ' + stateCondition + ' = ' + value);\n    }\n  });\n}\n\nfunction watchForErrorChanges(scope, stateDefinitions, ngModelController) {\n  // Set up a watch for each state definition... expensive?\n  for (var stateName in stateDefinitions) {\n    if (stateDefinitions.hasOwnProperty(stateName)) {\n      createWatch(scope, ngModelController, stateName, stateDefinitions[stateName]);\n    }\n  }\n}\n\nfunction evaluateFieldStates(scope, stateDefinitions, ngModelController) {\n  for (var prop in stateDefinitions) {\n    if (scope.$eval(stateDefinitions[prop]) === true) {\n      ngModelController.fieldState = prop;\n      //console.log('B: ' + stateDefinitions[prop] + ' = ' + prop);\n      break;\n    }\n  }\n}\n\nfunction watchForBlurEvent(scope, element, fieldName, stateDefinitions, ngModelController) {\n  // Determine the initial field state. First state to evaluate to TRUE wins\n  evaluateFieldStates(scope, stateDefinitions, ngModelController);\n\n  element.bind('blur', function ngShowWatchAction() {\n    evaluateFieldStates(scope, stateDefinitions, ngModelController);\n    scope.$apply(); // We are in a jQueryLite handler and have changed a scope property - fire the watchers!\n  });\n}\n\n// Define the different display trigger implementations available\nmod.constant('formPolicyCheckForStateChangesLibrary', (function() {\n  return {\n    onChange: checkForStateChangesOnChange,\n    onBlur: checkForStateChangesOnBlur,\n    onBlurUntilSubmitThenOnChange: checkForStateChangesOnBlurUntilSubmitThenOnChange\n  };\n})());\n\n  // This 'service' is the default implementation of the check-for-errors policy\nmod.factory('formPolicyCheckForStateChanges', ['formPolicyCheckForStateChangesLibrary', function(formPolicyCheckForStateChangesLibrary) {\n  return formPolicyCheckForStateChangesLibrary.onBlurUntilSubmitThenOnChange;\n}]);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/policy/checkForStateChanges/PolicyCheckForStateChanges.js\n **/","import angular from 'angular';\n\nconst mod = angular.module('ngFormLibDocs.policy.docs.formPolicy', []);\n\nexport default mod.name;\n\nmod.directive('formPolicyDocs', function() {\n  return {\n    restrict: 'A',\n    controller: 'FormPolicyDemoCtrl',\n    template: require('./formPolicy.docs.html')\n  }\n});\n\n\nmod.controller('FormPolicyDemoCtrl', ['formPolicyCheckForStateChangesLibrary', function(formPolicyCheckForStateChangesLibrary) {\n  var vm = this;\n\n  vm.titleData = [\n    {label: 'Dr'},\n    {label: 'Mr'},\n    {label: 'Ms'}\n  ];\n\n  vm.myCustomPolicy = {\n    checkForStateChanges: formPolicyCheckForStateChangesLibrary.onChange\n  };\n\n}]);\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/policy/docs/formPolicy.docs.js\n **/","import angular from 'angular';\n\n// Define the different display trigger implementations available\nconst mod = angular.module('ngFormLib.policy.stateDefinitions', []);\n\nexport default mod.name\n\n// Error Conditions\nfunction errorOnSubmit(formName, fieldName) {\n  return formName + '._formSubmitAttempted && ' + fieldName + '.$invalid';\n}\n\nfunction errorOnDirty(formName, fieldName) {\n  return fieldName + '.$dirty && ' + fieldName + '.$invalid';\n}\n\nfunction errorImmediately(formName, fieldName) {\n  return fieldName + '.$invalid';\n}\n\nfunction errorOnSubmitAndDirty(formName, fieldName) {\n  return formName + '._formSubmitAttempted && ' + fieldName + '.$dirty && ' + fieldName + '.$invalid';\n}\n\nfunction errorOnSubmitOrDirty(formName, fieldName) {\n  return '(' + formName + '._formSubmitAttempted || ' + fieldName + '.$dirty) && ' + fieldName + '.$invalid';\n}\n\nmod.value('formPolicyErrorDefinitionLibrary', (function() {\n  return {\n    onSubmit: errorOnSubmit,\n    onDirty: errorOnDirty,\n    immediately: errorImmediately,\n    onSubmitAndDirty: errorOnSubmitAndDirty,\n    onSubmitOrDirty: errorOnSubmitOrDirty\n  };\n})());\n\n\n// Success Definitions\nfunction successOnSubmit(formName, fieldName) {\n  return formName + '._formSubmitAttempted && ' + fieldName + '.$valid';\n}\n\nfunction successOnDirty(formName, fieldName) {\n  return fieldName + '.$dirty && ' + fieldName + '.$valid';\n}\n\nfunction successImmediately(formName, fieldName) {\n  return fieldName + '.$valid';\n}\n\nfunction successOnSubmitAndDirty(formName, fieldName) {\n  return formName + '._formSubmitAttempted && ' + fieldName + '.$dirty && ' + fieldName + '.$valid';\n}\n\nfunction successOnSubmitOrDirty(formName, fieldName) {\n  return '(' + formName + '._formSubmitAttempted || ' + fieldName + '.$dirty) && ' + fieldName + '.$valid';\n}\n\nmod.value('formPolicySuccessDefinitionLibrary', (function() {\n  return {\n    onSubmit: successOnSubmit,\n    onDirty: successOnDirty,\n    immediately: successImmediately,\n    onSubmitAndDirty: successOnSubmitAndDirty,\n    onSubmitOrDirty: successOnSubmitOrDirty\n  };\n})());\n\n// This 'service' is the default implementation of the check-for-errors policy\nmod.factory('formPolicyStateDefinitions', ['formPolicyErrorDefinitionLibrary', 'formPolicySuccessDefinitionLibrary',\n  function(formPolicyErrorDefinitionLibrary, formPolicySuccessDefinitionLibrary) {\n\n    // The FieldErrorController will ask for the stateDefinitions, passing the formName and fieldName as parameters\n    return function(formName, fieldName) {\n      // Return an object with the stateName(key) and the stateDefinition string(value)\n      return {\n        'error': formPolicyErrorDefinitionLibrary.onSubmitOrDirty(formName, fieldName),\n        'success': formPolicySuccessDefinitionLibrary.onSubmitOrDirty(formName, fieldName)\n      };\n    };\n  }\n]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./modules/ngFormLib/policy/stateDefinitions/PolicyStateDefinitions.js\n **/","module.exports = __webpack_public_path__ + \"/assets/aside.html\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/file-loader?name=/assets/aside.html!./modules/docs/templates/aside.inc\n ** module id = 55\n ** module chunks = 1\n **/","module.exports = __webpack_public_path__ + \"/assets/config/docsConfig.json\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/file-loader?name=/assets/config/[name].[ext]!./modules/docs/assets/config/docsConfig.json\n ** module id = 56\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-sidebar hidden-print\\\" role=\\\"complementary\\\" data-offset-top=\\\"-100\\\" bs-affix bs-scrollspy-list docs-sidenav></div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/docs/templates/affixed-sidenav.html\n ** module id = 57\n ** module chunks = 1\n **/","module.exports = \"<div docs-navbar></div>\\n<div docs-header></div>\\n\\n<div role=\\\"content\\\">\\n  <div class=\\\"container\\\">\\n    <main role=\\\"main\\\" class=\\\"main\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-2 hidden-sm hidden-xs\\\">\\n          <div docs-affixed-sidenav></div>\\n        </div>\\n        <div class=\\\"col-md-10\\\">\\n          <div docs-getting-started></div>\\n          <div id=\\\"directives\\\">\\n            <div ng-repeat=\\\"menuContent in mainCtrl.DOC_CONFIG.sitemap\\\" bind-compile=\\\"menuContent.template\\\"></div>\\n          </div>\\n        </div>\\n      </div>\\n    </main>\\n  </div>\\n</div>\\n\\n<div docs-footer></div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/docs/templates/docs-component.html\n ** module id = 58\n ** module chunks = 1\n **/","module.exports = \"<footer class=\\\"bs-footer\\\">\\n  <div class=\\\"container\\\">\\n    <p class=\\\"pull-right\\\"><a href=\\\"#\\\">Back to top</a></p>\\n    <hr/>\\n    <p>Documentation based upon <a href=\\\"http://http://mgcrea.github.io/angular-strap\\\" target=\\\"_blank\\\">AngularStrap</a> created by <a href=\\\"//plus.google.com/+OlivierLouvignes/posts?rel=author\\\" target=\\\"_blank\\\">Olivier Louvignes</a>.</p>\\n    <p>Using <a href=\\\"http://twitter.github.com/bootstrap\\\" target=\\\"_blank\\\">Twitter Bootstrap</a> and the <a href=\\\"css/docs.css\\\" target=\\\"_blank\\\">Bootstrap's docs styles</a> designed and built by <a href=\\\"http://twitter.com/mdo\\\" target=\\\"_blank\\\">@mdo</a> and <a href=\\\"http://twitter.com/fat\\\" target=\\\"_blank\\\">@fat</a>.</p>\\n    <p>Code licensed under <a href=\\\"{{mainCtrl.REPO}}LICENSE.md\\\" target=\\\"_blank\\\">The MIT License</a>, documentation under <a href=\\\"http://creativecommons.org/licenses/by/3.0/\\\">CC BY 3.0</a>.</p>\\n    <ul class=\\\"footer-links\\\">\\n      <li><a href=\\\"{{mainCtrl.REPO_HOST}}issues?state=open\\\">Issues</a>\\n      </li>\\n      <li class=\\\"muted\\\">·</li>\\n      <li><a href=\\\"{{mainCtrl.REPO_HOST}}/wiki\\\">Roadmap and changelog</a>\\n      </li>\\n      \\n        \\n      \\n    </ul>\\n  </div>\\n</footer>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/docs/templates/footer.html\n ** module id = 59\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"gettingStarted\\\">Getting started <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}readme.md\\\" target=\\\"_blank\\\">readme.md</a>\\n    </h1>\\n    <code>ngFormLib</code>\\n  </div>\\n\\n  <div class=\\\"callout callout-info\\\">\\n    <h4 id=\\\"project-history\\\">About the project</h4>\\n    <p>Angular Form Library is a set of Angular components that allow you to configure how form validation works across your entire site,\\n      plus a set of accessibility-aware input controls that are easy to integrate into your AngularJS 1.2+ application.</p>\\n    <p>Designed with Bootstrap CSS styles and markup in mind, Angular Form Library can be easily customised to work with your existing\\n      CSS and form markup.</p>\\n  </div>\\n\\n  <h2 id=\\\"project-quickstart\\\">Quick Start</h2>\\n  <p>Install and manage Angular Form Library with <a href=\\\"http://bower.io\\\">Bower</a>.\\n    \\n    \\n  </p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"bash\\\" highlight-block>\\n        $ npm install angular-form-lib --save\\n      </code>\\n    </pre>\\n  </div>\\n\\n  <p>Load the required JavaScript libraries (Bootstrap's JavaScript files are not needed).</p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"html\\\" highlight-block>\\n        &lt;script src=\\\"//ajax.googleapis.com/ajax/libs/angularjs/1.3.9/angular.min.js\\\"&gt;&lt;/script&gt;\\n      </code>\\n    </pre>\\n  </div>\\n  <p>Inject the <code>ngFormLib</code>module into your application.</p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"javascript\\\" highlight-block>\\n        angular.module('myApp', ['ngFormLib']);\\n      </code>\\n    </pre>\\n  </div>\\n\\n  <p>Typically you would load both the module and the default policies into your application:</p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"javascript\\\" highlight-block>\\n        angular.module('myApp', [\\n          'ngFormLib',\\n          'duScroll',   // Scrolling behaviour for when the state changes to an error and we wish to focus the field\\n          'ngFormLib.policy.behaviourOnStateChange',\\n          'ngFormLib.policy.checkForStateChanges',\\n          'ngFormLib.policy.stateDefinitions'\\n        ]);\\n      </code>\\n    </pre>\\n  </div>\\n\\n  \\n    \\n    \\n    \\n      \\n      \\n    \\n    \\n  \\n\\n  <div class=\\\"callout callout-info\\\">\\n    <h4>Custom builds</h4>\\n    <p>Angular Form Library provides independently built modules that can be loaded separately:</p>\\n    <div class=\\\"highlight\\\">\\n      <pre>\\n        <code class=\\\"javascript\\\" highlight-block>\\n          angular.module('myApp', [ 'ngFormLib.policy', 'ngFormLib.controls.formInput']);\\n        </code>\\n      </pre>\\n    </div>\\n  </div>\\n\\n  <h2 id=\\\"project-contribute\\\">Contribute</h2>\\n  <p>Build and work on Angular Form Library with <a href=\\\"http://gruntjs.com\\\">Grunt</a>.</p>\\n  <div class=\\\"highlight\\\">\\n    <pre>\\n      <code class=\\\"bash\\\" highlight-block>\\n        // Serve and watch docs, ideal to develop\\n        $ grunt dev\\n        // Continuous integration\\n        $ grunt test\\n        // Build Angular Form Library\\n        $ grunt build\\n      </code>\\n    </pre>\\n  </div>\\n\\n\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/docs/templates/getting-started.html\n ** module id = 60\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-header\\\" id=\\\"content\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"col-md-9\\\">\\n      <h1>Angular Form Library</h1>\\n      <p>AngularJS 1.2+ directives for controlling form behaviour using policies with accessible form controls.</p>\\n    </div>\\n    <div class=\\\"bs-docs-social col-md-3\\\">\\n      <ul>\\n        <li class=\\\"github-btn\\\">\\n          <iframe src=\\\"//ghbtns.com/github-btn.html?user=odecee&repo=angular-form-lib&type=watch&count=true\\\" allowtransparency=\\\"true\\\" frameborder=\\\"0\\\" scrolling=\\\"0\\\" width=\\\"100\\\" height=\\\"20\\\"></iframe>\\n        </li>\\n        <li class=\\\"github-btn\\\">\\n          <iframe src=\\\"//ghbtns.com/github-btn.html?user=odecee&repo=angular-form-lib&type=fork&count=true\\\" allowtransparency=\\\"true\\\" frameborder=\\\"0\\\" scrolling=\\\"0\\\" width=\\\"100\\\" height=\\\"20\\\"></iframe>\\n        </li>\\n        <li class=\\\"github-btn\\\">\\n          <iframe src=\\\"//ghbtns.com/github-btn.html?user=odecee&type=follow&count=true\\\" allowtransparency=\\\"true\\\" frameborder=\\\"0\\\" scrolling=\\\"0\\\" width=\\\"160\\\" height=\\\"20\\\"></iframe>\\n        </li>\\n        <li class=\\\"twitter-btn\\\">\\n          <a href=\\\"//twitter.com/share\\\" class=\\\"twitter-share-button\\\" data-url=\\\"http://odecee.github.io/angular-form-lib\\\" data-text=\\\"Angular Form Library - AngularJS 1.2+ directives for controlling form behaviour using policies with accessible form controls.\\\" data-related=\\\"u_glow\\\"></a>\\n        </li>\\n        <li>\\n          <div class=\\\"g-plusone\\\" data-size=\\\"medium\\\" data-href=\\\"http://odecee.github.io/angular-form-lib\\\"></div>\\n        </li>\\n      </ul>\\n    </div>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/docs/templates/header.html\n ** module id = 61\n ** module chunks = 1\n **/","module.exports = \"<header class=\\\"navbar navbar-inverse navbar-fixed-top bs-docs-nav\\\" role=\\\"banner\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <button class=\\\"navbar-toggle\\\" type=\\\"button\\\" data-template=\\\"assets/aside.html\\\" data-animation=\\\"am-fade-and-slide-left\\\" data-placement=\\\"left\\\" title=\\\"Menu\\\" data-container=\\\"body\\\" bs-aside>\\n        <span class=\\\"sr-only\\\">Toggle navigation</span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n      </button>\\n      <a href=\\\"./\\\" class=\\\"navbar-brand\\\">Angular Form Library</a>\\n    </div>\\n    <nav class=\\\"collapse navbar-collapse bs-navbar-collapse\\\" role=\\\"navigation\\\">\\n      <ul class=\\\"nav navbar-nav\\\">\\n        <li>\\n          <a ahref=\\\"#gettingStarted\\\" use-hash=\\\"true\\\" scroll-offset=\\\"50\\\">Top</a>\\n        </li>\\n        \\n        \\n      </ul>\\n      <ul class=\\\"nav navbar-nav navbar-right\\\">\\n        \\n        <li>\\n          <a class=\\\"github-badge\\\" href=\\\"//travis-ci.org/odecee/angular-form-lib\\\" target=\\\"_blank\\\">\\n            \\n          </a>\\n        </li>\\n        <li>\\n          <a class=\\\"github-badge\\\" href=\\\"//codeclimate.com/github/odecee/angular-form-lib\\\" target=\\\"_blank\\\">\\n            \\n          </a>\\n        </li>\\n        <li>\\n          <a href=\\\"{{mainCtrl.REPO_HOST}}\\\" target=\\\"_blank\\\">\\n            <i class=\\\"fa fa-github\\\"></i>&nbsp;GitHub\\n          </a>\\n        </li>\\n        \\n        <li>\\n          <a href=\\\"/{{mainCtrl.REPO_HOST}}releases\\\" target=\\\"_blank\\\">\\n            <i class=\\\"fa fa-download\\\"></i>&nbsp;v<span ng-bind=\\\"mainCtrl.VERSION\\\"></span>\\n          </a>\\n        </li>\\n      </ul>\\n    </nav>\\n  </div>\\n</header>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/docs/templates/navbar.html\n ** module id = 62\n ** module chunks = 1\n **/","module.exports = \"<ul class=\\\"nav bs-sidenav\\\">\\n  <li bs-scrollspy data-target=\\\"#gettingStarted\\\">\\n    <a ahref=\\\"#gettingStarted\\\" use-hash=\\\"true\\\" scroll-offset=\\\"50\\\">Getting started</a>\\n  </li>\\n\\n  <hr style=\\\"margin:2px 0\\\">\\n\\n  <li ng-repeat=\\\"menuItem in mainCtrl.DOC_CONFIG.sitemap\\\" bs-scrollspy data-target=\\\"{{menuItem.href}}\\\" data-offset=\\\"50\\\">\\n    <a ahref=\\\"{{menuItem.href}}\\\" use-hash=\\\"true\\\" scroll-offset=\\\"50\\\">{{menuItem.title}}</a>\\n    <ul class=\\\"nav\\\">\\n      <li ng-repeat=\\\"subMenuItem in menuItem.subSection\\\" bs-scrollspy data-target=\\\"{{subMenuItem.href}}\\\" data-offset=\\\"50\\\"><a ahref=\\\"{{subMenuItem.href}}\\\" use-hash=\\\"true\\\" scroll-offset=\\\"50\\\">{{subMenuItem.title}}</a></li>\\n    </ul>\\n    <hr ng-if=\\\"menuItem.separateAfter\\\" style=\\\"margin:2px 0\\\">\\n  </li>\\n</ul>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/docs/templates/sidenav.html\n ** module id = 63\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formControls\\\">Form Controls <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/common/\\\" target=\\\"_blank\\\">Form Controls Common</a>\\n    </h1>\\n    <code>ngFormLib.controls.common</code>\\n  </div>\\n\\n  <p>The Form Controls Common module provides common functions used by the form controls, and allows default values for the form controls to be changed from a central place.</p>\\n\\n  <h2 id=\\\"formControlsCommonOptions\\\">Common Control Options</h2>\\n\\n  <p>The following options are available for <code>form-checkbox</code>, <code>form-input</code>, <code>form-radio-button</code> and <code>form-select</code>:</p>\\n\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/common/docs/formControlsCommon.docs.html\n ** module id = 64\n ** module chunks = 1\n **/","module.exports = \"<tr>\\n  <td>uid</td>\\n  <td>string</td>\\n  <td>generated</td>\\n  <td>The control's unique identifier, which is used in the <code>id=\\\"...\\\"</code> attribute on the control and to link the label to the form field element.\\n    When the form field is inside a repeater, use variable as in <code>uid=\\\"...{{$index}}\\\"</code>, so that the control\\n    has a page-unique id, which is required to make the control fully accessible.\\n    <strong>If the <code>uid</code> is not specified, one will be generated by the formControlService.</strong>\\n  </td>\\n</tr>\\n<tr>\\n  <td>name</td>\\n  <td>string</td>\\n  <td>generated</td>\\n  <td>The name of the element, which is used to make form-validation work correctly.\\n    Only use an {{interpolationExpression}} inside this attribute when using <code>form-radio</code> buttons inside\\n    <code>ng-form</code> inside <code>ng-repeat</code> (<a ahref=\\\"formDemo4\\\">see example</a>).\\n    <strong>If the <code>uid</code> is not specified, one will be generated by the formControlService.</strong>\\n    <p><strong class=\\\"text-danger\\\"><code>form-radio</code> controls that are inside a radio-button-group MUST specify this attribute explicitly for the grouping-behaviour to work!</strong></p>\\n  </td>\\n</tr>\\n\\n<tr>\\n  <td>required</td>\\n  <td>expression</td>\\n  <td>false</td>\\n  <td>An expression that determines the value of <code>ng-required</code>, <code>aria-required</code> and the required indicator on the <code>&lt;label&gt;</code></td>\\n</tr>\\n<tr>\\n  <td>hide-required-indicator</td>\\n  <td>expression</td>\\n  <td>false</td>\\n  <td>An expression that determines whether to show or hide the required indicator</td>\\n</tr>\\n<tr>\\n  <td>label-class</td>\\n  <td>CSS class list</td>\\n  <td></td>\\n  <td>Optional list of CSS classes to apply to the <code>label</code> element</td>\\n</tr>\\n<tr>\\n  <td>label-suffix</td>\\n  <td>string</td>\\n  <td></td>\\n  <td>Optional text to append to a label, but is not displayed when an error message uses the <code>fieldLabel</code> variable.\\n    This property is useful to convey formatting information about the field inside the field label, without that information\\n    appearing in any error messages.\\n  </td>\\n</tr>\\n\\n<tr>\\n  <td>hide-label</td>\\n  <td>expression</td>\\n  <td>false</td>\\n  <td>An expression that determines whether to show or hide the label.</td>\\n</tr>\\n<tr>\\n  <td>field-errors</td>\\n  <td>object</td>\\n  <td></td>\\n  <td>A key-value pair object linking an error to a message. Error messages can be language-resource-keys.</td>\\n</tr>\\n<tr>\\n  <td>text-errors</td>\\n  <td>array</td>\\n  <td></td>\\n  <td>An array of scope-properties to watch for \\\"truthiness\\\". E.g. For `text-errors=\\\"['scopeProp']\\\"`, the text-value of `scope.scopeProp` will be\\n    displayed when the value is \\\"truthy\\\" (typically a non empty string). This property is useful for handling error messages returned from calling APIs.</td>\\n</tr>\\n<tr>\\n  <td>ff-ng-model</td>\\n  <td>expression</td>\\n  <td></td>\\n  <td><strong>Required</strong> - the AngularJS <code>ngModel</code> directive, which is applied to the <code>select</code> element.</td>\\n</tr>\\n<tr>\\n  <td>ff-*</td>\\n  <td>*</td>\\n  <td></td>\\n  <td>Additional attributes/directives that are copied onto the <strong>input/select element</strong> can be specified using by prefixing them with <code>ff-</code>. For example <code>ff-size=\\\"3\\\"</code>\\n    would be compiled to <code>size=\\\"3\\\"</code> on the <code>input</code>/<code>select</code> element.</td>\\n</tr>\\n<tr>\\n  <td>template</td>\\n  <td>URL</td>\\n  <td>See <a ahref=\\\"#formControlsService\\\">Form Controls Service options</a></td>\\n  <td>The HTML template to use for the control. The default value can be overridden on the element, or globally by setting the default value in the <a href=\\\"#formControlsService\\\">formControlsService</a></td>\\n</tr>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/common/docs/formControlsCommonProperties.docs.html\n ** module id = 65\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormControlsDemosController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formDemos\\\">Demos</h1>\\n  </div>\\n\\n  <h2 id=\\\"formDemo1\\\">Standard form</h2>\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    <form name=\\\"formDemo1\\\" class=\\\"form\\\" novalidate form-submit=\\\"\\\">\\n      <fieldset>\\n        \\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"control-label\\\" for=\\\"formDemo1_fldTitle\\\">Title</label>\\n          <div class=\\\"control-row\\\">\\n            <select id=\\\"formDemo1_fldTitle\\\" name=\\\"formDemo1_fldTitle\\\" ng-model=\\\"ctrl.formDemo1.title\\\" ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" class=\\\"form-control\\\" ng-required=\\\"true\\\" field-error-controller></select>\\n          </div>\\n          <div error-container field-name=\\\"formDemo1_fldTitle\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n        </div>\\n\\n        \\n        <div form-input uid=\\\"formDemo1_fldName\\\" name=\\\"formDemo1_fldName\\\" label=\\\"Name\\\" label-suffix=\\\"(40 chars)\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formDemo1.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'FIELD_ERROR.TEMPLATE.REQUIRED', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n        <div form-checkbox uid=\\\"formDemo1_fld3\\\" name=\\\"formDemo1_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo1.fld1_3\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n        <div form-input uid=\\\"formDemo1_fld4\\\" label=\\\"Income\\\" required=\\\"true\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" input-suffix=\\\"per month\\\" ff-ng-model=\\\"ctrl.formDemo1.fld4\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n        <fieldset form-group>\\n          <div ng-repeat=\\\"item in ctrl.titleData\\\">\\n            <div form-radio-button uid=\\\"formDemo1_fld{{$index}}\\\" name=\\\"formDemo1_group1\\\" ff-ng-model=\\\"ctrl.formDemo1.group1\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\">{{item.label}}</div>\\n          </div>\\n          <div error-container field-name=\\\"formDemo1_group1\\\" field-errors=\\\"{required: 'Please select one of the above options'}\\\"></div>\\n        </fieldset>\\n\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.formDemo1\\\">Reset</button>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"formDemo2\\\">Horizontal Form</h2>\\n\\n  <p>This form takes advantage of the default control-templates' HTML structure to render the controls inside a form with <code>class=\\\"form-horizontal\\\"</code>\\n    as expected within Bootstrap. See the <a href=\\\"/css/sampleFormStyle.css\\\" target=\\\"_blank\\\">sample style sheet</a> to see how to do this.</p>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n    <form name=\\\"formDemo2\\\" class=\\\"form form-horizontal\\\" novalidate form-submit=\\\"\\\">\\n      <fieldset>\\n\\n        <div form-input uid=\\\"formDemo2_fld1\\\" name=\\\"formDemo2_fld1\\\" label=\\\"Nick Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formDemo2.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n        <div form-select uid=\\\"formDemo2_fld2\\\" name=\\\"formDemo2_fld2\\\" label=\\\"Common field\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo2.fld2\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n        <div form-checkbox uid=\\\"formDemo2_fld3\\\" name=\\\"formDemo2_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo2.fld2_3\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n        <div form-input uid=\\\"formDemo2_fld4\\\" label=\\\"Income\\\" required=\\\"true\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" input-suffix=\\\"per month\\\" ff-ng-model=\\\"ctrl.formDemo2.fld4\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n        <fieldset form-group>\\n          <div ng-repeat=\\\"item in ctrl.titleData\\\">\\n            <div form-radio-button uid=\\\"formDemo2_fld{{$index}}\\\" name=\\\"formDemo2_group1\\\" ff-ng-model=\\\"ctrl.formDemo2.group1\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\" hide-required-indicator=\\\"true\\\">{{item.label}}</div>\\n          </div>\\n          <div error-container field-name=\\\"formDemo2_group1\\\" field-errors=\\\"{required: 'Please select one of the above options'}\\\"></div>\\n        </fieldset>\\n\\n        <div class=\\\"button-row\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n          <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.formDemo2\\\">Reset</button>\\n        </div>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"formDemo3\\\">Inline Form</h2>\\n  <p>This form takes advantage of the default control-templates' HTML structure to render the controls inside a form with <code>class=\\\"form-inline\\\"</code>\\n    as expected within Bootstrap. See the <a href=\\\"/css/sampleFormStyle.css\\\" target=\\\"_blank\\\">sample style sheet</a> to see how to do this.</p>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n    <form name=\\\"formDemo3\\\" class=\\\"form form-inline\\\" novalidate form-submit=\\\"\\\">\\n      <fieldset>\\n\\n        <div form-input uid=\\\"formDemo3_fld1\\\" name=\\\"formDemo3_fld1\\\" label=\\\"Nick Name\\\" hide-label=\\\"true\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formDemo3.fld1\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" ff-placeholder=\\\"Enter Nick Name\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n        <div form-input uid=\\\"formDemo3_fld4\\\" label=\\\"Income\\\" hide-label=\\\"true\\\" required=\\\"true\\\" ff-style=\\\"width:40px\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" ff-ng-model=\\\"ctrl.formDemo3.fld4\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n        <div form-select uid=\\\"formDemo3_fld2\\\" name=\\\"formDemo3_fld2\\\" label=\\\"Common field\\\" hide-label=\\\"true\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo3.fld2\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" placeholder=\\\"Enter Title\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n        <div form-checkbox uid=\\\"formDemo3_fld3\\\" name=\\\"formDemo3_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.formDemo3.fld3\\\" hide-required-indicator=\\\"true\\\" field-errors=\\\"{required: 'You must agree'}\\\">I agree</div>\\n\\n        <fieldset form-group>\\n          <span ng-repeat=\\\"item in ctrl.titleData\\\">\\n            <div form-radio-button uid=\\\"formDemo3_fld{{$index}}\\\" name=\\\"formDemo3_group1\\\" ff-ng-model=\\\"ctrl.formDemo3.group1\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\" hide-required-indicator=\\\"true\\\">{{item.label}}</div>\\n          </span>\\n          <div error-container field-name=\\\"formDemo3_group1\\\" field-errors=\\\"{required: 'Please select one of the above options'}\\\"></div>\\n        </fieldset>\\n\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n        <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.formDemo3\\\">Reset</button>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"formDemo4\\\">Form with repeating sections</h2>\\n\\n  <p>This is probably as complex as it gets - a horizontal-form with a repeating inline-form.</p>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n    <style>[name=formDemo4] .form-inline .form-group{margin-right:0}[name=formDemo4] .form-inline .control-label{display:none}[name=formDemo4] .form-inline .control-row{width:auto;padding:0;margin-left:15px}[name=formDemo4] .form-inline [form-group]{margin-left:0;width:auto;float:none}[name=formDemo4] .form-inline .btn{margin-bottom:15px}</style>\\n    <form name=\\\"formDemo4\\\" class=\\\"form form-horizontal\\\" novalidate form-submit=\\\"\\\">\\n      <fieldset>\\n\\n        <div form-input uid=\\\"formDemo4_fld1\\\" name=\\\"formDemo4_fld1\\\" label=\\\"Last Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formDemo4.name\\\" ff-maxlength=\\\"40\\\" field-errors=\\\"{required: 'Last name is required'}\\\"></div>\\n\\n        <div form-select uid=\\\"formDemo4_fld2\\\" name=\\\"formDemo4_fld2\\\" label=\\\"Type\\\" required=\\\"true\\\" placeholder=\\\"Select Title\\\" ff-ng-model=\\\"ctrl.formDemo4.title\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"control-label\\\">Education History</label>\\n\\n          <div class=\\\"control-row\\\">\\n            <div ng-repeat=\\\"school in ctrl.formDemo4.education\\\" class=\\\"form form-inline\\\" ng-init=\\\"schoolIndex = $index\\\">\\n              <div ng-form=\\\"formDemo4_subform\\\">\\n                <div form-input uid=\\\"formDemo4_subform{{$index}}_fld1\\\" name=\\\"formDemo4_subform_fld1\\\" label=\\\"School\\\" hide-label=\\\"true\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-placeholder=\\\"School Name\\\" ff-ng-model=\\\"school.name\\\" ff-maxlength=\\\"30\\\" ff-style=\\\"width: 100px\\\" field-errors=\\\"{required: 'School name is required'}\\\"></div>\\n\\n                <div form-input uid=\\\"formDemo4_subform{{$index}}_fld4\\\" label=\\\"Income\\\" hide-label=\\\"true\\\" required=\\\"true\\\" ff-style=\\\"width:40px\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" ff-ng-model=\\\"school.income\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n                <div form-select uid=\\\"formDemo4_subform{{$index}}_fld2\\\" name=\\\"formDemo4_subform_fld2\\\" label=\\\"Type\\\" hide-label=\\\"true\\\" required=\\\"true\\\" placeholder=\\\"School Type\\\" ff-ng-model=\\\"school.type\\\" ff-ng-options=\\\"item.label for item in ctrl.schoolData track by item.label\\\" field-errors=\\\"{required: 'Type is required'}\\\"></div>\\n\\n                <div form-checkbox uid=\\\"formDemo4_subform{{$index}}_fld3\\\" name=\\\"formDemo4_subform_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"school.isCoEd\\\" field-errors=\\\"{required: 'Uniforms are required'}\\\">Uniform</div>\\n\\n\\n                <fieldset form-group>\\n                  <span ng-repeat=\\\"item in ctrl.titleData\\\">\\n                    <div form-radio-button uid=\\\"formDemo4_subform{{schoolIndex}}_fld4_{{$index}}\\\" name=\\\"formDemo4_subform_group{{schoolIndex}}\\\" ff-ng-model=\\\"school.title\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\" hide-required-indicator=\\\"true\\\">{{item.label}}</div>\\n                  </span>\\n                  <div error-container field-name=\\\"formDemo4_subform_group{{schoolIndex}}\\\" field-errors=\\\"{required: 'Please select an option'}\\\"></div>\\n                </fieldset>\\n\\n                <button type=\\\"button\\\" class=\\\"btn btn-success\\\" ng-click=\\\"ctrl.addSchool()\\\" ng-if=\\\"$last\\\">+</button>\\n\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n\\n\\n        <div class=\\\"button-row\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n          <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.formDemo4\\\">Reset</button>\\n        </div>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/common/docs/formControlsDemos.docs.html\n ** module id = 66\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormControlServiceDemoCtrl as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formControlsService\\\">Form Controls Service <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/common/FormControlService.js\\\" target=\\\"_blank\\\">FormControlService.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.common.formControlService</code>\\n  </div>\\n\\n  <p>The Form Control Service service provides common functions used by the form controls, and allows default values for the form controls to be changed from a central place.</p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>The Form Control Service requires the <a href=\\\"#requiredMarker\\\">RequiredMarker module</a> and the <a href=\\\"{{mainCtrl.REPO}}src/common\\\" target=\\\"_blank\\\">ngFormLib.common.utility</a> module to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formControlsServiceOptions\\\">Options</h2>\\n\\n  <p>Options can be configured like so:</p>\\n  <div class=\\\"highlight\\\">\\n    <pre><code class=\\\"js\\\" highlight-block>angular.module('myApp', ['ngFormLib'])\\n  .config(['FormControlServiceProvider', function(FormControlServiceProvider) {\\n      FormControlServiceProvider.defaults.select.template = 'path/to/my/template.html'\\n  }])</code></pre>\\n  </div>\\n\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>idPrefix</td>\\n          <td>String</td>\\n          <td>fpFld</td>\\n          <td>The prefix string for generated form-control id values. Generated <code>id</code> values are used\\n          when the form-control does not have it's own <code>cid</code> attribute with a non-empty value</td>\\n        </tr>\\n        <tr>\\n          <td>formCheckbox.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/formCheckbox/ template/FormCheckboxTemplate.html</td>\\n          <td>Template for the <a ahref=\\\"#formCheckbox\\\">Form Checkbox</a> control</td>\\n        </tr>\\n        <tr>\\n          <td>formDate.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/formDate/ template/FormDateTemplate.html</td>\\n          <td>Template for the <a ahref=\\\"#formDate\\\">Form Date</a> control</td>\\n        </tr>\\n        <tr>\\n          <td>formInput.template</td>\\n          <td>String</td>\\n          <td>&lt;div class=\\\"form-group\\\"&gt;&lt;label class=\\\"control-label\\\"&gt;&lt;/label&gt;&lt;div class=\\\"control-row\\\"&gt;&lt;input #type# class=\\\"form-control\\\"&gt;&lt;span ng-transclude&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</td>\\n          <td>Template for the <a ahref=\\\"#formInput\\\">Form Input</a> control. <br>\\n          <strong>Note:</strong> The <code>#type#</code> string is replaced with the input's type (text|tel|number|...) prior to the template\\n          being compiled. This is due to the <code>type</code> attribute being read-only on an <code>input</code> element (see <a href=\\\"http://stackoverflow.com/questions/8378563/why-cant-i-change-the-type-of-an-input-element-to-submit\\\" target=\\\"_blank\\\">here</a>)</td>\\n        </tr>\\n        <tr>\\n          <td>formRadioButton.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/formRadioButton/ template/FormRadioButtonTemplate.html</td>\\n          <td>Template for the <a ahref=\\\"#formRadioButton\\\">Form RadioButton</a> control</td>\\n        </tr>\\n        <tr>\\n          <td>formSelect.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/formSelect/ template/FormSelectTemplate.html</td>\\n          <td>Template for the <a ahref=\\\"#formSelect\\\">Form Select</a> control</td>\\n        </tr>\\n        <tr>\\n          <td>requiredMarker.template</td>\\n          <td>URL</td>\\n          <td>ngFormLib/controls/requiredMarker/ template/RequiredMarker.html</td>\\n          <td>Template for the <a ahref=\\\"#requiredMarker\\\">Required Marker</a> control</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/common/docs/formControlsService.docs.html\n ** module id = 67\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"ErrorMessageContainerDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"errorMessageContainer\\\">Error Message Container <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/errorMessageContainer/ErrorMessageContainer.js\\\" target=\\\"_blank\\\">ErrorMessageContainer.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.errorMessageContainer</code>\\n  </div>\\n\\n  <p>The Error Message Container is a directive which shows & hides error messages based on the parent-form's policy and the corresponding input-field's state.\\n    It links the error message(s) to the field using ARIA attributes. This increases the accessibility of form-elements quite a bit.</p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Error Message Controller requires the <code>pascalprecht.translate</code> module (to perform translation of error messages). See <a href=\\\"http://angular-translate.github.io/\\\">Angular Translate</a>.</p>\\n  </div>\\n\\n  <p>Error messages typically have a consistent grammer.\\n    <a href=\\\"http://angular-translate.github.io/\\\">Angular Translate</a> makes it really easy to provide consistent error\\n    syntax for the error messages across your application, with the bonus of providing multi-language support as well.\\n    However, you can still use this directive without configuring Angular Translate - the error message strings will be rendered as-is.\\n  </p>\\n\\n  <h2 id=\\\"errorMessageContainerExamples\\\">Examples</h2>\\n  <p><code>error-message-container</code> was designed to be used by the form controls in this library. However, it is possible to use\\n  this directive without using the form controls. A good use case is when dealing with a collection of <code>form-radio-button</code> elements where there is no initial selection, but a selection is required</p>\\n  <p>Use <code>error-message-container</code> to show an error message when a validation error occurs.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    <form name=\\\"errMsgDemo\\\" class=\\\"form\\\" novalidate>\\n      <fieldset>\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"control-label\\\" for=\\\"errMsgDemo_fldTitle\\\">Title</label>\\n          <div class=\\\"control-row\\\">\\n            <select id=\\\"errMsgDemo_fldTitle\\\" name=\\\"errMsgDemo_fldTitle\\\" ng-model=\\\"ctrl.errMsgDemo.title\\\" ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" class=\\\"form-control\\\" ng-required=\\\"true\\\" field-error-controller></select>\\n          </div>\\n          <div error-container field-name=\\\"errMsgDemo_fldTitle\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"control-label\\\" for=\\\"errMsgDemo_fldName\\\">Name</label>\\n          <div class=\\\"control-row\\\">\\n            <input type=\\\"text\\\" id=\\\"errMsgDemo_fldName\\\" name=\\\"errMsgDemo_fldName\\\" ng-model=\\\"ctrl.errMsgDemo.name\\\" class=\\\"form-control\\\" ng-required=\\\"true\\\" field-error-controller>\\n          </div>\\n          <div error-container field-name=\\\"errMsgDemo_fldName\\\" field-label=\\\"custom error label\\\" field-errors=\\\"{required: 'FIELD_ERROR.TEMPLATE.REQUIRED'}\\\" text-errors=\\\"['ctrl.myTextError']\\\"></div>\\n        </div>\\n      </fieldset>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" form-submit=\\\"\\\">Submit</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.errMsgDemo\\\">Reset</button>\\n      <div tabindex=\\\"0\\\" class=\\\"btn\\\" ng-click=\\\"ctrl.toggleTextError()\\\">Toggle text error</div>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"errorMessageContainerUsage\\\">Usage</h2>\\n  <p>Add the <code>error-message-container</code> directive to any element, or use one of the form controls (above) which uses <code>error-message-container</code> already.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>field-name</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>The reference to a form-control. The must match the <code>name</code> attribute of the form-control. This property allows the directive to watch the form control and show errors for that form control.</td>\\n        </tr>\\n        <tr>\\n          <td>field-label</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>The label to display when a translated-error message contains <code>{{fieldLabel}}</code>. Relies on the use of the translation service to specify error messages as translation IDs.</td>\\n        </tr>\\n        <tr>\\n          <td>field-errors</td>\\n          <td>object</td>\\n          <td></td>\\n          <td>A key-value pair object linking an error to a message. Error messages can be language-resource-keys.</td>\\n        </tr>\\n        <tr>\\n          <td>text-errors</td>\\n          <td>array</td>\\n          <td></td>\\n          <td>An array of scope-properties to watch for \\\"truthiness\\\". E.g. For <code>text-errors=\\\"['scopeProp']\\\"</code>, the text-value of <code>scope.scopeProp</code> will be\\n            displayed when the value is \\\"truthy\\\" (typically a non empty string). This property is useful for handling error messages returned from calling APIs.</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/errorMessageContainer/docs/errorMessageContainer.docs.html\n ** module id = 68\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormCheckboxDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formCheckbox\\\">Form Checkbox <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formCheckbox/FormCheckbox.js\\\" target=\\\"_blank\\\">FormCheckbox.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formCheckbox</code>\\n  </div>\\n\\n  <p>The Form Checkbox directive acts like a macro in that it expands into a <code>&lt;label&gt;</code>,<code>&lt;input type=\\\"checkbox\\\"&gt;</code> and some auxillary HTML elements, but does change the <code>$scope</code> of those elements.</p>\\n\\n  <p>It works this way because the elements are inter-related. For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>&lt;label&gt;</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>FormCheckbox requires the <a ahref=\\\"#formControlsService\\\">form controls service module</a>, the <a ahref=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a ahref=\\\"#errorMessageContainer\\\">error message container module</a> and the <a href=\\\"{{mainCtrl.REPO}}src/controls/formCheckbox/template/FormCheckboxTemplate.html\\\" target=\\\"_blank\\\">FormCheckboxTemplate.html</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formCheckboxExamples\\\">Examples</h2>\\n  <p>Use <code>form-checkbox</code> to create a complete HTML structure containing a <code>label</code> and <code>input type=\\\"checkbox\\\"</code> element that reacts to the error state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formCheckbox1\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      <div form-checkbox uid=\\\"formCheckbox1_fld1\\\" name=\\\"formCheckbox1_fld1\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.fld1\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n      <div form-checkbox uid=\\\"formCheckbox1_fld2\\\" name=\\\"formCheckbox1_fld2\\\" ff-ng-model=\\\"ctrl.data.fld2\\\" ff-ng-true-value=\\\"'dog'\\\" ff-ng-false-value=\\\"'cat'\\\">Optional Checkbox with value: {{ctrl.data.fld2}}</div>\\n\\n      <div form-checkbox uid=\\\"formCheckbox1_fld3\\\" name=\\\"formCheckbox1_fld3\\\" class=\\\"image-checkbox\\\" ff-ng-model=\\\"ctrl.data.fld3\\\">Styled accessible checkbox</div>\\n\\n      <div form-checkbox uid=\\\"formCheckbox1_fld4\\\" name=\\\"formCheckbox1_fld4\\\" class=\\\"image-checkbox\\\" ff-ng-disabled=\\\"ctrl.data.fld3\\\" ff-ng-model=\\\"ctrl.data.fld4\\\">Occassionally disabled checkbox</div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formCheckboxUsage\\\">Usage</h2>\\n  <p>Add the <code>form-check</code> directive to an element, and supply a label as the content of the element (see example above).</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>ff-ng-true-value</td>\\n          <td>expression</td>\\n          <td></td>\\n          <td>The value to use in the model-value when the checkbox is checked.</td>\\n        </tr>\\n        <tr>\\n          <td>ff-ng-false-value</td>\\n          <td>expression</td>\\n          <td></td>\\n          <td>The value to use in the model-value when the checkbox is not checked.</td>\\n        </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/formCheckbox/docs/formCheckbox.docs.html\n ** module id = 69\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formDate\\\">Form Date <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formDate/formDate.js\\\" target=\\\"_blank\\\">FormDate.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formDate</code>\\n  </div>\\n\\n  <p>The Form Date directive acts like a macro in that it expands into a <code>label</code><code>input</code> and some auxillary HTML elements, but does change the <code>$scope</code> of those elements.</p>\\n\\n  <p>It works this way because the elements are inter-related. For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>label</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Form Date requires the <a href=\\\"#formControlsService\\\">form controls service module</a>, the <a href=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a href=\\\"#errorMessageContainer\\\">error message container module</a> and the <a href=\\\"{{mainCtrl.REPO}}src/controls/formDate/template/FormDateInputTemplate.html\\\" target=\\\"_blank\\\">FormDateInputTemplate.html</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formDateExamples\\\">Examples</h2>\\n  <p>Use <code>form-date</code> to create a complete HTML structure containing a <code>label</code> and <code>input</code> element that reacts to the state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formDate1\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      <div form-date uid=\\\"formDate1_fld1\\\" label=\\\"Text type field\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput1.fld1\\\" field-hint=\\\"{{'OTHER.HINT' | translate}}\\\" field-errors=\\\"{required: 'Title is required'}\\\" placeholder=\\\"Placeholder text\\\"></div>\\n\\n      <div form-date uid=\\\"formInput1_fld2\\\" name=\\\"formInput1_fld2\\\" label=\\\"Date type field\\\" required=\\\"false\\\" input-type=\\\"date\\\" ff-ng-model=\\\"ctrl.formInput1.fld2\\\"></div>\\n\\n      <div form-input uid=\\\"formInput1_fld3\\\" name=\\\"formInput1_fld3\\\" label=\\\"Income\\\" required=\\\"true\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" input-suffix=\\\"per month\\\" ff-ng-model=\\\"ctrl.formInput1.fld3\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n      \\n      <div form-input label=\\\"Generated id field\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput1.fld4\\\" placeholder=\\\"This field has a generated name and id\\\" field-errors=\\\"{required: 'FIELD_ERROR.TEMPLATE.REQUIRED'}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formDateUsage\\\">Usage</h2>\\n  <p>Add the <code>form-date</code> directive to an element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>field-hint</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Text that is related to the field but is not the field's label. Often used to provide additional information about the field. This string can be a language-resource-key.</td>\\n        </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/formDate/docs/formDate.docs.html\n ** module id = 70\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formInput\\\">Form Input <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formInput/FormInput.js\\\" target=\\\"_blank\\\">FormInput.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formInput</code>\\n  </div>\\n\\n  <p>The Form Input directive acts like a macro in that it expands into a <code>&lt;label&gt;</code><code>&lt;input&gt;</code> and some auxillary HTML elements, but does change the <code>$scope</code> of those elements.</p>\\n\\n  <p>It works this way because the elements are inter-related. For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>&lt;label&gt;</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Form Input requires the <a href=\\\"#formControlsService\\\">form controls service module</a>, the <a href=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a href=\\\"#errorMessageContainer\\\">error message container module</a> to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formInputExamples\\\">Examples</h2>\\n  <p>Use <code>form-input</code> to create a complete HTML structure containing a <code>label</code> and <code>select</code> element that reacts to the error state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formInput1\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      <div form-input uid=\\\"formInput1_fld1\\\" name=\\\"formInput1_fld1\\\" label=\\\"Text type field\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput1.fld1\\\" field-hint=\\\"{{'OTHER.HINT' | translate}}\\\" field-errors=\\\"{required: 'Title is required'}\\\" placeholder=\\\"Placeholder text\\\"></div>\\n\\n      <div form-input uid=\\\"formInput1_fld2\\\" name=\\\"formInput1_fld2\\\" label=\\\"Date type field\\\" required=\\\"false\\\" input-type=\\\"date\\\" ff-ng-model=\\\"ctrl.formInput1.fld2\\\"></div>\\n\\n      <div form-input uid=\\\"formInput1_fld3\\\" name=\\\"formInput1_fld3\\\" label=\\\"Income\\\" required=\\\"true\\\" input-type=\\\"text\\\" input-prefix=\\\"$\\\" input-suffix=\\\"per month\\\" ff-ng-model=\\\"ctrl.formInput1.fld3\\\" field-errors=\\\"{required: 'Income is required'}\\\"></div>\\n\\n      \\n      <div form-input label=\\\"Generated id field\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput1.fld4\\\" placeholder=\\\"This field has a generated name and id\\\" field-errors=\\\"{required: 'FIELD_ERROR.TEMPLATE.REQUIRED'}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formInputUsage\\\">Usage</h2>\\n  <p>Add the <code>form-input</code> directive to an element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>field-hint</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Text that is related to the field but is not the field's label. Often used to provide additional information about the field.</td>\\n        </tr>\\n        <tr>\\n          <td>input-prefix</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Creates a Bootstrap <a href=\\\"http://getbootstrap.com/components/#input-groups\\\" target=\\\"_blank\\\">input group</a> around the input\\n            element and displays the <strong>input-prefix</strong> string inside a <code>&lt;span class=\\\"input-group-addon\\\"&gt;&lt;/span&gt;</code> element, which appears <strong>before</strong> the <code>input</code> element.\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>input-suffix</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Creates a Bootstrap <a href=\\\"http://getbootstrap.com/components/#input-groups\\\" target=\\\"_blank\\\">input group</a> around the input\\n            element and displays the <strong>input-suffix</strong> string inside a <code>&lt;span class=\\\"input-group-addon\\\"&gt;&lt;/span&gt;</code> element, which appears <strong>after</strong> the <code>input</code> element.\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>placeholder</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Placeholder text that appears inside the input element when there is no existing value. Alias for <code>ff-placeholder</code>.</td>\\n        </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/formInput/docs/formInput.docs.html\n ** module id = 71\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormRadioButtonDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formRadioButton\\\">Form RadioButton <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formRadioButton/FormRadioButton.js\\\" target=\\\"_blank\\\">FormRadioButton.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formRadioButton</code>\\n  </div>\\n\\n  <p>Form RadioButton is a directive that is a wrapper for a <code>label</code>,<code>input type=\\\"radio\\\"</code> and some auxillary HTML elements, designed to work within Bootstrap form-structures.</p>\\n\\n  <p>It works this way because the <code>label</code>,<code>input type=\\\"radio\\\"</code> and error-display elements are inter-related.\\n    For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>&lt;label&gt;</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Form RadioButton requires the <a ahref=\\\"#formControlsService\\\">form controls service module</a>, the <a ahref=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a ahref=\\\"#errorMessageContainer\\\">error message container module</a> and the\\n      <a href=\\\"{{mainCtrl.REPO}}src/controls/formRadioButton/template/formRadioButtonTemplate.html\\\" target=\\\"_blank\\\">FormRadioButtonTemplate.html</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formRadioButtonExamples\\\">Examples</h2>\\n  <p>Use <code>form-radio-button</code> to create a complete HTML structure containing a <code>label</code> and <code>input type=\\\"radio\\\"</code> element that reacts to the state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formRadio1\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      \\n      <fieldset form-group>\\n        <div ng-repeat=\\\"item in ctrl.titleData\\\">\\n          <div form-radio-button uid=\\\"formRadio1_fld{{$index}}\\\" name=\\\"formRadio1_group1\\\" ff-ng-model=\\\"ctrl.data.radioVal1\\\" ff-ng-value=\\\"$index\\\" required=\\\"true\\\" hide-required-indicator>{{item.label}}</div>\\n        </div>\\n        <div error-container field-name=\\\"formRadio1_group1\\\" field-errors=\\\"{required: 'Please select one of the above options'}\\\"></div>\\n      </fieldset>\\n\\n      <p>Selected value: {{ctrl.data1.radioVal1}}</p>\\n\\n      \\n      <fieldset form-group>\\n        <div ng-repeat=\\\"item in ctrl.titleData\\\">\\n          <div form-radio-button uid=\\\"formRadio1_fld2{{$index}}\\\" name=\\\"formRadio1_group2\\\" ff-ng-model=\\\"ctrl.data.radioVal2\\\" ff-ng-value=\\\"$index\\\">{{item.label}}</div>\\n        </div>\\n      </fieldset>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.data\\\">Reset</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formRadioButtonUsage\\\">Usage</h2>\\n  <p>Add the <code>form-radio-button</code> directive to an element, and supply a label as the content of the element (see example above).</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <td>ff-ng-value</td>\\n        <td>expression</td>\\n        <td></td>\\n        <td>The value to use in the model-value when the radio-button is selected.</td>\\n      </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/formRadioButton/docs/formRadioButton.docs.html\n ** module id = 72\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormResetDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formReset\\\">Form Reset <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formReset/FormReset.js\\\" target=\\\"_blank\\\">FormReset.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formReset</code>\\n  </div>\\n\\n  <p>Form Reset is a directive which resets each form-field to it's initial state, by copying the initial state of the form's data-model.<br/>\\n    This requires every form controls' <code>ng-model</code> expression to refer to a common scope-object.\\n  </p>\\n\\n  <h2 id=\\\"formResetExamples\\\">Examples</h2>\\n  <p>Add <code>form-reset</code> directive to any <code>button</code> element inside a form.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    <form name=\\\"formReset\\\" class=\\\"form\\\" novalidate form-submit=\\\"ctrl.callWhenValid()\\\">\\n\\n      <div form-input uid=\\\"formReset_fldName\\\" name=\\\"formReset_fldName\\\" label=\\\"Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.data.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <div form-input uid=\\\"formReset_fldNickName\\\" name=\\\"formReset_fldNickName\\\" label=\\\"Nick Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.data.nickName\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Nick name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <div form-select uid=\\\"formReset_fldTitle\\\" name=\\\"formReset_fldTitle\\\" label=\\\"Title with default value\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.title\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n      <div form-select uid=\\\"formReset_fldTitle2\\\" name=\\\"formReset_fldTitle2\\\" label=\\\"Title with no default value\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.title2\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n      <div form-select uid=\\\"formReset_fldTitle3\\\" name=\\\"formReset_fldTitle3\\\" label=\\\"Title with placeholder\\\" required=\\\"true\\\" placeholder=\\\"Select title\\\" ff-ng-model=\\\"ctrl.data.title3\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.data\\\">Reset</button>\\n    </form>\\n\\n  </div>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>ngOptions <strong>must</strong> use 'track by'</h4>\\n    <p>Due to the way <code>form-reset</code> works (copying the data-object used by the controls, then changing the data-object back to the original value),\\n    <code>select</code> elements which use <code>ng-options</code> <strong>MUST</strong> use the <code>ng-options=\\\"... track by ...\\\"</code> variant\\n    of the syntax, if the <code>select</code> element has an initial value. See the example above.</p>\\n  </div>\\n\\n  <h2 id=\\\"formResetUsage\\\">Usage</h2>\\n  <p>Add the <code>form-reset</code> directive to a <code>button</code> element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <td>form-reset</td>\\n        <td>expression</td>\\n        <td></td>\\n        <td><strong>Required </strong>This expression should represent the parent scope-model-object that the form controls bind to.\\n          For example, a Customer Profile form should have a set of form controls that bind to 'myObject.&lt;name|age|birthDate|...&gt;'.\\n          In this example, use <code>form-reset=\\\"myObject\\\"</code>.</td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/formReset/docs/formReset.docs.html\n ** module id = 73\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormSelectDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formSelect\\\">Form Select <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}/src/modules/ngFormLib/controls/formSelect/FormSelect.js\\\" target=\\\"_blank\\\">FormSelect.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formSelect</code>\\n  </div>\\n\\n  <p>The Form Select directive acts like a macro in that it expands into a <code>&lt;label&gt;</code><code>&lt;select&gt;</code> and some auxillary HTML elements, but does change the <code>$scope</code> of those elements.</p>\\n\\n  <p>It works this way because the elements are inter-related. For example, when the <code>required</code> attribute is set to <code>true</code>\\n    the <code>&lt;label&gt;</code> element is changed so that a required-indicator-CSS-class is applied to the element.\\n  </p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>FormSelect requires the <a href=\\\"#formControlsService\\\">form controls service module</a>, the <a href=\\\"#fieldErrorController\\\">field error controller module</a>\\n      , the <a href=\\\"#errorMessageContainer\\\">error message container module</a> and the <a href=\\\"{{mainCtrl.REPO}}/src/controls/formSelect/template/FormSelectTemplate.html\\\" target=\\\"_blank\\\">FormSelectTemplate.html</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"formSelectExamples\\\">Examples</h2>\\n  <p>Use <code>form-select</code> to create a complete HTML structure containing a <code>label</code> and <code>select</code> element that reacts to the error state of the field.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formFormSelect\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      <div form-select uid=\\\"formFormSelect_fldDemo1\\\" name=\\\"formFormSelect_fldDemo1\\\" label=\\\"Common field\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.demo1\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n      <div form-select uid=\\\"formFormSelect_fldDemo2\\\" name=\\\"formFormSelect_fldDemo2\\\" label=\\\"Field with placeholder\\\" required=\\\"false\\\" ff-ng-model=\\\"ctrl.data.demo2\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" placeholder=\\\"{{'OTHER.PLACEHOLDER' | translate}}\\\"></div>\\n\\n      <div form-select uid=\\\"formFormSelect_fldDemo3\\\" name=\\\"formFormSelect_fldDemo3\\\" label=\\\"{{'FIELD.TITLE' | translate}}\\\" required=\\\"false\\\" ff-ng-model=\\\"ctrl.data.demo3\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-hint=\\\"{{'OTHER.HINT' | translate}}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-reset=\\\"ctrl.data\\\">Reset</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formSelectUsage\\\">Usage</h2>\\n  <p>Add the <code>form-select</code> directive to an element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th style=\\\"width:100px\\\">Name</th>\\n          <th style=\\\"width:100px\\\">Type</th>\\n          <th style=\\\"width:50px\\\">Default</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td>field-hint</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Text that is related to the field but is not the field's label. Often used to provide additional information about the field. This string can be a language-resource-key.</td>\\n        </tr>\\n        <tr>\\n          <td>placeholder</td>\\n          <td>string</td>\\n          <td></td>\\n          <td>Text to display when there is no initial value.</td>\\n        </tr>\\n        <tr>\\n          <td>ff-ng-options</td>\\n          <td>expression</td>\\n          <td></td>\\n          <td><strong>Required</strong> - the AngularJS <code>ngOptions</code> directive, which is applied to the <code>select</code> element.\\n          Note that the 'track by' syntax is required in this expression for the control to work correctly with the <code>form-reset</code> directive.</td>\\n        </tr>\\n      </tbody>\\n      <tbody form-controls-common-properties-docs></tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/formSelect/docs/formSelect.docs.html\n ** module id = 74\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormSubmitDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formSubmit\\\">Form Submit <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/formSubmit/FormSubmit.js\\\" target=\\\"_blank\\\">FormSubmit.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.formSubmit</code>\\n  </div>\\n\\n  <p>Form Submit is a directive which can contain an expression to execute <strong>when the form is valid</strong>.<br/>\\n    This directive is useful when you need to execute a function on the <code>$scope</code> once the form data has been successfully validated.\\n    The function would typically do some minor data-transformation on (a copy of) the form's data before sending the data to a service for further processing.\\n  </p>\\n\\n  <h2 id=\\\"formSubmitExamples\\\">Examples</h2>\\n  <p>Add <code>form-submit</code> directive to any form element <strong>or</strong> to any button inside a form.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formSubmit\\\" class=\\\"form\\\" novalidate form-submit=\\\"ctrl.callWhenValid()\\\">\\n      \\n      <div form-input uid=\\\"formSubmit_fldName\\\" name=\\\"formSubmit_fldName\\\" label=\\\"Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.data.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <input type=\\\"submit\\\" class=\\\"btn\\\" value=\\\"Input type=submit\\\">\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\">Non-submit button</button>\\n    </form>\\n\\n    <hr>\\n\\n    \\n    <form name=\\\"formSubmit2\\\" class=\\\"form\\\" novalidate>\\n      \\n      <div form-input uid=\\\"formSubmit2_fldNickName\\\" name=\\\"formSubmit2_fldNickName\\\" label=\\\"Nick Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.data.nickName\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <input type=\\\"submit\\\" class=\\\"btn\\\" value=\\\"Input type=submit\\\">\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" form-submit=\\\"ctrl.callWhenValid()\\\">Submit button with directive</button>\\n      <button type=\\\"button\\\" class=\\\"btn\\\" form-submit=\\\"ctrl.callWhenValid()\\\">Non-submit button with directive</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"formSubmitUsage\\\">Usage</h2>\\n  <p>Add the <code>form-submit</code> directive to a <code>form</code> or <code>button</code> element, with a value that is a scope-expression.</p>\\n\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/formSubmit/docs/formSubmit.docs.html\n ** module id = 75\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"RequiredMarkerDemoController as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"requiredMarker\\\">Required Marker <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/controls/requiredMarker/RequiredMarker.js\\\" target=\\\"_blank\\\">RequiredMarker.js</a>\\n    </h1>\\n    <code>ngFormLib.controls.requiredMarker</code>\\n  </div>\\n\\n  <p>Required Marker is a small directive which emits HTML which can be styled to display a symbol/content to indicate that a form-field is required.\\n    The default template makes the marker accessible by hiding the element from a screen reader and reading out 'required' instead.</p>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Plugin dependency</h4>\\n    <p>Required Marker requires the <a href=\\\"#formControlsService\\\">form controls service module</a> template to be loaded.</p>\\n  </div>\\n\\n  <h2 id=\\\"requiredMarkerExamples\\\">Examples</h2>\\n  <p>Use <code>required-marker</code> to add an indicator inside a <code>label</code> element.</p>\\n\\n  <h3>Live demo</h3>\\n\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    \\n    <form name=\\\"formRequiredMarker\\\" class=\\\"form\\\" novalidate form-submit>\\n\\n      \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"formRequiredMarker_fldTitle\\\">My field<span required-marker></span></label>\\n        <div class=\\\"control-row\\\">\\n          <select uid=\\\"formRequiredMarker_fldTitle\\\" name=\\\"formRequiredMarker_fldTitle\\\" ng-model=\\\"ctrl.data.title\\\" ng-options=\\\"item.label for item in ctrl.titleData\\\" class=\\\"form-control\\\" ng-required=\\\"true\\\" field-error-controller></select>\\n        </div>\\n        <div error-container field-name=\\\"formRequiredMarker_fldTitle\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n      </div>\\n\\n\\n      \\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"formRequiredMarker_fldTitle2\\\">Optionally required field</label><span required-marker hide=\\\"ctrl.data.title.label === 'Mr'\\\"></span>\\n        <div class=\\\"control-row\\\">\\n          <select uid=\\\"formRequiredMarker_fldTitle2\\\" name=\\\"formRequiredMarker_fldTitle2\\\" ng-model=\\\"ctrl.data.title2\\\" ng-options=\\\"item.label for item in ctrl.titleData\\\" class=\\\"form-control\\\" ng-required=\\\"ctrl.data.title.label !== 'Mr'\\\" field-error-controller></select>\\n        </div>\\n        <div error-container field-name=\\\"formRequiredMarker_fldTitle2\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n      </div>\\n\\n\\n      \\n      <div form-input uid=\\\"formRequiredMarker_fldName\\\" name=\\\"formRequiredMarker_fldName\\\" label=\\\"Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.formInput.demo1\\\" field-errors=\\\"{required: 'Name is required'}\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit button</button>\\n    </form>\\n\\n  </div>\\n\\n  <h2 id=\\\"requiredMarkerUsage\\\">Usage</h2>\\n  <p>Add the <code>required-marker</code> directive to an element.</p>\\n\\n  <h3>Options</h3>\\n  <p>Options can be passed via attributes on the directive.</p>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <td>hide</td>\\n        <td>expression</td>\\n        <td>false</td>\\n        <td>A scope-expression which causes the required marker to appear (false) or disappear (true)</td>\\n      </tr>\\n      <tr>\\n        <td>template</td>\\n        <td>URL</td>\\n        <td>ngFormLib/controls/requiredMarker/template/RequiredMarkerTemplate.html</td>\\n        <td>The HTML template to use for the control. The default value can be overridden on the element, or globally by setting the default value in the <a href=\\\"#formControlsService\\\">formControlsService</a></td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/controls/requiredMarker/docs/requiredMarker.docs.html\n ** module id = 76\n ** module chunks = 1\n **/","module.exports = \"<div class=\\\"bs-docs-section\\\" ng-controller=\\\"FormPolicyDemoCtrl as ctrl\\\">\\n\\n  <div class=\\\"page-header\\\">\\n    <h1 id=\\\"formPolicy\\\">Form Policy <a class=\\\"small\\\" href=\\\"{{mainCtrl.REPO}}src/modules/ngFormLib/policy/FormPolicy.js\\\" target=\\\"_blank\\\">FormPolicy.js</a>\\n    </h1>\\n    <code>ngFormLib.policy</code>\\n  </div>\\n\\n  <p>Form Policy is a service which is used in conjunction with decorated <code>form</code> and <code>ng-form</code> directives to\\n  apply validation behaviours to any form.<br/><strong><code>ngFormLib.policy</code> is a required module for all other Form Policy directives.</strong>\\n\\n  </p><p>This service exposes the following configurable policies:</p>\\n  <ul>\\n    <li><strong>field state definition</strong> (policies which define what state a component should be in for the component to be consider in an error-state, a success-state, or some-other-state which you can define</li>\\n    <li><strong>when to check for field-state changes</strong> - which user-or-application events should cause the component-state to be checked to see if it has changed state (according to the definition in the above policy)</li>\\n    <li><strong>what to do when a state-change occurs</strong> - such as setting the focus to the first field that has an error, when the field is in an error-state</li>\\n  </ul>\\n\\n  <p>Additionally, the decorated <code>form</code> and <code>ng-form</code> directives work with the <a href=\\\"#formControlService\\\">Form Controls Service</a>\\n  to allow the correct form element templates to be loaded based on the presence (or not) of the <code>form-horizontal</code> CSS class on the <code>form</code> element.</p>\\n\\n  <h2 id=\\\"formPolicyExamples\\\">Examples</h2>\\n  <p>Apply the default form policy to a form.</p>\\n\\n  <h3>Live demo</h3>\\n  <pre class=\\\"bs-example-scope\\\">  // Load policy and policy libraries FIRST. The policy libraries define a default policy for each policy-type\\n  angular.module('myApp', ['ngFormLib',\\n    'ngFormLib.policy.behaviourOnStateChange',\\n    'ngFormLib.policy.checkForStateChanges',\\n    'ngFormLib.policy.stateDefinitions']\\n  );</pre>\\n  <div class=\\\"bs-example\\\" style=\\\"padding-bottom:24px\\\" append-source>\\n\\n    <form name=\\\"formPolicy\\\" class=\\\"form\\\" novalidate form-submit=\\\"\\\">\\n      \\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"control-label\\\" for=\\\"formPolicy_fldTitle\\\">Title</label>\\n        <div class=\\\"control-row\\\">\\n          <select id=\\\"formPolicy_fldTitle\\\" name=\\\"formPolicy_fldTitle\\\" ng-model=\\\"ctrl.employee.title\\\" ng-options=\\\"item.label for item in ctrl.titleData\\\" class=\\\"form-control\\\" ng-required=\\\"false\\\" field-error-controller></select>\\n        </div>\\n        <div error-container field-name=\\\"formPolicy_fldTitle\\\" field-errors=\\\"{required: 'Please select a title'}\\\"></div>\\n      </div>\\n\\n      \\n      <div form-input uid=\\\"formPolicy_fldName\\\" name=\\\"formPolicy_fldName\\\" label=\\\"Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.employee.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n      <div form-checkbox uid=\\\"formPolicy_fld3\\\" name=\\\"formPolicy_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.employee.fld1_3\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" form-reset=\\\"ctrl.employee\\\">Reset</button>\\n    </form>\\n\\n    <hr/>\\n\\n    <form name=\\\"formPolicy2\\\" class=\\\"form\\\" novalidate form-submit=\\\"\\\" form-policy=\\\"ctrl.myCustomPolicy\\\">\\n      <fieldset>\\n        <legend>Custom Form Policy</legend>\\n\\n        <p>This form takes advantage of the default control-templates' HTML structure to render the controls inside a form with <code>class=\\\"form-horizontal\\\"</code>\\n        as expected within Bootstrap. See the <a href=\\\"/css/sampleFormStyle.css\\\" target=\\\"_blank\\\">sample style sheet</a> to see how to do this.</p>\\n\\n        <div form-input uid=\\\"formPolicy2_fld1\\\" name=\\\"formPolicy2_fld1\\\" label=\\\"Nick Name\\\" required=\\\"true\\\" input-type=\\\"text\\\" ff-ng-model=\\\"ctrl.fldFPCustPolicy.name\\\" ff-maxlength=\\\"40\\\" ff-ng-pattern=\\\"/^[a-zA-Z0-9 \\\\-.']+$/\\\" field-errors=\\\"{required: 'Last name is required', pattern: 'Please enter a valid last name'}\\\"></div>\\n\\n        <div form-select uid=\\\"formPolicy2_fld2\\\" name=\\\"formPolicy2_fld2\\\" label=\\\"Common field\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.demo1\\\" ff-ng-options=\\\"item.label for item in ctrl.titleData track by item.label\\\" field-errors=\\\"{required: 'Title is required'}\\\"></div>\\n\\n        <div form-checkbox uid=\\\"formPolicy2_fld3\\\" name=\\\"formPolicy2_fld3\\\" required=\\\"true\\\" ff-ng-model=\\\"ctrl.data.fld2_3\\\" field-errors=\\\"{required: 'You must agree'}\\\">You are required to agree to this</div>\\n\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      </fieldset>\\n    </form>\\n  </div>\\n\\n  <h2 id=\\\"formPolicyUsage\\\">Usage</h2>\\n  <p>Load the <code>ngFormLib</code>module and (normally) the standard form policy libraries.</p>\\n  <div class=\\\"highlight\\\">\\n    <pre><code class=\\\"js\\\" highlight-block>\\n      angular.module('myApp', ['ngFormLib',\\n        'ngFormLib.policy.behaviourOnStateChange',\\n        'ngFormLib.policy.checkForStateChanges',\\n        'ngFormLib.policy.stateDefinitions'\\n      ]);\\n    </code></pre>\\n  </div>\\n\\n  <div class=\\\"callout callout-danger\\\">\\n    <h4>Heads up!</h4>\\n    <p>For the form policy to work as above, the following configuration must exist:</p>\\n    <ul>\\n      <li>the <code>form</code> must have a non-empty <code>name</code> attribute</li>\\n      <li>the <code>form-submit</code> directive <strong>must</strong> exist on the <code>form</code> element, or on a <code>button</code> element inside the form</li>\\n      <li>each form field must have a non-empty <code>name</code> and <code>ng-model</code> attribute</li>\\n      <li>each form field must use the <code>field-error-controller</code> directive for errors to appear when using the <code>error-container</code> directive</li>\\n    </ul>\\n  </div>\\n\\n  <h3>Options</h3>\\n\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th style=\\\"width:100px\\\">Name</th>\\n        <th style=\\\"width:100px\\\">Type</th>\\n        <th style=\\\"width:50px\\\">Default</th>\\n        <th>Description</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <td>formSubmitAttemptedClass</td>\\n        <td>string</td>\\n        <td>'form-submit-attempted'</td>\\n        <td>a CSS class-name that is applied to the <code>form</code> element when an attempt to submit the form is made (via the <code>formSubmit</code> directive)</td>\\n      </tr>\\n      <tr>\\n        <td>fieldErrorClass</td>\\n        <td>string</td>\\n        <td>'has-error'</td>\\n        <td>a CSS class-name that is applied to the field's form-group when an error is showing</td>\\n      </tr>\\n      <tr>\\n        <td>fieldSuccessClass</td>\\n        <td>string</td>\\n        <td>'has-success'</td>\\n        <td>a CSS class-name that is applied to the field's form-group when the field has been successfully validated</td>\\n      </tr>\\n      <tr>\\n        <td>behaviourOnStateChange</td>\\n        <td>function</td>\\n        <td>noop</td>\\n        <td>The behaviour-on-state-change policy function. This function returns an object with two methods on it: <code>applyBehaviour()</code> which is called when an the field's state changes,\\n          and <code>resetBehaviour()</code> function which is called when the form is reset and when the form is submitted again. Function signature:\\n\\n          <pre class=\\\"bs-example-code\\\"><code class=\\\"javascript\\\" highlight-block>function myBehaviourOnStateChange(formController) {\\n  return {\\n    applyBehaviour: function (fieldElem, fieldState, formSubmitAttempted) {...},\\n    resetBehaviour: function() {...}\\n  };\\n}</code></pre>\\n          where:\\n          <ul>\\n            <li><code>formController</code> is the <code>form</code> controller, which has a reference to the form state and policy,</li>\\n            <li><code>fieldElem</code> is a jqLite element,</li>\\n            <li><code>fieldState</code> is a boolean indicating whether an error for this field is showing or not,</li>\\n            <li><code>formSubmitAttempted</code> is a boolean indicating whether the user ahs attempted to submit the form</li>\\n          </ul>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td>checkForStateChanges</td>\\n        <td>function</td>\\n        <td>noop</td>\\n        <td>The check-for-state-changes policy function. This function is responsible for determining <strong>when</strong> to evaluate whether a field has changed state (into an error state or into a success state).\\n          Function signature:\\n\\n          <pre class=\\\"bs-example-code\\\"><code class=\\\"javascript\\\" highlight-block>function myCheckForStateChangesFunc(scope, element, name, errorCondition, ngModelController) {...}</code></pre>\\n          where <ul>\\n            <li><code>scope</code> is the Angular $scope for the element</li>\\n            <li><code>element</code> is a jqLite field element</li>\\n            <li><code>name</code> is the string-name of the field</li>\\n            <li><code>errorCondition</code> is an Angular expression that can be $watch()ed</li>\\n            <li><code>ngModelController</code> is the ngModelController of the field, which contains the <code>fieldState</code> property</li>\\n          </ul>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td>errorCondition</td>\\n        <td>function</td>\\n        <td>noop</td>\\n        <td>The error condition policy function. This function returns a string-expression is used to determine <strong>if</strong> a field should show an error.\\n          Function signature:\\n\\n          <pre class=\\\"bs-example-code\\\"><code class=\\\"javascript\\\" highlight-block>function myErrorCondition(formName, fieldName) {\\n  ...;\\n  return '...';\\n}</code></pre>\\n          where <ul>\\n            <li><code>formName</code> is the string-name of the form that the field is situated inside of</li>\\n            <li><code>fieldName</code> is strong-name of the field</li>\\n          </ul>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n\\n  <h2 id=\\\"formPolicyConfig\\\">Configuration</h2>\\n  <p>Form policies can be defined in 3 ways: application-wide, per-form, or a combination of the two (application-wide with per-form overrides).</p>\\n\\n  <div class=\\\"callout callout-info\\\">\\n    <h4>Application-wide configuration</h4>\\n\\n    <p>You can override the default policies by replacing the policy-factory value for each policy:</p>\\n    <div class=\\\"highlight\\\">\\n      <pre class=\\\"bs-example-code\\\">\\n        <code class=\\\"javascript\\\" highlight-block>\\n          angular.module('myApp', ['ngFormLib',\\n            'ngFormLib.policy.behaviourOnStateChange',\\n            'ngFormLib.policy.checkForStateChanges',\\n            'ngFormLib.policy.stateDefinitions'\\n          ])\\n          // Replace the 'formPolicyBehaviourOnStateChange' policy with a new implementation\\n          .factory('formPolicyBehaviourOnStateChange', ['formPolicyBehaviourOnStateChangeLibrary', function(policyLib) {\\n            return policyLib.onSubmitFocusFirstField;\\n          }])\\n          // Replace the 'formPolicycheckForStateChanges' policy with a new implementation\\n          .factory('formPolicycheckForStateChanges', ['formPolicycheckForStateChangesLibrary', function(policyLib) {\\n            return policyLib.onChange;\\n          }]);\\n          // Replace the 'formPolicyStateDefinitions' policy with a new implementation\\n          .factory('formPolicyStateDefinitions', ['formPolicyStateDefinitionLibrary', function(policyLib) {\\n\\n            return function(formName, fieldName) {\\n              // Return an object with the stateName(key) and the stateDefinition string(value)\\n              return {\\n                'error': policyLib.immediately(formName, fieldName)\\n              };\\n            };\\n\\n          }]);\\n        </code>\\n      </pre>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"callout callout-info\\\">\\n    <h4>Per-Form configuration</h4>\\n\\n    <p>You can override the application-wide (default) policies by specifying a policy-object on the form via a <code>form-policy</code> attribute:</p>\\n    <div class=\\\"highlight\\\">\\n      <pre class=\\\"bs-example-code\\\"><code class=\\\"html\\\" highlight-block>\\n        &lt;div ng-controller=\\\"myController as ctrl\\\"&gt;\\n          &lt;form form-policy=\\\"myPolicy\\\"&gt;...&lt;/form&gt;\\n        &lt;/div&gt;\\n      </code></pre>\\n    </div>\\n    <div class=\\\"highlight\\\">\\n      <pre class=\\\"bs-example-code\\\"><code class=\\\"javascript\\\" highlight-block>\\nmodule.controller('myController', function() {\\n  var vm = this;\\n\\n  function wonderChecker(scope, element, name, errorCondition, ngModelController) {\\n      //...\\n  }\\n\\n  // This will overwrite only the checkForStateChanges policy\\n  vm.myPolicy = {\\n    checkForStateChanges: wonderChecker,\\n  };\\n}\\n        </code>\\n      </pre>\\n    </div>\\n  </div>\\n\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/ngFormLib/policy/docs/formPolicy.docs.html\n ** module id = 77\n ** module chunks = 1\n **/","module.exports = {\n\t\"FIELD_ERROR\": {\n\t\t\"TEMPLATE\": {\n\t\t\t\"REQUIRED\": \"Please enter {{pronoun}} {{fieldLabel}}.\"\n\t\t},\n\t\t\"NAME_REQUIRED\": \"@:ERROR.TEMPLATE.REQUIRED\",\n\t\t\"TITLE_REQUIRED\": \"@:ERROR.TEMPLATE.REQUIRED\"\n\t},\n\t\"FIELD\": {\n\t\t\"TITLE\": \"Title (from translation file)\"\n\t},\n\t\"OTHER\": {\n\t\t\"HINT\": \"This is a hint from the translation file\",\n\t\t\"PLACEHOLDER\": \"Select an item from the translation file\"\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/json-loader!./modules/docs/assets/language/enAU.json\n ** module id = 78\n ** module chunks = 1\n **/"],"sourceRoot":""}